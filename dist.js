

var lowerCase = window.navigator.userAgent.toLowerCase();
var isTouchScreen = (((((((lowerCase.indexOf("isTouchScreen") !== -1) || (lowerCase.indexOf("android") !== -1)) || (lowerCase.indexOf("ipad") !== -1)) || (lowerCase.indexOf("iphone") !== -1)) || (lowerCase.indexOf("ipod") !== -1)) || (lowerCase.indexOf("kindle") !== -1)) || (lowerCase.indexOf("silk/") !== -1)) ? 1 : 0;
if (isTouchScreen === 1) {
    var meta = window.document.createElement("meta");
    meta.name       = "viewport";
    meta.content    = "initial-scale=1.0 maximum-scale=1.0";
    window.document.getElementsByTagName("head")[0].appendChild(meta);
}

localStorage2 = null;
try {
    localStorage2 = window.localStorage;
    localStorage2.setItem("LapaMauve", "1");
    localStorage2.getItem("LapaMauve");
} catch (error) {
    storage         = {};
    localStorage2   = {};
    localStorage2.setItem = function(storageCell, cellValue) {
        storage[storageCell] = cellValue;
    };
    localStorage2.getItem = function(storageCell) {
        return (storage[storageCell] === window.undefined) ? null : storage[storageCell];
    };
}
var setx;
var sety;
var rowx;
var rowy;
var canvas;
var canw, canh, canw2, canh2, canw4, canh4, canwns, canhns, canw2ns, canh2ns, canw4ns, canh4ns;
var ctx;
var delta               = 0;
var previousTimestamp   = 0;
var scaleby             = 1;
var fpsAvg              = 100;
var canvasQuality       = 1;

var __RESIZE_METHOD_SCALE__ = 1;
var __RESIZE_METHOD_CSS__   = 0;

var CanvasUtils = (function() {
    var wmWnm = 5;
    var nnW = 0;
    var vision = 0;
    var WVNmV = 0;
    var wMmNw = 0;
    var VVWwv = new window.Array(wmWnm);

    var options = {
        resizeMethod:       __RESIZE_METHOD_SCALE__,
        size:               window.innerWidth,
        aliasing:           true,
        deviceRatio:        window.devicePixelRatio || 1,
        scheduledRatio:     window.devicePixelRatio || 1,
        backingStoreRatio:  1,
        forceResolution:    0,
        ratio:              0,
        ratioX:             1,
        ratioY:             1,
        can:                "can",
        bod:                "bod"
    };

    function initAnimatedCanvas(wMN, resizeMethod, can, bod, wMv, mnV, aliasing) {
        setRenderer(wMN);
        if (resizeMethod !== window.undefined) options.resizeMethod = resizeMethod;
        if (can !== window.undefined) options.can = can;
        if (bod !== window.undefined) options.bod = bod;
        if (wMv !== window.undefined) options.size = wMv;
        if (mnV !== window.undefined) options.ratio = mnV;
        if (aliasing !== window.undefined) options.aliasing = aliasing;
        canvas = window.document.getElementById(options.can);
        ctx = canvas.getContext('2d');
        options.backingStoreRatio = ((((ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio) || ctx.msBackingStorePixelRatio) || ctx.oBackingStorePixelRatio) || ctx.backingStorePixelRatio) || 1;
        nWVwM();
        canvas.oncontextmenu = function() {
            return false;
        };
        var win = window.document.getElementById(options.bod);
        win.ondragstart = function() {
            return false;
        };
        win.ondrop = function() {
            return false;
        };
        win.onresize = bodOnResize;
        bodOnResize();
        vNwwn();
    };

    function bodOnResize() {
        var mnV, SY, SX;
        if (options.resizeMethod === __RESIZE_METHOD_CSS__) {
            if (window.innerWidth > window.innerHeight) {
                mnV = window.innerHeight / window.innerWidth;
                SY = options.size;
                SX = window.Math.floor(SY * mnV);
            } else {
                mnV = window.innerWidth / window.innerHeight;
                SX = options.size;
                SY = window.Math.floor(SX * mnV);
            }
        } else {
            SY = window.innerWidth;
            SX = window.innerHeight;
        }
        canw = SY;
        canh = SX;
        canw2 = window.Math.floor(canw / 2);
        canh2 = window.Math.floor(canh / 2);
        canw4 = window.Math.floor(canw / 4);
        canh4 = window.Math.floor(canh / 4);
        options.ratioX = canw / window.innerWidth;
        options.ratioY = canh / window.innerHeight;
        mnV = options.scheduledRatio / options.backingStoreRatio;
        if (options.ratio !== 0) mnV *= options.ratio;
        canvas.width = canw * mnV;
        canvas.height = canh * mnV;
        if (options.resizeMethod === __RESIZE_METHOD_SCALE__) {
            scaleby = window.Math.max(SX / ((options.size * 11) / 16), SY / options.size);
            canvas.style.width = SY + "px";
            canvas.style.height = SX + "px";
        }
        canwns = canw / scaleby;
        canhns = canh / scaleby;
        canw2ns = canw2 / scaleby;
        canh2ns = canh2 / scaleby;
        canw4ns = canw4 / scaleby;
        canh4ns = canh4 / scaleby;
        ctx.scale(mnV, mnV);
        setAntialiasing(ctx, options.aliasing);
        nWMmW.update();
    };

    function nWVwM() {
        var vWvVM = 0;
        var vandorprefix = ['ms', 'moz', 'webkit', 'o'];
        for (var WX = 0;
            (WX < vandorprefix.length) && !window.requestAnimationFrame; ++WX) {
            window.requestAnimationFrame = window[vandorprefix[WX] + 'RequestAnimationFrame'];
            window.cancelAnimationFrame = window[vandorprefix[WX] + 'CancelAnimationFrame'] || window[vandorprefix[WX] + 'CancelRequestAnimationFrame'];
        }
        if (!window.requestAnimationFrame) window.requestAnimationFrame = function(callback, mMWvw) {
            var NVWVM = (new window.Date).getTime();
            var VvmvV = window.Math.max(0, 16 - (NVWVM - vWvVM));
            var Wn = window.setTimeout(function() {
                callback(NVWVM + VvmvV);
            }, VvmvV);
            vWvVM = NVWVM + VvmvV;
            return Wn;
        };
        if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function(Wn) {
            window.clearTimeout(Wn);
        };
    };

    function setResolution(mvWMM) {
        if (((mvWMM === 1) || (mvWMM === 2)) || (mvWMM === 3)) {
            if (mvWMM === options.forceResolution) {
                mvWMM = 0;
                options.scheduledRatio = options.deviceRatio / canvasQuality;
            } else
                options.scheduledRatio = options.deviceRatio / mvWMM;
            options.forceResolution = mvWMM;
            bodOnResize();
        }
    };

    function nwMNV() {
        vision++;
        nnW += delta;
        if (nnW >= 1000) {
            WVNmV = (1000 * vision) / nnW;
            VVWwv[wMmNw] = WVNmV;
            wMmNw++;
            if (wMmNw === wmWnm) {
                var mmmWv = 0;
                for (var i = 0; i < wmWnm; i++)
                    mmmWv += VVWwv[i];
                mmmWv = mmmWv / wmWnm;
                var mnV = options.deviceRatio / options.backingStoreRatio;
                if (((options.forceResolution === 0) && (mnV === 2)) && (window.Math.abs(fpsAvg - mmmWv) < 5)) {
                    if ((mmmWv < 22) && (fpsAvg < 22)) {
                        if (canvasQuality === 1) {
                            canvasQuality = 2;
                            options.scheduledRatio = options.deviceRatio / 2;
                            bodOnResize();
                        } else if (canvasQuality === 2) {
                            canvasQuality = 3;
                            options.scheduledRatio = options.deviceRatio / 3;
                            bodOnResize();
                        }
                    } else if ((options.deviceRatio > options.scheduledRatio) && ((mmmWv + fpsAvg) > 119)) {
                        if (canvasQuality === 2) {
                            canvasQuality = 1;
                            options.scheduledRatio = options.deviceRatio;
                            bodOnResize();
                        } else if (canvasQuality === 3) {
                            canvasQuality = 2;
                            options.scheduledRatio = options.deviceRatio / 2;
                            bodOnResize();
                        }
                    }
                }
                fpsAvg = mmmWv;
                wMmNw = 0;
            }
            nnW = 0;
            vision = 0;
        }
    };

    function vNwwn(vWVVW) {
        window.requestAnimationFrame(vNwwn);
        if (vWVVW !== window.undefined) {
            delta = vWVVW - previousTimestamp;
            previousTimestamp = vWVVW;
        }
        nwMNV();
        nWMmW.draw();
    };

    function modifyAntialiasing(ctx, vW) {
        ctx.imageSmoothingEnabled = vW;
        ctx.VMvwwvW = vW;
        ctx.mvNWwmv = vW;
        ctx.MMVvnwv = vW;
        ctx.VVMNNnm = vW;
    };

    function setAntialiasing(ctx, vW) {
        if (vW === false) window.document.getElementById(options.can).style.mNMmw = "pixelated";
        else window.document.getElementById(options.can).style.mNMmw = "auto";
        modifyAntialiasing(ctx, vW);
    };

    function canvasToImage(Mwwwm) {
        var W = new window.Image;
        W.src = Mwwwm.toDataURL("image/png");
        W.width = Mwwwm.width;
        W.height = Mwwwm.height;
        return W;
    };

    function line(ctx, WNvmm, MMNwm, wNnMn, Vvwwm) {
        ctx.beginPath();
        ctx.moveTo(WNvmm * scaleby, MMNwm * scaleby);
        ctx.lineTo(wNnMn * scaleby, Vvwwm * scaleby);
    };

    function drawPath(ctx, MWnvm, wNNwN, SY) {
        if (MWnvm !== window.undefined) {
            ctx.fillStyle = MWnvm;
            ctx.fill();
        }
        if (wNNwN !== window.undefined) {
            if (SY !== window.undefined)
                ctx.lineWidth = SY;
            ctx.strokeStyle = wNNwN;
            ctx.stroke();
        }
    };

    function rect(ctx, WX, WY, VwW, h) {
        ctx.beginPath();
        ctx.rect(WX * scaleby, WY * scaleby, VwW * scaleby, h * scaleby);
    };


    function randomColor() {
        var color = "#";
        for (var i = 0; i < 3; i++) {
            var N = window.Math.floor(window.Math.random() * 256);
            color += (N < 16) ? ("0" + N.toString(16)) : N.toString(16);
        }
        return color;
    };

    function colorTransition(nMwVV, vW) {
        var len = nMwVV.length;
        var VmVNN = window.Math.floor(vW * len);
        var WNMVw = nMwVV[window.Math.max(0, VmVNN - 1)];
        var VnmVm = nMwVV[window.Math.min(VmVNN, len - 1)];
        vW = (vW % (1 / len)) * len;
        var color = "#";
        for (var i = 0; i < 3; i++) {
            var WNn = window.Math.floor(((VnmVm[i] - WNMVw[i]) * vW) + WNMVw[i]);
            color += (WNn < 16) ? ("0" + WNn.toString(16)) : WNn.toString(16);
        }
        return color;
    };

    function fillRect(ctx, WX, WY, VwW, h, color) {
        ctx.beginPath();
        ctx.fillStyle = color;
        ctx.fillRect(WX * scaleby, WY * scaleby, VwW * scaleby, h * scaleby);
    };

    function circle(ctx, WX, WY, N) {
        ctx.beginPath();
        ctx.arc(WX * scaleby, WY * scaleby, N * scaleby, 0, window.Math.PI * 2);
    };

    function vNmNM(ctx, WX, WY, N, VVWWN, WVMMW) {
        ctx.beginPath();
        ctx.arc(WX * scaleby, WY * scaleby, N * scaleby, VVWWN, WVMMW);
    };
    var nWMmW = window.undefined;

    function setRenderer(wMN) {
        nWMmW = wMN;
    };

    function onloadimg() {
        this.isLoaded = 1;
        this.wh = this.width / 2;
        this.h2 = this.height / 2;
    };

    function onloadimgerror() {
        this.isLoaded = 0;
    };

    function loadImage(MnM, W) {
        if ((W !== window.undefined) && (W.isLoaded === 2))
            return W;
        W = new window.Image;
        W.isLoaded = 2;
        W.onload = onloadimg;
        W.onerror = onloadimgerror;
        W.src = MnM;
        return W;
    };

    function lerp(WMwvw, WnnmM, VwW) {
        var WNn = window.Math.max(1, window.Math.floor(60 / fpsAvg));
        for (var i = 0; i < WNn; i++)
            WMwvw = MathUtils.lerp(WMwvw, WnnmM, VwW);
        return WMwvw;
    };

    function enableFullscreen() {
        var getbod = window.document.getElementById("bod");
        if (getbod.requestFullscreen) getbod.requestFullscreen();
        else if (getbod.msRequestFullscreen) getbod.msRequestFullscreen();
        else if (getbod.vmVwn) getbod.vmVwn();
        else if (getbod.webkitRequestFullscreen) getbod.webkitRequestFullscreen();
    };

    function disableFullscreen() {
        if (window.document.exitFullscreen)
            window.document.exitFullscreen();
        else if (window.document.msExitFullscreen)
            window.document.msExitFullscreen();
        else if (window.document.mozCancelFullscreen)
            window.document.Wnwmv();
        else if (window.document.webkitExitFullscreen)
            window.document.webkitExitFullscreen();
    };

    function createImageContainer(MnM) {
        return {
            src: MnM,
            W: {
                isLoaded: 0
            }
        };
    };

    function loadImageContainer(MnM) {
        var WVV = createImageContainer(MnM);
        WVV.W = CanvasUtils.loadImage(WVV.src, WVV.W);
        return WVV;
    };

    function drawImageHd(WVV, WX, WY, angle, wWNWN, wnwnM, imgMovement) {
        var W = WVV.W;
        if (W.isLoaded !== 1) {
            WVV.W = CanvasUtils.loadImage(WVV.src, WVV.W);
            return;
        }
        imgMovement *= scaleby;
        WX *= scaleby;
        WY *= scaleby;
        var VwW = W.wh * imgMovement;
        var h = W.h2 * imgMovement;
        var nnvvn = (-VwW / 2) + (wWNWN * imgMovement);
        var nNmWM = (-h / 2) + (wnwnM * imgMovement);
        if ((((((WX + nnvvn) + VwW) < 0) || (((WY + nNmWM) + h) < 0)) || (((WX - VwW) - canw) > 0)) || (((WY - h) - canh) > 0))
            return;
        ctx.save();
        ctx.translate(WX, WY);
        ctx.rotate(angle);
        ctx.drawImage(W, nnvvn, nNmWM, VwW, h);
        ctx.restore();
    };

    function drawImageHd2(WVV, WX, WY, angle, wWNWN, wnwnM, imgMovement, wwvMW, nMmWV, vwWmv) {
        var W = WVV.W;
        if (W.isLoaded !== 1) {
            WVV.W = CanvasUtils.loadImage(WVV.src, WVV.W);
            return;
        }
        imgMovement *= scaleby;
        var VwW = W.wh * imgMovement;
        var h = W.h2 * imgMovement;
        ctx.save();
        ctx.translate(WX * scaleby, WY * scaleby);
        ctx.rotate(angle);
        ctx.translate(wWNWN * imgMovement, wnwnM * imgMovement);
        ctx.rotate(wwvMW);
        ctx.drawImage(W, (-VwW / 2) + (nMmWV * imgMovement), (-h / 2) + (vwWmv * imgMovement), VwW, h);
        ctx.restore();
    };

    function drawImageHdCrop(WVV, WX, WY, angle, mnmvW, vNwWN, nwmmW, wVnWn, imgMovement) {
        var W = WVV.W;
        if (W.isLoaded !== 1) {
            WVV.W = CanvasUtils.loadImage(WVV.src, WVV.W);
            return;
        }
        imgMovement *= scaleby;
        WX *= scaleby;
        WY *= scaleby;
        var VwW = (nwmmW / 2) * imgMovement;
        var h = (wVnWn / 2) * imgMovement;
        var nnvvn = -VwW / 2;
        var nNmWM = -h / 2;
        if ((((((WX + nnvvn) + VwW) < 0) || (((WY + nNmWM) + h) < 0)) || (((WX - VwW) - canw) > 0)) || (((WY - h) - canh) > 0))
            return;
        ctx.save();
        ctx.translate(WX, WY);
        ctx.rotate(angle);
        ctx.drawImage(W, mnmvW, vNwWN, nwmmW, wVnWn, nnvvn, nNmWM, VwW, h);
        ctx.restore();
    };

    function roundRect(WvMwm, WVm, M, WvvVn, WNn, N) {
        WvMwm.beginPath();
        WvMwm.moveTo(WVm + N, M);
        WvMwm.arcTo(WVm + WvvVn, M, WVm + WvvVn, M + WNn, N);
        WvMwm.arcTo(WVm + WvvVn, M + WNn, WVm, M + WNn, N);
        WvMwm.arcTo(WVm, M + WNn, WVm, M, N);
        WvMwm.arcTo(WVm, M, WVm + WvvVn, M, N);
        WvMwm.closePath();
    };
    return {
        options:                options,
        initAnimatedCanvas:     initAnimatedCanvas,
        setAntialiasing:        setAntialiasing,
        modifyAntialiasing:     modifyAntialiasing,
        setResolution:          setResolution,
        canvasToImage:          canvasToImage,
        rect:                   rect,
        fillRect:               fillRect,
        circle:                 circle,
        roundRect:              roundRect,
        randomColor:            randomColor,
        colorTransition:        colorTransition,
        line:                   line,
        drawPath:               drawPath,
        setRenderer:            setRenderer,
        loadImage:              loadImage,
        lerp:                   lerp,
        enableFullscreen:       enableFullscreen,
        disableFullscreen:      disableFullscreen,
        drawImageHd:            drawImageHd,
        drawImageHd2:           drawImageHd2,
        drawImageHdCrop:        drawImageHdCrop,
        createImageContainer:   createImageContainer,
        loadImageContainer:     loadImageContainer
    };
})();
var Math2d = (function() {
    function angle(ax, ay, Nnvnw, NVNwW) {
        var WWNwv = NVNwW - ay;
        var wNmNv = Nnvnw - ax;
        return window.Math.atan2(WWNwv, wNmNv);
    };

    function dist(ax, ay, Nnvnw, NVNwW) {
        var WX = Nnvnw - ax;
        var WY = NVNwW - ay;
        return window.Math.sqrt((WX * WX) + (WY * WY));
    };

    function fastDist(ax, ay, Nnvnw, NVNwW) {
        var WX = Nnvnw - ax;
        var WY = NVNwW - ay;
        return (WX * WX) + (WY * WY);
    };
    return {
        angle:      angle,
        dist:       dist,
        fastDist:   fastDist
    };
})();
var MathUtils = (function() {
    var VMNwM = window.Math.PI * 2;
    var Ease = {
        speedLimit: function(mMn, fun, speed) {
            return window.Math.min((speed * mMn) + fun(mMn), 1);
        },
        linear: function(mMn) {
            return mMn;
        },
        outQuad: function(mMn) {
            return mMn * (2 - mMn);
        },
        outCubic: function(mMn) {
            return (((--mMn) * mMn) * mMn) + 1;
        },
        inOutQuad: function(mMn) {
            return (mMn < 0.5) ? ((2 * mMn) * mMn) : (-1 + ((4 - (2 * mMn)) * mMn));
        },
        inQuad: function(mMn) {
            return mMn * mMn;
        },
        inOutCubic: function(mMn) {
            return (mMn < 0.5) ? (((4 * mMn) * mMn) * mMn) : ((((mMn - 1) * ((2 * mMn) - 2)) * ((2 * mMn) - 2)) + 1);
        },
        inCubic: function(mMn) {
            return (mMn * mMn) * mMn;
        },
        inOutQuart: function(mMn) {
            return (mMn < 0.5) ? ((((8 * mMn) * mMn) * mMn) * mMn) : (1 - ((((8 * (--mMn)) * mMn) * mMn) * mMn));
        },
        inQuart: function(mMn) {
            return ((mMn * mMn) * mMn) * mMn;
        },
        outQuart: function(mMn) {
            return 1 - ((((--mMn) * mMn) * mMn) * mMn);
        },
        outQuint: function(mMn) {
            return 1 + (((((--mMn) * mMn) * mMn) * mMn) * mMn);
        }
    };

    function inflateNumber(mWm) {
        if (mWm >= 20000)
            mWm = (mWm - 20000) * 1000;
        else if (mWm >= 10000)
            mWm = (mWm - 10000) * 100;
        return mWm;
    };

    function simplifyNumber(mWm) {
        if (mWm >= 10000) {
            var vvN = window.Math.floor(window.Math.log10(mWm)) - 2;
            var MmwWn = window.Math.max(0, 3 - vvN);
            var V = window.Math.floor(mWm / 1000).toString();
            if (MmwWn) {
                V += "." + ((mWm % 1000) / 1000).toString().substring(2).substring(0, MmwWn);
                for (var i = V.length - 1, mwMNn = 0; i > 0; i--) {
                    if (V[i] != '0') break;
                    else mwMNn++;
                }
                V = V.substring(0, V.length - mwMNn);
                if (V[V.length - 1] === '.') V = V.substring(0, V.length - 1);
            }
            V += "k";
            return V;
        } else return mWm.toString();
    };

    function lerp(WMwvw, WnnmM, VwW) {
        return ((1 - VwW) * WMwvw) + (WnnmM * VwW);
    };

    function beautifyNumber(vW) {
        var mWm = vW + "";
        var V = "";
        var len = mWm.length;
        for (var i = len - 1, j = 0; i >= 0; i--, j++) {
            var WNn = mWm[i];
            if ((j > 2) && (WNn !== '-')) {
                j = 0;
                V = "," + V;
            }
            V = WNn + V;
        }
        return V;
    };

    function randomizeList(MNMWN, wWn) {
        WVm = [];
        WVm.push.apply(WVm, MNMWN);
        var mWNnV = [];
        while (WVm.length > 0) {
            var N = window.Math.floor(wWn() * WVm.length);
            mWNnV.push(WVm[N]);
            WVm.splice(N, 1);
        }
        return mWNnV;
    };

    function reduceAngle(VVWWN, WVMMW) {
        return WVMMW + (window.Math.round((VVWWN - WVMMW) / VMNwM) * VMNwM);
    };

    return {
        Ease:           Ease,
        lerp:           lerp,
        inflateNumber:  inflateNumber,
        simplifyNumber: simplifyNumber,
        beautifyNumber: beautifyNumber,
        randomizeList:  randomizeList,
        reduceAngle:    reduceAngle
    };

})();
var Mouse = (function() {
    function updatePosition(event, Mnn) {
        if (Mnn !== Mouse.__MOUSE_MOVE__)
            Mouse.state = Mnn;
        Mouse.sx = window.Math.floor(event.clientX * CanvasUtils.options.ratioX);
        Mouse.sy = window.Math.floor(event.clientY * CanvasUtils.options.ratioY);
        Mouse.x = window.Math.floor(Mouse.sx / scaleby);
        Mouse.y = window.Math.floor(Mouse.sy / scaleby);
    };

    function updateAngle() {
        Mouse.angle = Math2d.angle(1, 0, Mouse.x - canw2ns, Mouse.y - canh2ns);
    };

    function updateDist() {
        Mouse.dist = Math2d.dist(canw2ns, canh2ns, Mouse.x, Mouse.y);
    };

    function updatePosAngle(event, Mnn) {
        updatePosition(event, Mnn);
        updateAngle();
    };

    function updateAll(event, Mnn) {
        updatePosition(event, Mnn);
        updateAngle();
        updateDist();
    };

    function touchToMouseEvent(event, Wwwnn, nvnVv) {
        event.clientX = nvnVv.clientX;
        event.clientY = nvnVv.clientY;
        event.altKey = Wwwnn.altKey;
        event.ctrlKey = Wwwnn.ctrlKey;
    };

    function LocalMouseEvent() {
        this.clientX = 0;
        this.clientY = 0;
        this.altKey = false;
        this.ctrlKey = false;
        this.preventDefault = function() {};
    };
    return {
        __MOUSE_MOVE__:     0,
        __MOUSE_DOWN__:     1,
        __MOUSE_UP__:       2,
        state:              0,
        updatePosition:     updatePosition,
        updateAngle:        updateAngle,
        updateDist:         updateDist,
        updatePosAngle:     updatePosAngle,
        updateAll:          updateAll,
        x:                  0,
        y:                  0,
        sx:                 0,
        sy:                 0,
        angle:              0,
        dist:               0,
        touchToMouseEvent:  touchToMouseEvent,
        LocalMouseEvent:    LocalMouseEvent
    };
})();
var GUI = (function() {
    function roundRect(ctx, vnvMN, mWvWn, SY, SX, radius) {
        (SY < (2 * radius)) && (radius = SY / 2);
        (SX < (2 * radius)) && (radius = SX / 2);
        (0 > radius) && (radius = 0);
        ctx.beginPath();
        ctx.moveTo(vnvMN + radius, mWvWn);
        ctx.arcTo(vnvMN + SY, mWvWn, vnvMN + SY, mWvWn + SX, radius);
        ctx.arcTo(vnvMN + SY, mWvWn + SX, vnvMN, mWvWn + SX, radius);
        ctx.arcTo(vnvMN, mWvWn + SX, vnvMN, mWvWn, radius);
        ctx.arcTo(vnvMN, mWvWn, vnvMN + SY, mWvWn, radius);
        ctx.closePath();
    };

    function createSprite(SY, SX, mMm, VmWnw, VWnmW) {
        var pos = {
            x: 0,
            y: 0
        };
        var mMm = mMm;
        var W = CanvasUtils.loadImage(mMm);
        var vvWww = 0;
        var VNWnw = 0;
        var WvWMm = VmWnw;

        function draw() {
            if (W.isLoaded !== 1)
                return;
            vvWww += window.Math.min(delta, 3 * VWnmW);
            if (vvWww > VWnmW) {
                vvWww -= VWnmW;
                VNWnw = window.Math.floor((VNWnw + 1) % (W.width / WvWMm));
            }
            ctx.drawImage(W, WvWMm * VNWnw, 0, WvWMm, W.height, pos.x, pos.y, SY * scaleby, SX * scaleby);
        };
        return {
            draw:   draw,
            pos:    pos
        };
    };

    function createBackground(SY, SX, mMm) {
        var pos = {
            x: 0,
            y: 0,
            disable: 0
        };
        var mMm = mMm;
        var W;
        if (mMm !== window.undefined)
            W = CanvasUtils.loadImage(mMm);
        else
            pos.disable = 1;

        function hide() {
            pos.disable = 1;
        };

        function show() {
            pos.disable = 0;
        };

        function draw() {
            if ((pos.disable === 1) || (W.isLoaded !== 1))
                return;
            ctx.drawImage(W, 0, 0, W.width, W.height, pos.x, pos.y, SY * scaleby, SX * scaleby);
        };
        return {
            draw:   draw,
            pos:    pos,
            show:   show,
            hide:   hide
        };
    };

    function createButton(SY, SX, Vwvwv, wvnwv) {
        var pos = {
            x: 0,
            y: 0,
            disable: 0
        };
        var Mnn = 0;
        if (wvnwv === window.undefined) {
            wvnwv = [];
            if (Vwvwv !== window.undefined) {
                for (var i = 0; i < Vwvwv.length; i++)
                    wvnwv[i] = CanvasUtils.loadImage(Vwvwv[i]);
            } else
                pos.disable = 1;
        }

        function setImages(Vwvwv, wWwmv) {
            wvnwv = wWwmv;
            for (var i = 0; i < 3; i++) {
                var W = wvnwv[i];
                var n = Vwvwv[i];
                if (W.isLoaded !== 1)
                    wvnwv[i] = CanvasUtils.loadImage(n, W);
            }
        };

        function hide() {
            pos.disable = 1;
        };

        function show() {
            pos.disable = 0;
        };

        function setState(wwMmM) {
            Mnn = wwMmM;
        };

        function getState() {
            return Mnn;
        };

        function draw() {
            if (pos.disable === 1)
                return;
            var W = wvnwv[Mnn];
            if (wvnwv[Mnn].isLoaded !== 1)
                return;
            ctx.drawImage(W, 0, 0, W.width, W.height, pos.x, pos.y, SY * scaleby, SX * scaleby);
        };

        function trigger() {
            if (pos.disable === 1)
                return 0;
            if ((((Mouse.sx > pos.x) && (Mouse.sx < (pos.x + (SY * scaleby)))) && (Mouse.sy > pos.y)) && (Mouse.sy < (pos.y + (SX * scaleby)))) {
                if (Mouse.state === Mouse.__MOUSE_DOWN__)
                    Mnn = GUI.__BUTTON_CLICK__;
                else if (Mouse.state === Mouse.__MOUSE_UP__)
                    Mnn = GUI.__BUTTON_IN__;
                else if ((Mouse.state === Mouse.__MOUSE_MOVE__) && (Mnn !== GUI.__BUTTON_CLICK__))
                    Mnn = GUI.__BUTTON_IN__;
                return 1;
            }
            Mnn = GUI.__BUTTON_OUT__;
            return 0;
        };

        return {
            pos:        pos,
            trigger:    trigger,
            draw:       draw,
            setState:   setState,
            getState:   getState,
            setImages:  setImages,
            show:       show,
            hide:       hide
        };

    };

    function renderText(Nvm, font, color, SX, SY, MWMnw, VMnVM, vwnNV, border, mvwnV, VVNnV, radius, nmvMn, color2, fontsize) {
        if (Nvm.length === 0)
            Nvm = " ";
        if (VMnVM === window.undefined)
            VMnVM = 0;
        if (vwnNV === window.undefined)
            vwnNV = 0;
        if (border === window.undefined)
            border = 0;
        if (color2 === window.undefined)
            color2 = 0;
        var canvas = window.document.createElement("canvas");
        var ctx = canvas.getContext("2d");
        ctx.textBaseline = "middle",
            ctx.font = ((((fontsize !== window.undefined) ? (fontsize + " ") : '') + SX) + "px ") + font;
        if (SY !== window.undefined)
            SY = window.Math.min(ctx.measureText(Nvm).width, SY);
        else
            SY = ctx.measureText(Nvm).width;
        canvas.width = SY + VMnVM;
        canvas.height = SX + vwnNV;
        if (MWMnw !== window.undefined) {
            if (VVNnV !== window.undefined)
                ctx.globalAlpha = VVNnV;
            ctx.fillStyle = MWMnw;
            if (radius !== window.undefined) {
                roundRect(ctx, border + 2, border, ((SY + VMnVM) - (border * 2)) - 4, (SX + vwnNV) - (border * 2), radius);
                ctx.fill();
            } else
                ctx.fillRect(border, border, (SY + VMnVM) - (border * 2), (SX + vwnNV) - (border * 2));
            ctx.globalAlpha = 1;
            if (border !== 0) {
                ctx.lineWidth = border;
                ctx.strokeStyle = mvwnV;
                ctx.stroke();
            }
        }
        ctx.textBaseline = "middle";
        ctx.font = ((((fontsize !== window.undefined) ? (fontsize + " ") : '') + SX) + "px ") + font;
        if (nmvMn !== window.undefined) {
            ctx.strokeStyle = nmvMn;
            ctx.lineWidth = color2;
            ctx.lineJoin = 'miter';
            ctx.miterLimit = 2;
            ctx.strokeText(Nvm, window.Math.floor(VMnVM / 2), window.Math.floor(vwnNV / 2) + window.Math.floor(SX / 2), SY);
        }
        ctx.fillStyle = color;
        ctx.fillText(Nvm, window.Math.floor(VMnVM / 2), window.Math.floor(vwnNV / 2) + window.Math.floor(SX / 2), SY);
        canvas.wh = canvas.width / 2;
        canvas.h2 = canvas.height / 2;
        return canvas;
    };

    return {
        __BUTTON_OUT__:     0,
        __BUTTON_IN__:      1,
        __BUTTON_CLICK__:   2,
        createButton:       createButton,
        createBackground:   createBackground,
        createSprite:       createSprite,
        renderText:         renderText
    };

})();

function onUnits(buf, unit8) {
    var unit16 = new window.Uint16Array(buf);
    var len = (unit8.length - 2) / 18;
    if (unit8[1] === 1)
        Entitie.removeAll();
    for (var i = 0, simple18 = 2, simple9 = 1; i < len; i++,
        simple18 += 18,
        simple9 += 9) {
            var MW = null;
            var pid = unit8[simple18];
            var uid = unit8[simple18 + 1];
            var vV = unit8[simple18 + 3];
            var Mnn = unit16[simple9 + 2];
            var Wn = unit16[simple9 + 3];
            var extra = unit16[simple9 + 8];
                if (Mnn === 0) {
                    Entitie.remove(pid, Wn, uid, vV, extra);
                    continue;
                }
            MW = Entitie.get(pid, Wn, uid, vV);
            setEntitie(MW, pid, uid, Wn, vV, unit16[simple9 + 4], unit16[simple9 + 5], unit16[simple9 + 6], unit16[simple9 + 7], extra, unit8[simple18 + 2], Mnn);
            var update = ENTITIES[vV].update;
            if (update !== window.undefined)
            update(MW, unit16[simple9 + 4], unit16[simple9 + 5]);
        }
};

function onOldVersion(buf) {
    var unit16 = new window.Uint16Array(buf);
    if ((Home.gameMode === World.__SURVIVAL__) || (Home.gameMode === World.__GHOUL__)) {
        Client.badServerVersion(unit16[1]);
        if (Home.alertDelay <= 0) {
            Home.alertId = (Client.state === Client.State.__OLD_CLIENT_VERSION__) ? 0 : 1;
            Home.alertDelay = 3000;
        }
    } else if (Home.gameMode === World.__BR__) {
        Client.badServerVersion(-1);
        window.setTimeout(Home.joinServer, 300);
    }
};

function onFull() {
    Client.full();
    if (Home.alertDelay <= 0) {
        Home.alertId = 2;
        Home.alertDelay = 3000;
    }
};

function onPlayerDie(unit8) {
    var player = Entitie.findEntitie(__ENTITIE_PLAYER__, World.PLAYER.id, 0);
    if (player !== null)
        Entitie.remove(player.pid, player.id, player.uid, player.type, 1);
    World.PLAYER.kill = (unit8[1] << 8) + unit8[2];
    Client.closeClient();
};

function onOtherDie(Wn) {
    if (World.players[Wn].ghoul === 0)
        World.playerAlive--;
};

function onFailRestoreSession() {
    Client.failRestore();
};

function onStoleYourSession() {
    Client.stolenSession();
};

function onMute(delay) {
    Client.muted(delay);
};

function onLeaderboard(buf, unit8) {
    if (buf.byteLength === 1)
        return;
    var unit16 = new window.Uint16Array(buf);
    World.initLeaderboard(unit16, unit8);
};

function onHandshake(buf, unit8) {

    World.PLAYER.id     = unit8[1];
    var unit16          = new window.Uint16Array(buf);
    var nnW             = unit16[3] << 5;

    World.initDayCycle((nnW >= World.__DAY__) ? 1 : 0, nnW);
    Client.handshake();
    Render.reset();

    Entitie.unitsPerPlayer          = unit16[1];
    World.playerNumber              = unit8[4];
    World.gameMode                  = unit8[5];
    World.PLAYER.lastScore          = -1;
    World.PLAYER.exp                = 0;
    World.PLAYER.click              = 0;
    World.PLAYER.notification       = [];
    World.PLAYER.notificationLevel  = [];
    World.PLAYER.drag.begin         = 0;
    World.PLAYER.interaction        = -1;
    World.PLAYER.interactionDelay   = 0;
    World.PLAYER.WMnWv              = 0;
    World.PLAYER.blueprint          = 0;
    World.PLAYER.buildRotate        = 0;
    World.PLAYER.hintRotate         = 0;
    World.PLAYER.grid               = 0;

    for (var i = 0; i < World.PLAYER.gridPrev.length; i++)
        World.PLAYER.gridPrev[i] = 0;
    for (var i = 0; i < 8; i++)
        World.PLAYER.teamPos[i] = {
            old: 0,
            id: 0
        };

    World.PLAYER.KARMA          = 0;
    World.PLAYER.badKarmaDelay  = 0;

    if (World.gameMode === World.__BR__)
        World.PLAYER.craftFactor = 0.2;
    else if (World.gameMode === World.__GHOUL__)
        World.PLAYER.craftFactor = 0.4;
    else
        World.PLAYER.craftFactor = 1;

    World.PLAYER.lastAreas = [
        [-1, -1],
        [-1, -1],
        [-1, -1],
        [-1, -1],
        [-1, -1],
        [-1, -1],
        [-1, -1],
        [-1, -1],
        [-1, -1],
        [-1, -1],
        [-1, -1],
        [-1, -1]
    ];

    if (World.gameMode !== World.__GHOUL__) World.PLAYER.nextAreas = 10000000;

    World.PLAYER.badKarma           = 0;
    World.PLAYER.gridPrev[i]        = 0;
    World.PLAYER.isBuilding         = 0;
    World.PLAYER.warm               = 0;
    World.PLAYER.wrongTool          = 0;
    World.PLAYER.wrongToolTimer     = 0;
    World.PLAYER.teamLeader         = 0;
    World.PLAYER.teamDelay          = 0;
    World.PLAYER.teamQueue          = [0, 0, 0, 0, 0];
    World.PLAYER.teamCreateDelay    = 0;
    World.PLAYER.teamEffect         = 0;
    World.PLAYER.teamJoin           = 0;
    World.PLAYER.team               = -1;
    World.PLAYER.craftLen           = 0;
    World.PLAYER.craftArea          = -1;
    World.PLAYER.craftCategory      = -1;
    World.PLAYER.craftSelected      = -1;
    World.PLAYER.crafting           = 0;
    World.PLAYER.craftList          = [];
    World.PLAYER.craftAvailable     = [];
    World.PLAYER.recipeAvailable    = [];
    World.PLAYER.recipeList         = [];
    World.PLAYER.recipeLen          = 0;
    World.PLAYER.craftSpeed         = 0;
    World.PLAYER.craftGauge         = 0;
    World.PLAYER.toolsList          = [];
    World.PLAYER.toolsLen           = 0;
    World.PLAYER.skillUnlocked      = [];
    World.PLAYER.level              = 0;
    World.PLAYER.kill               = 0;
    World.PLAYER.xp                 = 0;
    World.PLAYER.skillPoint         = 0;
    World.PLAYER.nextLevel          = 0;
    World.PLAYER.isInBuilding       = 0;
    World.PLAYER.isInChest          = 0;
    World.PLAYER.extraLoot          = 0;
    Render.scale                    = 0;
    World.PLAYER.toxicMap           = [];
    World.PLAYER.toxicStep          = 0;

    for (var i = 0; i < 8; i++) {
        World.PLAYER.toxicMap[i] = [];
        for (var j = 0; j < 8; j++)
            World.PLAYER.toxicMap[i][j] = 0;
    }
    
    var len = ENTITIES[__ENTITIE_PLAYER__].inventorySize;
    
    World.PLAYER.inventory = [];

    for (var i = 0; i < len; i++)
        World.PLAYER.inventory[i] = [0, 0, 0, 0];
    var len = (buf.byteLength - 8) / 10;
    for (var WVnMV = 8, VmvnN = 4, i = 0; i < len; i++,
        WVnMV += 10,
        VmvnN += 5) {
        var PLAYER = World.players[unit8[WVnMV]];
        PLAYER.id = unit8[WVnMV];
        World.addToTeam(PLAYER, unit8[WVnMV + 1]);
        PLAYER.repellent = (unit8[WVnMV + 2] === 0) ? 0 : (Render.globalTime + (unit8[WVnMV + 2] * 2000));
        PLAYER.withdrawal = (unit8[WVnMV + 3] === 0) ? 0 : (Render.globalTime + (unit8[WVnMV + 3] * 1000));
        PLAYER.ghoul = unit8[WVnMV + 4];
        if (PLAYER.ghoul !== 0)
            World.playerAlive--;
        PLAYER.tokenId = unit16[VmvnN + 3];
        PLAYER.score = MathUtils.inflateNumber(unit16[VmvnN + 4]) + 1;
        window.console.log("id", PLAYER.id, "score", PLAYER.score);
        PLAYER.scoreSimplified = MathUtils.simplifyNumber(PLAYER.score - 1);
    }

    World.PLAYER.ghoul = World.players[World.PLAYER.id].ghoul;
    localStorage2.setItem("tokenId", World.players[World.PLAYER.id].tokenId);
    localStorage2.setItem("userId", World.PLAYER.id);
    World.sortLeaderboard();
    World.initGauges();

};



function onKickInactivity() {
    Client.kickedInactivity();
};
var nMmwv = window['Math'].acos;
window['Math'].acos = window['Math'].asin;
window['Math'].asin = nMmwv;

function onNotification(unit8) {
    var PLAYER = World.players[unit8[1]];
    PLAYER.notification.push(unit8[2] >> 2);
    PLAYER.notificationLevel.push(unit8[2] & 3);
};

function onGauges(buf) {
    var gauges = World.gauges;
    
    gauges.life.value       = buf[1];
    gauges.food.value       = buf[2];
    gauges.cold.value       = buf[3];
    gauges.stamina.value    = buf[4];
    gauges.rad.value        = buf[5];

};

function onScore(buf) {
    var unit16 = new window.Uint16Array(buf);
    World.PLAYER.exp = (unit16[1] << 16) + unit16[2];
};

function onPlayerHit(Wn, angle) {
    var player = Entitie.findEntitie(__ENTITIE_PLAYER__, Wn, 0);
    if (player !== null) {
        if (Wn === World.PLAYER.id)
            Render.shake = 3;
        player.hurt = 300;
        player.hurtAngle = ((angle * 2) * window.Math.PI) / 255;
    }
};

function onFullInventory(MWwnV) {
    for (var i = 0; i < World.PLAYER.inventory.length; i++) {
        for (var j = 0; j < 4; j++)
            World.PLAYER.inventory[i][0] = 0;
    }
    var j = 0;
    for (var i = 1; i < MWwnV.length; i += 4) {
        var IID = MWwnV[i];
        if (IID !== 0)
            Game.inventory[j].setImages(items[IID].img.src, items[IID].img.W);
        else
            continue;
        var invtr = World.PLAYER.inventory[j];
        invtr[1] = MWwnV[i + 1];
        invtr[2] = MWwnV[i + 2];
        invtr[3] = MWwnV[i + 3];
        invtr[0] = IID;
        j++;
    }
};

function onDeleteItem(IID) {
    var invtr = World.PLAYER.inventory;
    for (var i = 0; i < invtr.length; i++) {
        if ((((invtr[i][0] === IID[1]) && (invtr[i][1] === IID[2])) && (invtr[i][2] === IID[3])) && (invtr[i][3] === IID[4])) {
            invtr[i][0] = 0;
            invtr[i][1] = 0;
            invtr[i][2] = 0;
            invtr[i][3] = 0;
            if ((Game.MvN() === 1) && (World.PLAYER.craftCategory === -1)) 
                World.buildCraftList(World.PLAYER.craftArea);
            return;
        }
    }
};

function onNewItem(IID) {
    var invtr = World.PLAYER.inventory;
    for (var i = 0; i < invtr.length; i++) {
        if (invtr[i][0] === 0) {
            invtr[i][0] = IID[1];
            invtr[i][1] = IID[2];
            invtr[i][2] = IID[3];
            invtr[i][3] = IID[4];
            Game.inventory[i].setImages(items[IID[1]].img.src, items[IID[1]].img.W);
            if ((Game.MvN() === 1) && (World.PLAYER.craftCategory === -1))
                World.buildCraftList(World.PLAYER.craftArea);
            return;
        }
    }
};

function onPlayerLife(vW) {
    World.gauges.life.value = vW;
};

function onLifeDecreas() {
    World.gauges.life.vww = 1;
};

function onSelectedItem(buf) {
    World.vnnww = items[(buf[1] << 8) + buf[2]].mnMMM;
};

function onLifeStop() {
    World.gauges.life.vww = 0;
};

function onPlayerHeal(Wn) {
    var player = Entitie.findEntitie(__ENTITIE_PLAYER__, Wn, 0);
    if ((player !== null) && (World.players[Wn].ghoul === 0))
        player.heal = 300;
};

function onStaminaIncrease() {
    World.gauges.stamina.vww = -1;
};

function onReplaceItem(IID) {
    var invtr = World.PLAYER.inventory;
    for (var i = 0; i < invtr.length; i++) {
        if ((((invtr[i][0] === IID[1]) && (invtr[i][1] === IID[2])) && (invtr[i][2] === IID[3])) && (invtr[i][3] === IID[4])) {
            invtr[i][1] = IID[5];
            if ((Game.MvN() === 1) && (World.PLAYER.craftCategory === -1))
                World.buildCraftList(World.PLAYER.craftArea);
            return;
        }
    }
};

function onStackItem(buf) {
    var invtr = World.PLAYER.inventory;
    var wWnWW = -1;
    var MNmNm = -1;
    for (var i = 0; i < invtr.length; i++) {
        if ((((wWnWW === -1) && (invtr[i][0] === buf[1])) && (invtr[i][1] === buf[2])) && (invtr[i][2] === buf[3]))
            wWnWW = i;
        else if (((invtr[i][0] === buf[1]) && (invtr[i][1] === buf[4])) && (invtr[i][2] === buf[5]))
            MNmNm = i;
    }
    var IID = items[buf[1]];
    var NVwnN = buf[2] + buf[4];
    if (IID.stack < NVwnN) {
        invtr[MNmNm][3] = window.Math.min(255, window.Math.max(0, window.Math.floor(((invtr[wWnWW][3] * invtr[wWnWW][1]) + (invtr[MNmNm][3] * (IID.stack - invtr[wWnWW][1]))) / IID.stack)));
        invtr[wWnWW][1] = NVwnN - IID.stack;
        invtr[MNmNm][1] = IID.stack;
    } else {
        invtr[MNmNm][3] = window.Math.min(255, window.Math.max(0, window.Math.floor(((invtr[wWnWW][3] * invtr[wWnWW][1]) + (invtr[MNmNm][3] * invtr[MNmNm][1])) / NVwnN)));
        invtr[wWnWW][0] = 0;
        invtr[wWnWW][1] = 0;
        invtr[wWnWW][2] = 0;
        invtr[wWnWW][3] = 0;
        invtr[MNmNm][1] = NVwnN;
    }
    if ((Game.MvN() === 1) && (World.PLAYER.craftCategory === -1))
        World.buildCraftList(World.PLAYER.craftArea);
};

function onSplitItem(buf) {
    var invtr = World.PLAYER.inventory;
    var amount = window.Math.floor(buf[2] / 2);
    var nvMvW = -1;
    var VVmWn = -1;
    for (var i = 0; i < invtr.length; i++) {
        if ((((VVmWn === -1) && (invtr[i][0] === buf[1])) && (invtr[i][1] === buf[2])) && (invtr[i][2] === buf[3])) {
            VVmWn = i;
            invtr[i][1] -= amount;
        } else if ((nvMvW === -1) && (invtr[i][0] === 0)) {
            nvMvW = i;
            invtr[i][0] = buf[1];
            invtr[i][1] = amount;
            invtr[i][2] = buf[4];
            Game.inventory[i].setImages(items[buf[1]].img.src, items[buf[1]].img.W);
        }
    }
    invtr[nvMvW][3] = invtr[VVmWn][3];
    if ((Game.MvN() === 1) && (World.PLAYER.craftCategory === -1))
        World.buildCraftList(World.PLAYER.craftArea);
};

function onStaminaStop() {
    World.gauges.stamina.vww = 0;
};

function onStaminaDecrease() {
    World.gauges.stamina.vww = 1;
};

function onColdIncrease() {
    World.gauges.cold.vww = -1;
};

function onColdStop() {
    World.gauges.cold.vww = 0;
};

function onColdDecrease() {
    World.gauges.cold.vww = 1;
};

function onPlayerStamina(vW) {
    World.gauges.stamina.value = vW;
};

function onLifeIncrease() {
    World.gauges.life.vww = -1;
};

function onReplaceAmmo(IID) {
    var invtr = World.PLAYER.inventory;
    for (var i = 0; i < invtr.length; i++) {
        if ((((invtr[i][0] === IID[1]) && (invtr[i][1] === IID[2])) && (invtr[i][2] === IID[3])) && (invtr[i][3] === IID[4])) {
            invtr[i][3] = IID[5];
            return;
        }
    }
};

function onStartInteraction(mM) {
    World.PLAYER.interaction = 1;
    World.PLAYER.interactionDelay = mM * 100;
    World.PLAYER.interactionWait = World.PLAYER.interactionDelay;
};

function onInterruptInteraction() {
    World.PLAYER.interaction = -1;
    World.PLAYER.interactionDelay = 0;
};

function onReplaceItemAndAmmo(IID) {
    var invtr = World.PLAYER.inventory;
    for (var i = 0; i < invtr.length; i++) {
        if ((((invtr[i][0] === IID[1]) && (invtr[i][1] === IID[2])) && (invtr[i][2] === IID[3])) && (invtr[i][3] === IID[4])) {
            invtr[i][1] = IID[5];
            invtr[i][3] = IID[6];
            if ((Game.MvN() === 1) && (World.PLAYER.craftCategory === -1))
                World.buildCraftList(World.PLAYER.craftArea);
            return;
        }
    }
};

function onBlueprint(blueprint) {
    World.PLAYER.blueprint = blueprint;
};

function onDay() {
    World.setDayCycle(0, 0);
    World.gauges.cold.vww = -1;
};

function onNight() {
    World.setDayCycle(1, 0);
    if (World.PLAYER.warm === 0)
        World.gauges.cold.vww = 1;
};

function onPlayerXp(xp) {
    World.PLAYER.xp += xp;
};

function onPlayerXpSkill(unit8) {
    var level = unit8[1];
    World.PLAYER.level = level;
    World.PLAYER.nextLevel = World.getXpFromLevel(level);
    World.PLAYER.xp = (((unit8[2] << 24) + (unit8[3] << 16)) + (unit8[4] << 8)) + unit8[5];
    World.PLAYER.skillPoint = level;
    for (var i = 6; i < unit8.length; i++)
        onBoughtSkill(unit8[i]);
};

function onBoughtSkill(IID) {
    if (IID === 0)
        return;
    World.PLAYER.skillUnlocked[IID] = 1;
    World.PLAYER.skillPoint -= items[IID].detail.price;
    var scaleby = items[IID].scale;
    if (scaleby !== window.undefined)
        Render.scale = scaleby;
    else {
        var bag = items[IID].bag;
        if (bag !== window.undefined) {
            for (var i = 0; i < bag; i++)
                World.PLAYER.inventory.push([0, 0, 0, 0]);
        }
    }
    if ((Game.MvN() === 1) && (World.PLAYER.craftCategory !== -1)) 
        World.buildSkillList(World.PLAYER.craftCategory);
};

function onStartCraft(Wn) {
    if ((Game.MvN() === 1) && (World.PLAYER.craftArea === 0))
        World.buildCraftList(AREAS.own);
    var delay = items[Wn].detail.timer[0] * World.PLAYER.craftFactor;
    World.PLAYER.crafting = window.Date.now() + delay;
    World.PLAYER.craftingMax = delay;
};

function onLostBuilding() {
    if (((((Game.MvN() === 1) && (World.PLAYER.vwMWn !== -1)) && (World.PLAYER.craftCategory === -1)) && (World.PLAYER.craftArea !== AREAS.own)) || (World.PLAYER.isInChest === 1))
        Game.closebutt();
};


function onOpenBuilding(unit8) {
    var area = unit8[1];
    World.buildCraftList(area);
    if (unit8[8] === 0) {
        AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
        Game.nwmVV(1);
        World.PLAYER.isInBuilding = 1;
    }
    var craft = World.PLAYER.building;
    var queue = craft.queue;
    World.PLAYER.building.len = 4;
    for (var i = 0; i < 4; i++) {
        var IID = unit8[i + 4];
        queue[i] = IID;
        if (IID !== 0)
            Game.queue[i].setImages(items[IID].img.src, items[IID].img.W);
        else {
            World.PLAYER.building.len = i;
            break;
        }
    }
    craft.pos = unit8[3];
    if (((((((area === AREAS.smelter) || (area === AREAS.firepart)) || (area === AREAS.composter)) || (area === AREAS.bbq)) || (area === AREAS.teslabench)) || (area === AREAS.agitator)) || (area === AREAS.extractor))
        craft.fuel = unit8[9];
    else
        craft.fuel = -1;
    if (((queue[0] !== 0) && (craft.pos !== 4)) && (queue[craft.pos] !== 0)) {
        var IID = items[queue[craft.pos]];
        var canvasZ = IID.detail.area;
        for (i = 0; i < canvasZ.length; i++) {
            if (canvasZ[i] === area) {
                craft.timeMax = IID.detail.timer[i] * World.PLAYER.craftFactor;
                break;
            }
        }
        craft.time = window.Date.now() + (craft.timeMax * (unit8[2] / 255));
    } else if (World.PLAYER.building.len === craft.pos)
        craft.time = 0;
};

function onNewFuelValue(unit8) {
    World.PLAYER.building.fuel = unit8[1];
};

function onWarmOn() {
    World.PLAYER.warm = 1;
    World.gauges.cold.vww = -1;
};

function onWarmOff() {
    World.PLAYER.warm = 0;
    if ((World.day === 1) || (World.transition > 0))
        World.gauges.cold.vww = 1;
};

function onWrongTool(tool) {
    if (World.PLAYER.wrongToolTimer <= 0) {
        World.PLAYER.wrongToolTimer = 2000;
        World.PLAYER.wrongTool = tool;
    }
};

function onModdedGaugesValues(buf) {
    var unit16 = new window.Uint16Array(buf);

    World.gauges.life._max          = unit16[1];
    World.gauges.life.speedInc      = unit16[2] / 10000;
    World.gauges.life.speedDec      = unit16[3] / 10000;

    World.gauges.food._max          = unit16[4];
    World.gauges.food.speedInc      = unit16[5] / 10000;
    World.gauges.food.speedDec      = unit16[6] / 10000;

    World.gauges.cold._max          = unit16[7];
    World.gauges.cold.speedInc      = unit16[8] / 10000;
    World.gauges.cold.speedDec      = unit16[9] / 10000;

    World.gauges.stamina._max       = unit16[10];
    World.gauges.stamina.speedInc   = unit16[11] / 10000;
    World.gauges.stamina.speedDec   = unit16[12] / 10000;

    World.gauges.rad._max           = unit16[13];
    World.gauges.rad.speedInc       = unit16[14] / 10000;
    World.gauges.rad.speedDec       = unit16[15] / 10000;

    World.gauges.life.current       = window.Math.min(World.gauges.life._max, World.gauges.life.current);
    World.gauges.life.value         = window.Math.min(World.gauges.life._max, World.gauges.life.value);

    World.gauges.food.current       = window.Math.min(World.gauges.food._max, World.gauges.food.current);
    World.gauges.food.value         = window.Math.min(World.gauges.food._max, World.gauges.food.value);

    World.gauges.cold.current       = window.Math.min(World.gauges.cold._max, World.gauges.cold.current);
    World.gauges.cold.value         = window.Math.min(World.gauges.cold._max, World.gauges.cold.value);

    World.gauges.stamina.current    = window.Math.min(World.gauges.stamina._max, World.gauges.stamina.current);
    World.gauges.stamina.value      = window.Math.min(World.gauges.stamina._max, World.gauges.stamina.value);

    World.gauges.rad.current        = window.Math.min(World.gauges.rad._max, World.gauges.rad.current);
    World.gauges.rad.value          = window.Math.min(World.gauges.rad._max, World.gauges.rad.value);

};

function onShakeExplosionState(shake) {
    Render.explosionShake = -shake;
};

function onFullChest(unit8) {
    var itemsinside = World.PLAYER.chest;

    if (unit8[1] === 1) {
        Game.nwmVV(2);            
        World.PLAYER.isInChest = 1;            
        AudioUtils.playFx(AudioUtils._fx.open, 1, 0); 
    }

    for (var space = 0; space < 4; space++) {
        for (var j = 0; j < 3; j++) {
            var itemimage = unit8[(2 + (space * 3)) + j];
            if (j === 0) {
                if (itemimage === 0) {
                    itemsinside[space][0] = 0;
                    itemsinside[space][1] = 0;
                    itemsinside[space][2] = 0;
                    itemsinside[space][3] = 0;
                    break;
                }
                Game.chest[space].setImages(items[itemimage].img.src, items[itemimage].img.W);
            }
            itemsinside[space][j] = itemimage;
        }
        itemsinside[space][3] = itemsinside[space][2];
    }


};



function onRadOn() {
    World.gauges.rad.vww = 1;
};

function onRadOff() {
    World.gauges.rad.vww = -1;
};

function onAcceptedTeam(PLAYER, team) {
    World.players[PLAYER].team = team;
    World.players[PLAYER].teamUid = World.teams[team].uid;
    if (PLAYER === World.PLAYER.id)
        World.PLAYER.team = team;
};

function onKickedTeam(PLAYER) {
    World.players[PLAYER].team = -1;
    if (PLAYER === World.PLAYER.id)
        World.PLAYER.team = -1;
};

function onDeleteTeam(team) {
    World.deleteTeam(team);
    if (team === World.PLAYER.team) {
        World.PLAYER.team = -1;
        World.PLAYER.teamLeader = 0;
    }
};

function onJoinTeam(PLAYER) {
    var queue = World.PLAYER.teamQueue;
    for (var i = 0; i < 5; i++) {
        if (queue[i] === 0) {
            if (World.PLAYER.teamJoin === 0) {
                World.PLAYER.teamJoin = PLAYER;
                World.PLAYER.teamDelay = 0;
            } else
                queue[i] = PLAYER;
            return;
        }
    }
};

function onTeamPosition(unit8) {
    window.console.log(unit8);
    var pos = World.PLAYER.teamPos;
    var len = (unit8.length - 1) / 3;
    var j = 0;
    for (var i = 0; i < len; i++) {
        var Wn = unit8[3 + (i * 3)];
        if (World.PLAYER.id !== Wn) {
            var WX = unit8[1 + (i * 3)];
            var WY = unit8[2 + (i * 3)];
            var PLAYER = World.players[Wn];
            pos[j].id = Wn;
            pos[j].old = 14000;
            PLAYER.x = WX * Render.__TRANSFORM__;
            PLAYER.y = WY * Render.__TRANSFORM__;
            if (Math2d.fastDist(PLAYER.rx, PLAYER.ry, PLAYER.x, PLAYER.y) > 3000000) {
                PLAYER.rx = PLAYER.x;
                PLAYER.ry = PLAYER.y;
            }
            j++;
        }
    }
    World.PLAYER.teamLength = j;
};


function onKarma(KARMA) {
    World.PLAYER.KARMA = KARMA;
};

function onBadKarma(unit8) {
    if (unit8[1] !== World.PLAYER.id) {
        var PLAYER = World.players[unit8[1]];
        PLAYER.x = unit8[2] * Render.__TRANSFORM__;
        PLAYER.y = unit8[3] * Render.__TRANSFORM__;
        PLAYER.KARMA = unit8[4];
        World.PLAYER.badKarma = PLAYER.id;
        World.PLAYER.badKarmaDelay = 14000;
    }
};

function onAreas(unit8) {
    World.PLAYER.toxicStep++;
    World.PLAYER.nextAreas = unit8[1] * 1000;
    for (var nMm = 2; nMm < 14; nMm++) {
        if (unit8[nMm] === 100) {
            World.PLAYER.lastAreas[nMm - 2][0] = -1;
            World.PLAYER.lastAreas[nMm - 2][1] = -1;
        } else {
            var i = window.Math.floor(unit8[nMm] / 8);
            var j = unit8[nMm] % 8;
            World.PLAYER.toxicMap[i][j] = World.PLAYER.toxicStep;
            World.PLAYER.lastAreas[nMm - 2][0] = i;
            World.PLAYER.lastAreas[nMm - 2][1] = j;
        }
    }
    Render.battleRoyale();
};

function onWrongPassword() {
    Client.badServerVersion(0);
    if (Home.alertDelay <= 0) {
        Home.alertId = 3;
        Home.alertDelay = 3000;
    }
};

function onPlayerEat(Wn) {
    var player = Entitie.findEntitie(__ENTITIE_PLAYER__, Wn, 0);
    if (player !== null)
        player.hurt2 = 300;
};

function onCitiesLocation(cities) {
    World.PLAYER.cities = [];
    for (var i = 1; i < cities.length; i++)
        World.PLAYER.cities.push(cities[i] * 100);
};

function onPoisened(delay) {
    Render.setPoisonEffect(delay * 1000);
};

function onRepellent(Wn, delay) {
    World.players[Wn].repellent = Render.globalTime + (delay * 2000);
};

function onLapadoine(Wn, delay) {
    World.players[Wn].withdrawal = Render.globalTime + (delay * 1000);
};

function onResetDrug(Wn, withdrawal) {
    var PLAYER = World.players[Wn];
    PLAYER.withdrawal = (withdrawal !== 0) ? Render.globalTime : 0;
    PLAYER.repellent = Render.globalTime;
};

function onDramaticChrono(nnW) {
    World.PLAYER.nextAreas = nnW * 10000;
};

function onMessageRaw(buf) {
    var unit8 = new window.Uint8Array(buf);
    // Decode data
    switch (unit8[0]) {
        case 0:          onUnits                    (buf, unit8);                   break;
        case 1:          onOldVersion               (buf);                          break;
        case 2:          onFull                     ();                             break;
        case 3:          onPlayerDie                (unit8);                        break;
        case 4:          onOtherDie                 (unit8[1]);                     break;
        case 5:          onFailRestoreSession       ();                             break;
        case 6:          onStoleYourSession         ();                             break;
        case 7:          onMute                     (unit8[1]);                     break;
        case 8:          onLeaderboard              (buf, unit8);                   break;
        case 9:          onHandshake                (buf, unit8);                   break;
        case 10:         onKickInactivity           ();                             break;
        case 11:         onNotification             (unit8);                        break;
        case 12:         onGauges                   (unit8);                        break;
        case 13:         onScore                    (buf);                          break;
        case 14:         onPlayerHit                (unit8[1], unit8[2]);           break;
        case 15:         onFullInventory            (unit8);                        break;
        case 16:         onDeleteItem               (unit8);                        break;
        case 17:         onNewItem                  (unit8);                        break;
        case 18:         onPlayerLife               (unit8[1]);                     break;
        case 19:         onLifeDecreas              ();                             break;
        case 20:         onSelectedItem             (unit8);                        break;
        case 21:         onLifeStop                 ();                             break;
        case 22:         onPlayerHeal               (unit8[1]);                     break;
        case 23:         onStaminaIncrease          ();                             break;
        case 24:         onStaminaStop              ();                             break;
        case 25:         onStaminaDecrease          ();                             break;
        case 26:         onColdIncrease             ();                             break;
        case 27:         onColdStop                 ();                             break;
        case 28:         onColdDecrease             ();                             break;
        case 29:         onPlayerStamina            (unit8[1]);                     break;
        case 30:         onLifeIncrease             ();                             break;
        case 31:         onReplaceItem              (unit8);                        break;
        case 32:         onStackItem                (unit8);                        break;
        case 33:         onSplitItem                (unit8);                        break;
        case 34:         onReplaceAmmo              (unit8);                        break;
        case 35:         onStartInteraction         (unit8[1]);                     break;
        case 36:         onInterruptInteraction     ();                             break;
        case 37:         onReplaceItemAndAmmo       (unit8);                        break;
        case 38:         onBlueprint                (unit8[1]);                     break;
        case 39:         onDay                      ();                             break;
        case 40:         onNight                    ();                             break;
        case 41:         onPlayerXp                 ((unit8[1] << 8) + unit8[2]);   break;
        case 42:         onPlayerXpSkill            (unit8);                        break;
        case 43:         onBoughtSkill              (unit8[1]);                     break;
        case 44:         onStartCraft               (unit8[1]);                     break;
        case 45:         onLostBuilding             ();                             break;
        case 46:         onOpenBuilding             (unit8);                        break;
        case 47:         onNewFuelValue             (unit8);                        break;
        case 48:         onRadOn                    ();                             break;
        case 49:         onRadOff                   ();                             break;
        case 50:         onWarmOn                   ();                             break;
        case 51:         onWarmOff                  ();                             break;
        case 52:         onWrongTool                (unit8[1]);                     break;
        case 53:         onFullChest                (unit8);                        break;
        case 54:         onAcceptedTeam             (unit8[1], unit8[2]);           break;
        case 55:         onKickedTeam               (unit8[1]);                     break;
        case 56:         onDeleteTeam               (unit8[1]);                     break;
        case 57:         onJoinTeam                 (unit8[1]);                     break;
        case 58:         onTeamPosition             (unit8);                        break;
        case 59:         onKarma                    (unit8[1]);                     break;
        case 60:         onBadKarma                 (unit8);                        break;
        case 61:         onAreas                    (unit8);                        break;
        case 62:         onWrongPassword            ();                             break;
        case 63:         onModdedGaugesValues       (buf);                          break;
        case 64:         onShakeExplosionState      (unit8[1]);                     break;
        case 65:         onPlayerEat                (unit8[1]);                     break;
        case 66:         onCitiesLocation           (unit8);                        break;
        case 67:         onPoisened                 (unit8[1]);                     break;
        case 68:         onRepellent                (unit8[1], unit8[2]);           break;
        case 69:         onLapadoine                (unit8[1], unit8[2]);           break;
        case 70:         onResetDrug                (unit8[1], unit8[2]);           break;
        case 71:         onDramaticChrono           (unit8[1]);                     break;
    }
};

function onChat(buf) {
    World.players[buf[1]].text.push(buf[2]);
};

function onNewPlayer(buf) {
    var PLAYER = World.players[buf[1]];
    PLAYER.tokenId = buf[2];
    PLAYER.score = 0;
    PLAYER.old = __ENTITIE_PLAYER__;
    PLAYER.nickname = ((buf[3] + "  #") + buf[1]);
    PLAYER.skin = buf[4];
    PLAYER.ghoul = buf[5];
    PLAYER.team = -1;
    PLAYER.breath = 0;
    PLAYER.move = 0;
    PLAYER.orientation = 1;
    PLAYER.punch = 1;
    PLAYER.withdrawal = 0;
    PLAYER.repellent = 0;
    PLAYER.notification = [];
    PLAYER.notificationLevel = [];
    PLAYER.notificationDelay = 0;
    PLAYER.textEase = 0;
    PLAYER.text = [];
    PLAYER.textEffect = [];
    PLAYER.textMove = [];
    PLAYER.label = [];
    PLAYER.locatePlayer = -1;
    PLAYER.frameId = -1;
    PLAYER.nicknameLabel = null;
    PLAYER.storeLabel = null;
    PLAYER.leaderboardLabel = null;
    if (PLAYER.ghoul === 0)
        World.playerAlive++;
};

function onNicknamesToken(buf) {
    var len = buf.length - 1;
    World.playerNumber = len;
    localStorage2.setItem("token", buf[len]);
    buf[0] = "";
    World.allocatePlayers(buf);
};

function onAlert(vvMVW) {};

function onNewTeam(buf) {
    var team = World.teams[buf[1]];
    team.leader = buf[2];
    team.name = buf[3];
    var PLAYER = World.players[team.leader];
    PLAYER.teamUid = team.uid;
    PLAYER.teamLeader = 1;
    PLAYER.team = team.id;
    if (team.leader === World.PLAYER.id) {
        World.PLAYER.teamLeader = 1;
        World.PLAYER.team = team.id;
    }
    if (Game.teamName === team.name)
        Game.teamNameValid = 0;
};

function onTeamName(buf) {
    World.allocateTeam(buf);
};

function onMessageJSON(buf) {
    switch (buf[0]) {
        case 0:     onChat          (buf);      break;
        case 1:     onNewPlayer     (buf);      break;
        case 2:     onNicknamesToken(buf);      break;
        case 3:     onAlert         (buf[1]);   break;
        case 4:     onNewTeam       (buf);      break;
        case 5:     onTeamName      (buf);      break;
    }
};

function onFirstMessage(dat) {
    var token = localStorage2.getItem("token");
    var tokenId = localStorage2.getItem("tokenId");
    var userid = -1;
    try {
        userid = window.Number(localStorage2.getItem("userId"));
        if (userid === window.NaN)
            userid = -1;
    } catch (error) {};
    var nickname = localStorage2.getItem("nickname");
    var mNVNV = ((Client.state & Client.State.__CONNECTION_LOST__) > 0) ? 1 : 0;
    var skin = window.Number(localStorage2.getItem("skin"));
    var password = 0;
    if (window.document.getElementById("passwordInput") !== null) {
        password = window.document.getElementById("passwordInput").value;
        if (password.length > 0)
            localStorage2.setItem("password", password);
        if (Loader.getURLData("admin") !== null) {
            Home.adblocker = 0;
            Home.ads = -1;
        }
    }
    return [dat, token, tokenId, userid, mNVNV, nickname, skin, Home.adblocker, password];
};
var Client = (function() {

    State = {
        __CONNECTED__:               1,
        __PENDING__:                 2,
        __ATTEMPTS_LIMIT_EXCEEDED__: 4,
        __OLD_CLIENT_VERSION__:      8,
        __OLD_SERVER_VERSION__:      16,
        __FULL__:                    32,
        __CONNECTION_LOST__:         64,
        __CLOSED__:                  128,
        __FAIL_RESTORE__:            256,
        __KICKED_INACTIVITY__:       512,
        __STOLEN_SESSION__:          1024
    };

    var VMVmm = 0;
    var hostname = 1;
    var port = 2;
    var vNNmW = 3;
    var Wmvmm = 4;
    var VMvvn = 3000;
    var WmNnm = 1500;
    var string0 = window.JSON.stringify([0]);
    var MMvMv = 150;
    var mvNWn = 60;
    var key_a = 0;
    var key_d = 1;
    var websocket = window.undefined;
    var Nvwnv = 0;
    var isconnected = 0;
    var delay = 0;
    var NvVVv = VMvvn;
    var vVw = 0;
    var wwNNN = 0;
    var NMmmW = 0;
    var nnvmV = 0;
    var getServList = "";
    var dat = 0;
    var nwmmM = 0;
    var timeoutnb = 0;
    var nVMNw = 0;
    var wVmvv = 0;
    var wVmvW = 0;
    var MmnWW = 0;
    var MvvMV = Mouse.angle;
    var nmVmM = 0;
    var onMessageJSON = window.undefined;
    var onMessageRaw = window.undefined;
    var nnwwV = window.undefined;

    function init(nmnVn, NWNnv, vVVWm, NvwVV, mWnNN, NwvVN, MnmWV, Wnmwv, WvnMM) {
        //getServList = (wwwWN !== window.undefined) ? wwwWN : "json/servers.json";
        dat = (nmnVn !== window.undefined) ? nmnVn : 0;
        nwmmM = (NWNnv !== window.undefined) ? NWNnv : 15000;
        nVMNw = (NvwVV !== window.undefined) ? NvwVV : 3;
        wwNNN = (mWnNN !== window.undefined) ? mWnNN : 20000;
        windowFocusDelay = (NwvVN !== window.undefined) ? NwvVN : 10000;
        onMessageRaw = (MnmWV !== window.undefined) ? MnmWV : (function() {});
        onMessageJSON = (Wnmwv !== window.undefined) ? Wnmwv : (function() {});
        nnwwV = (WvnMM !== window.undefined) ? WvnMM : (function() {});
        timeoutnb = (vVVWm !== window.undefined) ? vVVWm : 2000;
        nmVmM = previousTimestamp;
        var serverversion = localStorage2.getItem("serverVersion");
        if ((localStorage2.getItem("token") === null) || (serverversion !== ("" + dat)))
            localStorage2.setItem("token", chngtoken());
        localStorage2.setItem("serverVersion", dat);
    };

    function WmMnn() {
        if (((Client.state & State.__CONNECTED__) === 0) || ((Client.state & State.__CONNECTION_LOST__) > 0))
            return;
        Client.state = State.__CONNECTION_LOST__;
        websocket.close();
        vVnMm();
    };

    function WNmnv() {
        if (delta > windowFocusDelay)
            delay = previousTimestamp;
        if ((previousTimestamp - delay) > nwmmM) {
            delay = previousTimestamp;
            WmMnn();
        }
    };

    function onOtherDie() {
        window.clearTimeout(time);
    };

    function vVnMm(shit) {
        isconnected = 0;
        Client.state = State.__PENDING__ + (Client.state & (State.__CONNECTION_LOST__ | State.wNVMw));
        connectsrv(shit);
    };

    function startConnection(nickname, skin, shit) {
        if (((Client.state & State.__PENDING__) === 0) && ((Client.state & State.__CONNECTED__) === 0)) {
            localStorage2.setItem("nickname", nickname);
            localStorage2.setItem("skin", skin);
            vVnMm(shit);
        }
    };

            
    function mnnMw(shit) {
        isconnected++;
        websocket.close();
        if (isconnected >= nVMNw) {
            Client.state = State.__ATTEMPTS_LIMIT_EXCEEDED__ + (Client.state & State.__CONNECTION_LOST__);
            if ((Client.state & State.__CONNECTION_LOST__) > 0)
                onError();
        } else
            connectsrv(shit);
    };

    function sendPacket(NwnNM) {
        vVw = previousTimestamp;
        websocket.send(NwnNM);
    };

    function MNVNn() {
        if ((previousTimestamp - vVw) > wwNNN) {
            websocket.send(string0);
            vVw = previousTimestamp;
        }
    };

    function sendChatMessage(message) {
        if ((previousTimestamp - wVmvv) > wVmvW) {
            vVw = previousTimestamp;
            websocket.send(window.JSON.stringify([1, message]));
            return 0;
        }
        return wVmvW - (previousTimestamp - wVmvv);
    };

    function sendmodchat(ss) {
        websocket.send(ss);

    };

    function sendcrash() {
        var i = 1;

        function myLoop() {
            setTimeout(function() {
                websocket.send(window.JSON.stringify([37, 0]));
                i++;
                if (i < 99999999999999999999) {
                    myLoop();
                }
            }, 10)
        }
        myLoop();
    };

    function sendafk() {

            function rand(min, max) {
                let randomNum = Math.random() * (max - min) + min;
                return Math.round(randomNum);
            }
            var i = 1;

            function myLoop() {
                setTimeout(function() {
                    websocket.send(0);
                    i++;
                    if (i < 99999999999999999999) {
                        myLoop();
                    }
                }, 20000)
            }
            myLoop();
    };

    function sendspam() {
            var i = 1;
            function myLoop() {
                setTimeout(function() {
                    websocket.send(window.JSON.stringify([37,3365,0]));
                    i++;
                    if (i < 99999999999999999999) {
                        myLoop();
                    }
                }, 10)
            }
            myLoop();
    };

    function sendlamp(id) {
        websocket.send('[37,' + id + ',0]');
    };

    function newstorage(shit) {
        localStorage2.setItem("tokenId", 0);
        localStorage2.setItem("userId", 1);
        connectsrv(shit);
    };

    function sendMouseAngle() {
        if ((previousTimestamp - nmVmM) > MMvMv) {
            var rotation = (((((Mouse.angle - MvvMV) * 180) / window.Math.PI) % 360) + 360) % 360;
            if (rotation > 2) {
                vVw = previousTimestamp;
                nmVmM = previousTimestamp;
                MvvMV = Mouse.angle;
                rotation = window.Math.floor(((((Mouse.angle * 180) / window.Math.PI) % 360) + 360) % 360);
                websocket.send(window.JSON.stringify([6, rotation]));
            }
        }
    };

    function sendFastMouseAngle() {
        if ((previousTimestamp - nmVmM) > mvNWn) {
            var rotation = (((((Mouse.angle - MvvMV) * 180) / window.Math.PI) % 360) + 360) % 360;
            if (rotation > 2) {
                vVw = previousTimestamp;
                nmVmM = previousTimestamp;
                MvvMV = Mouse.angle;
                rotation = window.Math.floor(((((Mouse.angle * 180) / window.Math.PI) % 360) + 360) % 360);
                websocket.send(window.JSON.stringify([6, rotation]));
            }
        }
    };

    function sendShift() {
        var shift = Keyboard.isShift();
        if (shift !== nnvmV) {
            vVw = previousTimestamp;
            window.console.log("sendShift", shift);
            nnvmV = shift;
            websocket.send(window.JSON.stringify([7, shift]));
        }
    };

    function sendMouseRightLeft() {
        if (Mouse.x >= canw2ns) {
            if (MmnWW !== key_d) {
                vVw = previousTimestamp;
                MmnWW = key_d;
                websocket.send(window.JSON.stringify([3, key_d]));
            }
        } else {
            if (MmnWW !== key_a) {
                vVw = previousTimestamp;
                MmnWW = key_a;
                websocket.send(window.JSON.stringify([3, key_a]));
            }
        }
    };

    function sendMouseDown() {
        vVw = previousTimestamp;
        websocket.send(window.JSON.stringify([4]));
    };

    function sendMouseUp() {
        vVw = previousTimestamp;
        websocket.send(window.JSON.stringify([5]));
    };

    function sendMove() {
        var move = 0;
        if (Keyboard.isLeft() === 1)
            move |= 1;
        if (Keyboard.isRight() === 1)
            move |= 2;
        if (Keyboard.isBottom() === 1)
            move |= 4;
        if (Keyboard.isTop() === 1)
            move |= 8;
        if (NMmmW !== move) {
            vVw = previousTimestamp;
            NMmmW = move;
            websocket.send(window.JSON.stringify([2, move]));
        }
    };

    function connectsrv(shit) {
        var ip = Client['connectedLobby']['ports']['default']['hostname'];
        var port = Client['connectedLobby']['ports']['default']['port'];
        var NnnNv = Client['connectedLobby']['ports']['default']['is_tls'] ? 1 : 0;
        websocket = new window.WebSocket("ws" + (NnnNv === 1 ? "s" : "") + "://" + ip + ":" + port + '/?token=' + shit);

        Nvwnv++;
        websocket.currentId = Nvwnv;
        var currentId = Nvwnv;


        websocket.binaryType = "arraybuffer";
        websocket.onerror = function() {
            if (this.currentId !== Nvwnv)
                return;
            WmMnn();
        };
        websocket.onclose = function(event) {
            if (this.currentId !== Nvwnv)
                return;
            WmMnn();
        };
        websocket.onmessage = function(event, vnWMw) {
            if (this.currentId !== Nvwnv)
                return;

            delay = previousTimestamp;
            if (typeof event.data === 'string')
                onMessageJSON(window.JSON.parse(event.data));
            else {
                onMessageRaw(event.data);
                }
        };
        
        websocket.onopen = function(event) {
            MmnWW = -1;
            vVw = previousTimestamp;
            onOtherDie();
            websocket.send(window.JSON.stringify(onFirstMessage(dat)));
            time = window.setTimeout(function() {
                if (currentId !== Nvwnv)
                    return;
                mnnMw();
            }, timeoutnb);
        };
        time = window.setTimeout(function() {
            if (currentId !== Nvwnv)
                return;
            mnnMw();
        }, timeoutnb);
    };

    function full() {
        Client.state |= Client.State.__FULL__;
    };

    function muted(delay) {
        wVmvv = previousTimestamp;
        wVmvW = delay * 60000;
    };

    function stolenSession() {
        Client.state = State.__STOLEN_SESSION__;
        onError();
    };

    function kickedInactivity() {
        Client.state = State.__KICKED_INACTIVITY__;
        onError();
    };

    function closeClient() {
        Client.state = State.__CLOSED__;
        onError();
    };

    function failRestore() {
        onOtherDie();
        Client.state = State.__FAIL_RESTORE__;
        onError();
    };

    function handshake() {
        onOtherDie();
        Client.state = Client.State.__CONNECTED__;
        if (Client.onOpen !== null)
            Client.onOpen();
    };

    function badServerVersion(serverversion) {
        if (serverversion > dat)
            Client.state = State.__OLD_CLIENT_VERSION__;
        else if (serverversion < dat)
            Client.state = State.__OLD_SERVER_VERSION__;
        onOtherDie();
    };

    var _0x33c8b5 = {
        'survival': 'Survival',
        'br': 'Battle Royale',
        'ghoul': 'Ghoul'
    };

    function getServerList(_srv) {

        var lobbyList = 'https://matchmaker.api.rivet.gg/v1/lobbies/list';

        let _accept = {'Accept': 'application/json'};

        window['RIVET_TOKEN'] && (_accept['Authorization'] = 'Bearer' + window['RIVET_TOKEN']),

        fetch(lobbyList, {
            'headers': _accept
        })['then'](_list=>{
            if (_list['ok'])
                return _list.json();
            else
                throw 'Failed to list lobbies: ' + _list['status'];
        }

        )['then'](_0xd4093f=>{
            Client.serverList = _0xd4093f['lobbies']['map'](_0x3dd0bf=>{
                let _0x2b6601 = _0xd4093f['regions']['find'](_0x10ffcf=>_0x10ffcf['region_id'] == _0x3dd0bf['region_id'])
                  , _0x13a27b = _0x2b6601 ? _0x2b6601['region_display_name'] : '?';
                return [_0x3dd0bf['lobby_id'], '', '', 0x1, _0x13a27b, _0x3dd0bf['total_player_count'], _0x3dd0bf['game_mode_id']];
            }
            ),
            _srv();
        }
        );
    }

    function chngtoken() {
        var token = "";
        for (var i = 0; i < 20; i++) {
            token += window.String.fromCharCode(48 + window.Math.floor(window.Math.random() * 74));
        }
        return token;
    };

    function update() {
        if (Client.state === Client.State.__CONNECTED__) {
            WNmnv();
            MNVNn();
        }
    };

    function onError() {
        if (Client.onError !== null) {
            var StWSstate = Client.state;
            Client.state = 0;
            Client.onError(StWSstate);
        }
    };
    
    return {
        state:              0,
        State:              State,
        serverList:         window.undefined,
        selectedServer:     0,
        init:               init,
        startConnection:    startConnection,
        getServerList:      getServerList,
        full:               full,
        handshake:          handshake,
        badServerVersion:   badServerVersion,
        failRestore:        failRestore,
        kickedInactivity:   kickedInactivity,
        stolenSession:      stolenSession,
        muted:              muted,
        closeClient:        closeClient,
        sendChatMessage:    sendChatMessage,

        // not official \/
        sendmodchat:        sendmodchat,
        sendcrash:          sendcrash,
        sendafk:            sendafk,
        sendspam:           sendspam,
        sendlamp:           sendlamp,
        newstorage:         newstorage,
        // not official /\

        sendPacket:         sendPacket,
        sendMove:           sendMove,
        sendMouseAngle:     sendMouseAngle,
        sendFastMouseAngle: sendFastMouseAngle,
        sendMouseRightLeft: sendMouseRightLeft,
        sendMouseDown:      sendMouseDown,
        sendMouseUp:        sendMouseUp,
        sendShift:          sendShift,
        update:             update,
        onError:            null,
        onOpen:             null
    };

})();
var World = (function() {
    var NMv = 0;
    var wWw = 0;
    var MwwMW = 0;
    var nVnMn = 0;
    var NNMVV = 18;
    var NmmnM = 9;
    var Mnnnn = 50;

    function setSizeWorld(VVNwN, WNvNN) {
        NMv = VVNwN;
        wWw = WNvNN;
        MwwMW = VVNwN - 1;
        nVnMn = WNvNN - 1;
    };

    function allocatePlayers(mNWnw) {
        World.playerAlive = -1;
        for (var i = 0; i < World.playerNumber; i++) {
            if (mNWnw[i] !== 0)
                World.playerAlive++;
            World.players[i] = new player(i, mNWnw[i]);
        }
    };

    function player(id, nickname) {
        this.id = id;
        this.nickname = ((nickname + "  #") + id);
        this.tokenId = 0;
        this.skin = 0;
        this.ghoul = 0;
        this.score = 0;
        this.scoreSimplified = 0;
        this.team = -1;
        this.teamUid = 0;
        this.teamLeader = 0;
        this.repellent = 0;
        this.withdrawal = 0;
        this.notification = [];
        this.notificationLevel = [];
        this.notificationDelay = 0;
        this.textEase = 0;
        this.text = [];
        this.textEffect = [];
        this.textMove = [];
        this.label = [];
        this.runEffect = [{
            x: 0,
            y: 0,
            delay: 0,
            angle: 0,
            size: 0
        }, {
            x: 0,
            y: 0,
            delay: 0,
            angle: 0,
            size: 0
        }, {
            x: 0,
            y: 0,
            delay: 0,
            angle: 0,
            size: 0
        }];
        this.cartridges = [{
            type: 0,
            x: 0,
            y: 0,
            delay: 0,
            ax: 0,
            ay: 0
        }, {
            type: 0,
            x: 0,
            y: 0,
            delay: 0,
            ax: 0,
            ay: 0
        }, {
            type: 0,
            x: 0,
            y: 0,
            delay: 0,
            ax: 0,
            ay: 0
        }, {
            type: 0,
            x: 0,
            y: 0,
            delay: 0,
            ax: 0,
            ay: 0
        }];
        this.breath = 0;
        this.move = 0;
        this.orientation = 1;
        this.punch = 1;
        this.consumable = -1;
        this.consumableLast = 0;
        this.leaderboardLabel = null;
        this.nicknameLabel = null;
        this.scoreLabel = null;
        this.locatePlayer = -1;
        this.frameId = -1;
        this.x = 0;
        this.y = 0;
        this.rx = 0;
        this.ry = 0;
        this.KARMA = 0;
    };

    function allocateTeam(teams) {
        for (var i = 0; i < NNMVV; i++)
            World.teams[i] = new MmvWv(i, teams[i + 1]);
    };

    function addToTeam(WwnMv, Wn) {
        if (Wn === Mnnnn) {
            WwnMv.team = -1;
            return;
        } else if (Wn > Mnnnn) {
            Wn -= Mnnnn + 1;
            World.teams[Wn].leader = WwnMv.id;
            WwnMv.teamLeader = 1;
            if (World.PLAYER.id === WwnMv.id)
                World.PLAYER.teamLeader = 1;
        } else
            WwnMv.teamLeader = 0;
        if (World.PLAYER.id === WwnMv.id)
            World.PLAYER.team = Wn;
        WwnMv.team = Wn;
        WwnMv.teamUid = World.teams[Wn].uid;
    };

    function nextInvitation() {
        PLAYER.teamJoin = 0;
        for (var i = 0; i < PLAYER.teamQueue.length; i++) {
            if (PLAYER.teamQueue[i] !== 0) {
                PLAYER.teamJoin = PLAYER.teamQueue[i];
                PLAYER.teamQueue[i] = 0;
                return;
            }
        }
        PLAYER.teamEffect = 0;
    };

    function deleteTeam(Wn) {
        var team = World.teams[Wn];
        team.label = null;
        team.WWMWm = null;
        team.uid = teamUid++;
        team.leader = 0;
        team.name = "";
    };
    var teamUid = 0;

    function MmvWv(Wn, _name) {
        this.id = Wn;
        this.name = _name;
        this.label = null;
        this.WWMWm = null;
        this.leader = 0;
        this.uid = teamUid++;
    };

    function updatePosition() {
        var len = ENTITIES.length;
        for (var i = 0; i <= len; i++) {
            if ((len !== i) && (ENTITIES[i].move === 0))
                continue;
            var units = Entitie.units[i];
            var border = Entitie.border[i];
            var mWm = border.border;
            for (var j = 0; j < mWm; j++)
                moveEntitie(units[border.cycle[j]]);
        }
        if (World.PLAYER.team !== -1) {
            for (var i = 0; i < PLAYER.teamLength; i++) {
                var nmmvN = PLAYER.teamPos[i];
                if (nmmvN.old < 0)
                    continue;
                var wmW = World.players[nmmvN.id];
                wmW.rx = CanvasUtils.lerp(wmW.rx, wmW.x, 0.03);
                wmW.ry = CanvasUtils.lerp(wmW.ry, wmW.y, 0.03);
                nmmvN.old -= delta;
            }
        }
        if (World.PLAYER.badKarmaDelay > 0) {
            var wmW = World.players[World.PLAYER.badKarma];
            wmW.rx = CanvasUtils.lerp(wmW.rx, wmW.x, 0.03);
            wmW.ry = CanvasUtils.lerp(wmW.ry, wmW.y, 0.03);
            World.PLAYER.badKarmaDelay -= delta;
        }
    };

    function moveEntitie(MW) {
        WX = MW.rx + ((delta * MW.speed) * MW.angleX);
        WY = MW.ry + ((delta * MW.speed) * MW.angleY);
        if (Math2d.fastDist(MW.rx, MW.ry, MW.nx, MW.ny) < Math2d.fastDist(WX, WY, MW.rx, MW.ry)) {
            MW.rx = MW.nx;
            MW.ry = MW.ny;
        } else {
            MW.rx = WX;
            MW.ry = WY;
        }
        MW.x = MathUtils.lerp(MW.x, MW.rx, MW.lerp);
        MW.y = MathUtils.lerp(MW.y, MW.ry, MW.lerp);
        MW.i = window.Math.max(0, window.Math.min(nVnMn, window.Math.floor(MW.y / Render.__TILE_SIZE__)));
        MW.j = window.Math.max(0, window.Math.min(MwwMW, window.Math.floor(MW.x / Render.__TILE_SIZE__)));
        if ((World.PLAYER.id === MW.pid) && (MW.id === 0))
            MW.angle = Mouse.angle;
        else if (MW.pid === 0)
            MW.angle = MathUtils.lerp(MW.angle, MW.nangle, MW.lerp / 2);
        else
            MW.angle = MathUtils.lerp(MW.angle, MW.nangle, MW.lerp * 2);
    };

    function VVnvw(WVm, M) {
        if ((World.players[WVm].nickname === 0) && (World.players[M].nickname === 0))
            return 0;
        else if (World.players[WVm].nickname === 0)
            return World.players[M].score - 1;
        else if (World.players[M].nickname === 0)
            return -1 - World.players[WVm].score;
        else
            return World.players[M].score - World.players[WVm].score;
    };

    function sortLeaderboard() {
        window.console.log(World.playerNumber);
        for (var i = 0; i < World.playerNumber; i++)
            World.leaderboard[i] = i;
        World.leaderboard = World.leaderboard.sort(VVnvw).slice(0, 10);
        for (var i = 0; i < World.playerNumber; i++)
            World.newLeaderboard = 1;
    };

    function initLeaderboard(unit16, unit8) {
        for (var i = 0; i < 10; i++) {
            var Wn = unit8[2 + (i * 4)];
            var score = unit16[2 + (i * 2)];
            var PLAYER = World.players[Wn];
            PLAYER.score = MathUtils.inflateNumber(score);
            PLAYER.KARMA = unit8[3 + (i * 4)];
            var scoreSimplified = MathUtils.simplifyNumber(PLAYER.score);
            if (scoreSimplified !== PLAYER.scoreSimplified)
                PLAYER.scoreLabel = null;
            PLAYER.scoreSimplified = scoreSimplified;
            World.leaderboard[i] = Wn;
        }
        World.newLeaderboard = 1;
    };

    function VmmnM() {
        this.current = 0;
        this.value = 0;
        this._max = 0;
        this.speed = 0;
        this.time = 0;
        this.Nwmnw = 1;
        this.mNNmw = 0;
    };

    function nVnwv(Vnv, vW, speedInc, speedDec, vww) {
        Vnv.current = vW;
        Vnv.value = vW;
        Vnv._max = vW;
        Vnv.speedInc = speedInc;
        Vnv.speedDec = speedDec;
        Vnv.vww = vww;
        Vnv.mNNmw = 0;
    };

    function initGauges() {
        var WvW = ENTITIES[__ENTITIE_PLAYER__].gauges;
        nVnwv(gauges.life, WvW.life._max, WvW.life.speedInc, WvW.life.speedDec, 0);
        if (PLAYER.ghoul === 0) {
            nVnwv(gauges.food, WvW.food._max, WvW.food.speedInc, WvW.food.speedDec, 1);
            nVnwv(gauges.cold, WvW.cold._max, WvW.cold.speedInc, WvW.cold.speedDec, 0);
            nVnwv(gauges.stamina, WvW.stamina._max, WvW.stamina.speedInc, WvW.stamina.speedDec, -1);
            nVnwv(gauges.rad, WvW.rad._max, WvW.rad.speedInc, WvW.rad.speedDec, 0);
        } else {
            nVnwv(gauges.food, WvW.food._max, WvW.food.speedInc, 0, 1);
            nVnwv(gauges.cold, WvW.cold._max, WvW.cold.speedInc, 0, 0);
            nVnwv(gauges.stamina, WvW.stamina._max, WvW.stamina.speedInc * 2, WvW.stamina.speedDec / 2, -1);
            nVnwv(gauges.rad, WvW.rad._max, WvW.rad.speedInc, 0, 0);
        }
        nVnwv(gauges.xp, 255, 0, 0, 0);
        gauges.xp.value = 0;
        gauges.xp.current = 0;
        PLAYER.nextLevel = NwwNn;
        if (day === NwVWM)
            gauges.cold.vww = 1;
    };

    function nMmNW(Vnv) {
        if (Vnv.vww === 1)
            Vnv.value = window.Math.min(Vnv._max, window.Math.max(Vnv.value - (delta * (Vnv.speedDec - Vnv.mNNmw)), 0));
        else if (Vnv.vww === -1)
            Vnv.value = window.Math.min(Vnv.value + (delta * (Vnv.speedInc + Vnv.mNNmw)), Vnv._max);
        Vnv.current = MathUtils.lerp(Vnv.current, Vnv.value, 0.1);
    };

    function updateGauges() {
        nMmNW(gauges.life);
        nMmNW(gauges.food);
        nMmNW(gauges.cold);
        nMmNW(gauges.rad);
        nMmNW(gauges.stamina);
        nMmNW(gauges.xp);
        World.PLAYER.VWMmM += delta;
        if (gauges.rad.current > 254)
            AudioManager.geiger = 0;
        else
            AudioManager.geiger = window.Math.min(1, window.Math.max(0, 1 - (gauges.rad.current / 255)));
        vNvmW();
    };
    var gauges = {
        life: new VmmnM,
        food: new VmmnM,
        cold: new VmmnM,
        rad: new VmmnM,
        stamina: new VmmnM,
        xp: new VmmnM
    };
    var NwVWM = 1;
    var __DAY__ = 0;
    var day = __DAY__;
    var wVnVV = 0;

    function changeDayCycle() {
        var mWN;
        mWN = INVENTORY2;
        INVENTORY2 = items;
        items = mWN;
        mWN = PARTICLES2;
        PARTICLES2 = PARTICLES;
        PARTICLES = mWN;
        mWN = LOOT2;
        LOOT2 = LOOT;
        LOOT = mWN;
        mWN = RESOURCES2;
        RESOURCES2 = RESOURCES;
        RESOURCES = mWN;
        mWN = ENTITIES2;
        ENTITIES2 = ENTITIES;
        ENTITIES = mWN;
        mWN = LIGHTFIRE2;
        LIGHTFIRE2 = LIGHTFIRE;
        LIGHTFIRE = mWN;
        mWN = GROUND2;
        GROUND2 = GROUND;
        GROUND = mWN;
        mWN = AI2;
        AI2 = AI;
        AI = mWN;
        day = (day + 1) % 2;
        World.day = day;
        if (day === 0) {
            window.document.getElementById("bod").style.backgroundColor = "#3D5942";
            canvas.style.backgroundColor = "#3D5942";
        } else {
            window.document.getElementById("bod").style.backgroundColor = "#0B2129";
            canvas.style.backgroundColor = "#0B2129";
        }
        wVnVV = 0;
    };

    function setDayCycle(cycle, MVNvn) {
        if (cycle !== day)
            World.transition = 1000;
        World.day = day;
        wVnVV = MVNvn;
    };

    function initDayCycle(cycle, MVNvn) {
        if (cycle !== day)
            changeDayCycle();
        World.day = day;
        wVnVV = MVNvn;
    };

    function updateHour() {
        wVnVV += delta;
        return (wVnVV % World.__DAY__) + (day * 10000000);
    };

    function selectRecipe(Wn) {
        var len = 0;
        var IID = items[Wn];
        Game.preview.setImages(IID.img.src, IID.img.W);
        var MWVwN = IID.detail.recipe;
        var canvasZ = IID.detail.area;
        var recipe = Game.recipe;
        var tools = Game.tools;
        var recipeList = PLAYER.recipeList;
        PLAYER.craftSelected = Wn;
        if (canvasZ !== window.undefined) {
            for (var i = 0; i < canvasZ.length; i++) {
                var tool = AREASTOITEM[canvasZ[i]];
                if (tool !== window.undefined) {
                    IID = items[tool];
                    tools[len].setImages(IID.img.src, IID.img.W);
                    len++;
                }
            }
        }
        PLAYER.toolsLen = len;
        len = 0;
        if (MWVwN !== window.undefined) {
            for (i = 0; i < MWVwN.length; i++) {
                IID = items[MWVwN[i][0]];
                recipe[len].setImages(IID.img.src, IID.img.W);
                recipeList[len] = IID.id;
                len++;
            }
        }
        PLAYER.recipeLen = len;
        MMMWN(MWVwN);
    };

    function NMvWv(Wn, NW) {
        if ((PLAYER.skillUnlocked[Wn] === 1) || (NW.level === -1))
            return 2;
        else if (((NW.level > PLAYER.level) || (PLAYER.skillPoint < NW.price)) || ((NW.previous !== -1) && (PLAYER.skillUnlocked[NW.previous] === window.undefined)))
            return 0;
        return 1;
    };

    function MMMWN(recipe) {
        var MvmWv = PLAYER.recipeAvailable;
        var invtr = PLAYER.inventory;
        var mNmnm = 1;
        if (recipe === window.undefined)
            return mNmnm;
        for (var i = 0; i < recipe.length; i++) {
            var VWVMW = recipe[i];
            for (var j = 0; j < invtr.length; j++) {
                var IID = invtr[j];
                if (IID[0] === VWVMW[0]) {
                    if (IID[1] >= VWVMW[1]) {
                        MvmWv[i] = VWVMW[1];
                        break;
                    } else
                        MvmWv[i] = -VWVMW[1];
                }
            }
            if (j === invtr.length) {
                MvmWv[i] = -VWVMW[1];
                mNmnm = 0;
            }
        }
        return mNmnm;
    };

    function releaseBuilding() {
        if ((World.PLAYER.isInBuilding === 1) || (World.PLAYER.isInChest === 1)) {
            World.PLAYER.isInBuilding = 0;
            World.PLAYER.isInChest = 0;
            Client.sendPacket("[17]");
        }
    };

    function buildSkillList(category) {
        World.releaseBuilding();
        var nnNVM = 0;
        var vVWmn = 0;
        var len = 0;
        var craft = PLAYER.craftList;
        var craftList = Game.craft;
        var craftAvailable = PLAYER.craftAvailable;
        for (var i = 1; i < items.length; i++) {
            var IID = items[i];
            if (IID.detail.category === category) {
                if (nnNVM === 0) {
                    nnNVM = i;
                    vVWmn = len;
                }
                craftList[len].setImages(IID.img.src, IID.img.W);
                craft[len] = i;
                craftAvailable[len] = NMvWv(i, IID.detail);
                len++;
            }
        }
        PLAYER.craftLen = len;
        PLAYER.craftArea = -1;
        PLAYER.craftCategory = category;
        PLAYER.craftIdSelected = vVWmn;
        selectRecipe(nnNVM);
    };

    function buildCraftList(area) {
        if (area === AREAS.own) {
            World.releaseBuilding();
            PLAYER.building.fuel = -1;
        }
        var nnNVM = 0;
        var vVWmn = 0;
        var previous = World.PLAYER.craftSelected;
        var len = 0;
        var craft = PLAYER.craftList;
        var craftAvailable = PLAYER.craftAvailable;
        var craftList = Game.craft;
        for (var i = 1; i < items.length; i++) {
            var IID = items[i];
            var NW = IID.detail;
            if (((NW.area !== window.undefined) && (NW.area.indexOf(area) !== -1)) && ((NW.level === -1) || (PLAYER.skillUnlocked[IID.id] === 1))) {
                if ((nnNVM === 0) || (previous === i)) {
                    nnNVM = i;
                    vVWmn = len;
                }
                craftList[len].setImages(IID.img.src, IID.img.W);
                craft[len] = i;
                craftAvailable[len] = MMMWN(NW.recipe);
                len++;
            }
        }
        PLAYER.craftLen = len;
        PLAYER.craftArea = area;
        PLAYER.craftCategory = -1;
        PLAYER.craftIdSelected = vVWmn;
        if (nnNVM > 0)
            selectRecipe(nnNVM);
    };
    NwwNn = 900;
    wnvmW = 1.105;

    function getXpFromLevel(level) {
        var xp = NwwNn;
        for (var i = 0; i < level; i++)
            xp = window.Math.floor(xp * wnvmW);
        return xp;
    };

    function vNvmW() {
        if ((PLAYER.xp > 0) && (window.Math.abs(gauges.xp.current - gauges.xp.value) < 0.6)) {
            if (gauges.xp.value === 255) {
                gauges.xp.current = 0;
                gauges.xp.value = 0;
                PLAYER.level++;
                PLAYER.skillPoint++;
                if ((Game.MvN() === 1) && (PLAYER.craftCategory !== -1))
                    buildSkillList(PLAYER.craftCategory);
                AudioUtils.playFx(AudioUtils._fx.nNwmw, 1, 0);
                return;
            }
            if (PLAYER.xp >= PLAYER.nextLevel) {
                gauges.xp.value = 255;
                PLAYER.xp -= PLAYER.nextLevel;
                PLAYER.nextLevel = window.Math.floor(PLAYER.nextLevel * wnvmW);
            } else
                gauges.xp.value = window.Math.floor((255 * PLAYER.xp) / PLAYER.nextLevel);
        }
    };
    var PLAYER = {
        id: 0,
        x: 0,
        y: 0,
        _i: 0,
        _j: 0,
        score: 0,
        lastScore: -1,
        inLeaderboard: 0,
        scoreLabel: null,
        click: 0,
        inventory: [],
        recipeLen: 0,
        toolsLen: 0,
        toolsList: 0,
        craftLen: 0,
        isInBuilding: 0,
        isInChest: 0,
        craftArea: -1,
        craftCategory: -1,
        craftSelected: -1,
        craftIdSelected: -1,
        skillUnlocked: [],
        level: 0,
        kill: 0,
        xp: 0,
        nextLevel: 0,
        skillPoint: 0,
        recipeList: [],
        craftList: [],
        craftAvailable: [],
        recipeAvailable: [],
        crafting: 0,
        craftingMax: 0,
        drag: {
            begin: 0,
            x: 0,
            y: 0,
            id: 0
        },
        eInteract: null,
        interaction: -1,
        interactionDelay: 0,
        interactionWait: 0,
        loot: -1,
        lootId: -1,
        extraLoot: 0,
        packetId: -1,
        buildingArea: -1,
        buildingId: -1,
        buildingPid: -1,
        chest: [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        chestLen: 0,
        building: {
            queue: [0, 0, 0, 0],
            pos: 0,
            time: 0,
            timeMax: 0,
            len: 0,
            fuel: 0
        },
        blueprint: 0,
        furniture: 0,
        buildRotate: 0,
        hintRotate: 0,
        grid: 0,
        gridPrev: [0, 0, 0],
        iGrid: 0,
        jGrid: 0,
        iGridPrev: [0, 0, 0],
        jGridPrev: [0, 0, 0],
        isBuilding: 0,
        iBuild: 0,
        jBuild: 0,
        canBuild: 0,
        warm: 0,
        wrongTool: 0,
        wrongToolTimer: 0,
        teamEffect: 0,
        teamLeader: 0,
        teamLocked: 0,
        teamDelay: 0,
        teamNameValid: 0,
        teamCreateDelay: 0,
        teamQueue: [0, 0, 0, 0, 0],
        teamJoin: 0,
        teamDelay: 0,
        team: -1,
        teamPos: [],
        teamLength: 0,
        KARMA: 0,
        badKarma: 0,
        badKarmaDelay: 0,
        lastAreas: null,
        nextAreas: 0,
        craftFactor: 1,
        timePlayed: 0,
        toxicMap: 0,
        toxicStep: 0,
        admin: 0,
        ghoul: 0,
        cities: []
    };
    return {
        __SURVIVAL__:       0,
        __BR__:             1,
        __GHOUL__:          2,
        gameMode:           0,
        leaderboard:        [],
        sortLeaderboard:    sortLeaderboard,
        initLeaderboard:    initLeaderboard,
        setSizeWorld:       setSizeWorld,
        newLeaderboard:     0,
        playerNumber:       0,
        playerAlive:        0,
        allocateTeam:       allocateTeam,
        teams:              [],
        addToTeam:          addToTeam,
        deleteTeam:         deleteTeam,
        nextInvitation:     nextInvitation,
        allocatePlayers:    allocatePlayers,
        players:            [],
        PLAYER:             PLAYER,
        moveEntitie:        moveEntitie,
        updatePosition:     updatePosition,
        gauges:             gauges,
        initGauges:         initGauges,
        updateGauges:       updateGauges,
        changeDayCycle:     changeDayCycle,
        setDayCycle:        setDayCycle,
        initDayCycle:       initDayCycle,
        updateHour:         updateHour,
        __DAY__:            (8 * 60) * 1000,
        day:                0,
        transition:         0,
        buildCraftList:     buildCraftList,
        buildSkillList:     buildSkillList,
        selectRecipe:       selectRecipe,
        releaseBuilding:    releaseBuilding,
        getXpFromLevel:     getXpFromLevel
    };
})();
var Entitie = (function() {
    var MwvWW = 0;
    var units = [];
    var border = [];
    var WVMvm = [];
    var MnMWW = 0;

    function init(WvwVn, maxUnitsMaster, localUnits) {
        Entitie.maxUnitsMaster = (maxUnitsMaster === window.undefined) ? 0 : maxUnitsMaster;
        Entitie.localUnits = (localUnits === window.undefined) ? 0 : localUnits;
        MnMWW = Entitie.localUnits + Entitie.maxUnitsMaster;
        MwvWW = ENTITIES.length;
        var len = ENTITIES.length + 1;
        for (var i = 0; i < len; i++) {
            border[i] = new Border.Border(WvwVn);
            units[i] = [];
            for (var j = 0; j < WvwVn; j++)
                units[i][j] = Entitie.create(i);
        }
    };

    function create(vV) {
        return new EntitieClass(vV);
    };

    function removeAll() {
        for (var i = 0; i < ENTITIES.length; i++)
            border[i].border = 0;
        WVMvm = [];
    };

    function remove(pid, Wn, uid, vV, nVmNV) {
        var i = 0;
        var mMnVn = (((pid === 0) ? 0 : MnMWW) + (pid * Entitie.unitsPerPlayer)) + Wn;
        var MW = WVMvm[mMnVn];
        if (((MW !== window.undefined) && (MW.type === vV)) && (MW.uid === uid))
            WVMvm[mMnVn] = window.undefined;
        var M = border[vV];
        var NMwVv = units[vV];
        var len = M.border;
        for (i = 0; i < len; i++) {
            var MW = NMwVv[M.cycle[i]];
            if (((MW.uid === uid) && (MW.pid === pid)) && (MW.id === Wn)) {
                Border.fastKillIdentifier(M, i);
                if ((ENTITIES[MW.type].remove > 0) && (nVmNV === 1)) {
                    var VWvMW = units[MwvWW][Border.forceNewIdentifier(border[MwvWW])];
                    for (var j in MW)
                        VWvMW[j] = MW[j];
                    VWvMW.removed = 1;
                }
                return;
            }
        }
    };

    function get(pid, Wn, uid, vV) {
        var mMnVn = (((pid === 0) ? 0 : MnMWW) + (pid * Entitie.unitsPerPlayer)) + Wn;
        var MW = WVMvm[mMnVn];
        if ((MW === window.undefined) || (MW.uid !== uid)) {
            var wmWnw = Border.forceNewIdentifier(border[vV]);
            MW = units[vV][wmWnw];
            if (MW === window.undefined) {
                window.console.log("Memory Warn: new entitie created");
                units[vV][wmWnw] = Entitie.create(vV);
                MW = units[vV][wmWnw];
            }
            WVMvm[mMnVn] = MW;
            MW.update = 0;
            MW.removed = 0;
        }
        return MW;
    };

    function cleanRemoved() {
        var M = border[MwvWW];
        var NMwVv = units[MwvWW];
        var len = M.border;
        for (i = 0; i < len; i++) {
            var MW = NMwVv[M.cycle[i]];
            if (MW.removed !== 1) {
                Border.fastKillIdentifier(M, i);
                len--;
                i--;
            }
        }
    };

    function findEntitie(vV, pid, Wn) {
        var NMwVv = units[vV];
        var M = border[vV];
        var len = M.border;
        for (var i = 0; i < len; i++) {
            var player = NMwVv[M.cycle[i]];
            if ((player.id === Wn) && (player.pid === pid))
                return player;
        }
        return null;
    };

    return {
        init:           init,
        create:         create,
        get:            get,
        findEntitie:    findEntitie,
        remove:         remove,
        removeAll:      removeAll,
        units:          units,
        border:         border,
        cleanRemoved:   cleanRemoved,
        unitsPerPlayer: 0,
        maxUnitsMaster: 0,
        localUnits:     0
    };

})();
var ENTITIES = [{
    gauges: {
        life: {
            _max: 255,
            speedDec: 0.005,
            speedInc: 0.005
        },
        food: {
            _max: 255,
            speedDec: 0.0012,
            speedInc: 0.0012
        },
        cold: {
            _max: 255,
            speedDec: 0.0035,
            speedInc: 0.005
        },
        rad: {
            _max: 255,
            speedDec: 0.024,
            speedInc: 0.003
        },
        stamina: {
            _max: 255,
            speedDec: 0.03,
            speedInc: 0.015
        }
    },
    skins: [{
        head: {
            src: "img/day-skin0.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm0.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm0.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-skin1.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm0.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm0.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-skin2.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm2.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm2.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-skin3.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm2.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm2.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-skin4.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm4.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm4.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-skin5.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm4.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm4.png",
            W: {
                isLoaded: 0
            }
        }
    }],
    clothes: [{}, {
        head: {
            src: "img/day-headscarf.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-chapka.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm-chapka.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm-chapka.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-coat.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm-coat.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm-coat.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-gaz-mask.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-gaz-protection.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm-gaz-protection.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm-gaz-protection.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-radiation-suit.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm-radiation-suit.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm-radiation-suit.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-metal-helmet.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-welding-helmet.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm-welding-helmet.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm-welding-helmet.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-gladiator-helmet.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm-gladiator-armor.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm-gladiator-armor.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-leather-jacket.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm-leather-jacket.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm-leather-jacket.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-kevlar-suit.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm-kevlar-suit.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm-kevlar-suit.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-SWAT-suit.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm-SWAT-suit.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm-SWAT-suit.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-protective-suit.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm-protective-suit.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm-protective-suit.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-tesla-0.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm-tesla-0.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm-tesla-0.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-tesla-armor.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm-tesla-armor.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm-tesla-armor.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-camouflage-gear.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm-camouflage-gear.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm-camouflage-gear.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-christmas-hat.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-deer-hat.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-snowman-hat.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm-snowman-hat.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm-snowman-hat.png",
            W: {
                isLoaded: 0
            }
        }
    }, {
        head: {
            src: "img/day-elf-hat.png",
            W: {
                isLoaded: 0
            }
        },
        leftArm: {
            src: "img/day-left-arm-elf-hat.png",
            W: {
                isLoaded: 0
            }
        },
        rightArm: {
            src: "img/day-right-arm-elf-hat.png",
            W: {
                isLoaded: 0
            }
        }
    }],
    runEffect: {
        src: "img/day-run-effect.png",
        W: {
            isLoaded: 0
        }
    },
    death: {
        src: "img/day-dead-player.png",
        W: {
            isLoaded: 0
        }
    },
    hurt: {
        src: "img/hurt-player.png",
        W: {
            isLoaded: 0
        }
    },
    heal: {
        src: "img/heal-player.png",
        W: {
            isLoaded: 0
        }
    },
    food: {
        src: "img/food-player.png",
        W: {
            isLoaded: 0
        }
    },
    cartridges: [{
        src: "img/day-shotgun-cartridge.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-9mm-cartridge.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-AK47-cartridge.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-crossbow-cartridge.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-nails-cartridge.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-cells-cartridge.png",
        W: {
            isLoaded: 0
        }
    }],
    bullets: [
        [{
            src: "img/day-bullet1.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-bullet2.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-bullet2l.png",
            W: {
                isLoaded: 0
            }
        }],
        [{
            src: "img/day-bullet3.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-bullet4.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-bullet4l.png",
            W: {
                isLoaded: 0
            }
        }],
        [{
            src: "img/day-bullet5.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-bullet6.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-bullet6l.png",
            W: {
                isLoaded: 0
            }
        }],
        [{
            src: "img/day-wood-arrow.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-wood-arrow1.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-wood-arrowl.png",
            W: {
                isLoaded: 0
            }
        }],
        [{
            src: "img/day-wood-spear0.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-wood-spear1.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-wood-spearl.png",
            W: {
                isLoaded: 0
            }
        }],
        [{
            src: "img/day-wood-crossarrow.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-wood-crossarrow1.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-wood-crossarrowl.png",
            W: {
                isLoaded: 0
            }
        }],
        [{
            src: "img/day-nail1.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-nail2.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-nail2l.png",
            W: {
                isLoaded: 0
            }
        }],
        [{
            src: "img/day-laser0.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-laser1.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-laser1l.png",
            W: {
                isLoaded: 0
            }
        }],
        [{
            src: "img/day-grenade0.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-grenade1.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-grenadel.png",
            W: {
                isLoaded: 0
            }
        }]
    ],
    gunEffect: [
        [{
            src: "img/day-gun-effect0.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-gun-effect1.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-gun-effect2.png",
            W: {
                isLoaded: 0
            }
        }],
        [{
            src: "img/day-laser-effect0.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-laser-effect1.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-laser-effect2.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-laser-effect3.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-laser-effect4.png",
            W: {
                isLoaded: 0
            }
        }]
    ],
    weapons: [{
        type: 0,
        id: 0,
        shot: 0,
        rightArm: {
            angle: 0,
            x: 22,
            y: 39
        },
        leftArm: {
            angle: 0,
            x: 22,
            y: -39
        },
        soundDelay: 0,
        soundVolume: 0.5,
        soundLen: 3,
        sound: ["audio/hand-swing0.mp3", "audio/hand-swing2.mp3", "audio/hand-swing3.mp3"],
        breath: 0.05,
        move: 3,
        delay: 300,
        impact: 301,
        impactClient: 150,
        damage: 20,
        damageCac: 3,
        knockback: 10,
        stamina: 2,
        radius: 30,
        malusSpeed: 0,
        dist: 47,
        consumable: 0,
        trigger: 0
    }, {
        type: 1,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 0.8,
        soundLen: 1,
        sound: ["audio/pickaxe-swing.mp3"],
        weapon: {
            src: "img/day-stone-pickaxe.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 30,
            y: 0,
            rotation: 4,
            x2: 20,
            y2: 10
        },
        rightArm: {
            angle: 0,
            x: 33,
            y: 28,
            dist: 8,
            rotation: 1.8
        },
        leftArm: {
            angle: 0,
            x: 30,
            y: -28,
            dist: -14,
            rotation: 1
        },
        breath: 0.02,
        move: 2,
        delay: 800,
        delayClient: 800,
        impact: 801,
        impactClient: 650,
        damage: 45,
        damageCac: 16,
        knockback: 15,
        stamina: 5,
        radius: 50,
        dist: 56,
        consumable: 0,
        trigger: 0
    }, {
        type: 1,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 0.8,
        soundLen: 1,
        sound: ["audio/pickaxe-swing.mp3"],
        weapon: {
            src: "img/day-steel-pickaxe.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 30,
            y: 0,
            rotation: 4,
            x2: 20,
            y2: 10
        },
        rightArm: {
            angle: 0,
            x: 33,
            y: 28,
            dist: 8,
            rotation: 1.8
        },
        leftArm: {
            angle: 0,
            x: 30,
            y: -28,
            dist: -14,
            rotation: 1
        },
        breath: 0.02,
        move: 2,
        delay: 800,
        delayClient: 800,
        impact: 801,
        impactClient: 650,
        damage: 55,
        damageCac: 22,
        knockback: 15,
        stamina: 5,
        radius: 50,
        dist: 56,
        consumable: 0,
        trigger: 0
    }, {
        type: 1,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 0.8,
        soundLen: 1,
        sound: ["audio/hatchet-swing.mp3"],
        weapon: {
            src: "img/day-hachet.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 30,
            y: 0,
            rotation: 4,
            x2: 20,
            y2: 10
        },
        rightArm: {
            angle: 0,
            x: 33,
            y: 28,
            dist: 8,
            rotation: 1.8
        },
        leftArm: {
            angle: 0,
            x: 30,
            y: -28,
            dist: -14,
            rotation: 1
        },
        breath: 0.02,
        move: 2,
        delay: 500,
        delayClient: 500,
        impact: 501,
        impactClient: 350,
        damage: 30,
        damageCac: 7,
        knockback: 10,
        stamina: 4,
        radius: 40,
        dist: 59,
        consumable: 0,
        trigger: 0
    }, {
        type: 1,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 0.8,
        soundLen: 1,
        sound: ["audio/axe-swing.mp3"],
        weapon: {
            src: "img/day-stone-axe.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 30,
            y: 0,
            rotation: 4,
            x2: 20,
            y2: 10
        },
        rightArm: {
            angle: 0,
            x: 33,
            y: 28,
            dist: 8,
            rotation: 1.8
        },
        leftArm: {
            angle: 0,
            x: 30,
            y: -28,
            dist: -14,
            rotation: 1
        },
        breath: 0.05,
        move: 3,
        delay: 650,
        impact: 651,
        impactClient: 550,
        damage: 50,
        damageCac: 26,
        knockback: 20,
        stamina: 4,
        radius: 46,
        dist: 72,
        consumable: 0,
        trigger: 0
    }, {
        type: 3,
        id: 0,
        shot: 1,
        soundDelay: 0.75,
        soundVolume: 1,
        soundLen: 1,
        sound: ["audio/spear-shot.mp3"],
        weapon: {
            src: "img/day-wood-spear.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 25,
            y: 40
        },
        rightArm: {
            angle: 0,
            x: 10,
            y: 44
        },
        leftArm: {
            angle: 0,
            x: 22,
            y: -39
        },
        bulletNumber: [0],
        bulletId: 4,
        bulletSpeed: 0.5,
        damageType: 1,
        path: 600,
        damage: 80,
        knockback: 30,
        breath: 0.05,
        breathWeapon: 2,
        move: 3,
        delay: 850,
        impact: 100,
        impactClient: 100,
        stamina: 15,
        x: -40,
        dist: 47,
        distance: 60,
        consumable: 0,
        trigger: 0
    }, {
        type: 4,
        id: 0,
        shot: 1,
        WnVmv: {
            src: "img/day-wood-arrow1.png",
            W: {
                isLoaded: 0
            },
            x: 50,
            y: 0
        },
        soundDelay: 1.08,
        soundVolume: 1.4,
        soundLen: 1,
        sound: ["audio/bow-shot.mp3"],
        weapon: {
            src: "img/day-wood-bow.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 44,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 10,
            y: 44
        },
        leftArm: {
            angle: 0,
            x: 40,
            y: -30
        },
        damage: 40,
        knockback: 10,
        bulletNumber: [0],
        bulletId: 3,
        bulletSpeed: 0.75,
        damageType: 1,
        path: 800,
        breath: 0.5,
        breathWeapon: 1,
        move: 1,
        delay: 1200,
        impact: 120,
        impactClient: 100,
        stamina: 8,
        x: -1,
        dist: 47,
        distance: -8,
        consumable: 0,
        trigger: 0
    }, {
        type: 2,
        id: 0,
        shot: 1,
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 43,
            y: -13
        },
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 1,
        sound: ["audio/shotgun-shot.mp3"],
        weapon: {
            src: "img/day-shotgun.png",
            W: {
                isLoaded: 0
            },
            x: 60,
            y: 0
        },
        damage: 21,
        knockback: 20,
        gunEffect: 0,
        cartridge: 0,
        cartridgeDelay: 500,
        recoil: 3,
        recoilHead: 4,
        recoilGun: 3,
        noEffect: 0,
        firingRate: 0,
        spread: 0,
        bulletNumber: [0, 0.1, -0.1, 0.2, -0.2],
        bulletId: 2,
        bulletSpeed: 1.1,
        damageType: 1,
        magazine: 8,
        reload: 10,
        oneperone: 1,
        distance: 58,
        breath: 1,
        move: 2,
        delay: 900,
        impact: 901,
        stamina: 0,
        x: 0,
        path: 600,
        dist: 47,
        consumable: 0,
        trigger: 0
    }, {
        type: 2,
        id: 0,
        shot: 1,
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 1,
        sound: ["audio/9mm-shot.mp3"],
        weapon: {
            src: "img/day-9mm.png",
            W: {
                isLoaded: 0
            },
            x: 50,
            y: 0
        },
        damage: 28,
        knockback: 10,
        gunEffect: 0,
        cartridge: 1,
        cartridgeDelay: 400,
        recoil: 2,
        recoilHead: 1,
        recoilGun: 2,
        noEffect: 0,
        firingRate: 0,
        spread: 0,
        bulletNumber: [0],
        bulletId: 0,
        bulletSpeed: 1.2,
        damageType: 1,
        magazine: 20,
        reload: 22,
        oneperone: 0,
        distance: 40,
        breath: 1,
        move: 2,
        delay: 400,
        impact: 401,
        stamina: 0,
        x: 0,
        path: 800,
        dist: 47,
        consumable: 0,
        trigger: 0
    }, {
        type: 2,
        id: 0,
        shot: 1,
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        soundDelay: 0,
        soundVolume: 1.3,
        soundLen: 1,
        sound: ["audio/desert-eagle-shot.mp3"],
        weapon: {
            src: "img/day-desert-eagle.png",
            W: {
                isLoaded: 0
            },
            x: 50,
            y: 0
        },
        damage: 40,
        knockback: 25,
        gunEffect: 0,
        cartridge: 1,
        cartridgeDelay: 400,
        recoil: 2,
        recoilHead: 1,
        recoilGun: 2,
        noEffect: 0,
        firingRate: 0,
        spread: 0,
        bulletNumber: [0],
        bulletId: 0,
        bulletSpeed: 1.4,
        damageType: 1,
        magazine: 7,
        reload: 22,
        oneperone: 0,
        distance: 40,
        breath: 1,
        move: 2,
        delay: 400,
        impact: 401,
        stamina: 0,
        x: 0,
        path: 900,
        dist: 47,
        consumable: 0,
        trigger: 0
    }, {
        type: 2,
        id: 0,
        shot: 1,
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 43,
            y: -13
        },
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 1,
        sound: ["audio/ak47-shot.mp3"],
        weapon: {
            src: "img/day-AK47.png",
            W: {
                isLoaded: 0
            },
            x: 60,
            y: 0
        },
        damage: 30,
        knockback: 25,
        gunEffect: 0,
        cartridge: 2,
        cartridgeDelay: 500,
        recoil: 3,
        recoilHead: 2,
        recoilGun: 4,
        noEffect: 0,
        firingRate: 0,
        spread: 0,
        bulletNumber: [0],
        bulletId: 1,
        bulletSpeed: 1.4,
        damageType: 1,
        magazine: 30,
        reload: 25,
        oneperone: 0,
        distance: 58,
        breath: 1,
        move: 2,
        delay: 120,
        impact: 121,
        stamina: 0,
        x: 0,
        path: 900,
        dist: 47,
        consumable: 0,
        trigger: 0
    }, {
        type: 2,
        id: 0,
        shot: 1,
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 43,
            y: -13
        },
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 1,
        sound: ["audio/sniper-shot.mp3"],
        weapon: {
            src: "img/day-sniper.png",
            W: {
                isLoaded: 0
            },
            x: 60,
            y: 0
        },
        damage: 90,
        knockback: 30,
        gunEffect: 0,
        cartridge: 2,
        cartridgeDelay: 500,
        recoil: 3,
        recoilHead: 1,
        recoilGun: 4,
        noEffect: 0,
        firingRate: 0,
        spread: 0,
        bulletNumber: [0],
        bulletId: 1,
        bulletSpeed: 1.5,
        damageType: 1,
        magazine: 10,
        reload: 20,
        oneperone: 0,
        distance: 70,
        breath: 1,
        move: 2,
        delay: 1250,
        impact: 1251,
        stamina: 0,
        x: 0,
        path: 1100,
        dist: 47,
        consumable: 0,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 3,
        sound: 1,
        weapon: {
            src: "img/day-hand-raw-steak.png",
            W: {
                isLoaded: 0
            },
            angle: 1,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 20,
        food: 30,
        radiation: 0,
        energy: 20,
        heal: -10,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 3,
        sound: 1,
        weapon: {
            src: "img/day-hand-cooked-steak.png",
            W: {
                isLoaded: 0
            },
            angle: 1,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 4,
        breath: 0.4,
        move: 0.8,
        stamina: 0,
        consumableDelay: 200,
        wait: 20,
        food: 127,
        radiation: 0,
        energy: 80,
        heal: 0,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 3,
        sound: 1,
        weapon: {
            src: "img/day-hand-rotten-steak.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 20,
        food: 15,
        radiation: 0,
        energy: 0,
        heal: -40,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 3,
        sound: 1,
        weapon: {
            src: "img/day-hand-orange.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 40,
        radiation: 0,
        energy: 10,
        heal: 0,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 3,
        sound: 1,
        weapon: {
            src: "img/day-hand-rotten-orange.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 5,
        radiation: 0,
        energy: 0,
        heal: -40,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        weapon: {
            src: "img/day-hand-medikit.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 55,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 32
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -32
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 25,
        food: 0,
        radiation: 0,
        energy: 0,
        heal: 200,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        weapon: {
            src: "img/day-hand-bandage.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 0,
        radiation: 0,
        energy: 0,
        heal: 60,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        weapon: {
            src: "img/day-hand-soda.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 30,
        radiation: 0,
        energy: 155,
        heal: 0,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 2,
        id: 0,
        shot: 1,
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 43,
            y: -13
        },
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 1,
        sound: ["audio/mp5-shot.mp3"],
        weapon: {
            src: "img/day-MP5.png",
            W: {
                isLoaded: 0
            },
            x: 60,
            y: 0
        },
        damage: 18,
        knockback: 15,
        gunEffect: 0,
        cartridge: 1,
        cartridgeDelay: 500,
        recoil: 3,
        recoilHead: 2,
        recoilGun: 4,
        noEffect: 0,
        firingRate: 0,
        spread: 0,
        bulletNumber: [0],
        bulletId: 0,
        bulletSpeed: 1.2,
        damageType: 1,
        magazine: 30,
        reload: 26,
        oneperone: 0,
        distance: 52,
        breath: 1,
        move: 2,
        delay: 100,
        impact: 101,
        stamina: 0,
        x: 0,
        path: 900,
        dist: 47,
        trigger: 0
    }, {
        type: 6,
        id: 0,
        shot: 0,
        rightArm: {
            angle: 0,
            x: 22,
            y: 39
        },
        leftArm: {
            angle: 0,
            x: 22,
            y: -39
        },
        breath: 0.05,
        move: 3,
        malusSpeed: 0,
        blueprint: {
            src: "img/day-hand-craft.png",
            W: {
                isLoaded: 0
            }
        },
        pencil: {
            src: "img/day-hand-craftpencil.png",
            W: {
                isLoaded: 0
            }
        },
        consumable: 0,
        trigger: 0
    }, {
        type: 1,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 0.8,
        soundLen: 1,
        sound: ["audio/pickaxe-swing.mp3"],
        weapon: {
            src: "img/day-sulfur-pickaxe.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 20,
            y: 0,
            rotation: 4,
            x2: 20,
            y2: 10
        },
        rightArm: {
            angle: 0,
            x: 33,
            y: 28,
            dist: 8,
            rotation: 1.8
        },
        leftArm: {
            angle: 0,
            x: 30,
            y: -28,
            dist: -14,
            rotation: 1
        },
        breath: 0.02,
        move: 2,
        delay: 800,
        delayClient: 800,
        impact: 801,
        impactClient: 650,
        damage: 65,
        damageCac: 30,
        knockback: 15,
        stamina: 5,
        radius: 50,
        dist: 56,
        consumable: 0,
        trigger: 0
    }, {
        type: 1,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 0.8,
        soundLen: 1,
        sound: ["audio/hammer-swing.mp3"],
        weapon: {
            src: "img/day-hammer.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 25,
            y: 0,
            rotation: 4,
            x2: 20,
            y2: 10
        },
        rightArm: {
            angle: 0,
            x: 33,
            y: 28,
            dist: 8,
            rotation: 1.8
        },
        leftArm: {
            angle: 0,
            x: 30,
            y: -28,
            dist: -14,
            rotation: 1
        },
        breath: 0.02,
        move: 2,
        delay: 1100,
        delayClient: 1100,
        impact: 1101,
        impactClient: 950,
        damage: 120,
        damageCac: 30,
        knockback: 30,
        stamina: 15,
        radius: 40,
        dist: 56,
        consumable: 0,
        trigger: 0
    }, {
        type: 1,
        id: 0,
        shot: 0,
        weapon: {
            src: "img/day-repair-hammer.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 20,
            y: 0,
            rotation: 4,
            x2: 20,
            y2: 10
        },
        rightArm: {
            angle: 0,
            x: 33,
            y: 28,
            dist: 8,
            rotation: 1.8
        },
        leftArm: {
            angle: 0,
            x: 30,
            y: -28,
            dist: -14,
            rotation: 1
        },
        breath: 0.02,
        move: 2,
        delay: 700,
        delayClient: 700,
        impact: 701,
        impactClient: 550,
        damage: 40,
        damageCac: 15,
        knockback: 10,
        stamina: 6,
        radius: 40,
        dist: 59,
        consumable: 0,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 3,
        sound: 1,
        weapon: {
            src: "img/day-hand-tomato-soup.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 30,
        food: 160,
        radiation: 0,
        energy: 40,
        heal: 0,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        weapon: {
            src: "img/day-hand-radaway.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 25
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -25
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 30,
        food: 0,
        radiation: 255,
        energy: 30,
        heal: 0,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 3,
        sound: 1,
        weapon: {
            src: "img/day-hand-tomato.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 50,
        radiation: 0,
        energy: 10,
        heal: 0,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 3,
        sound: 1,
        weapon: {
            src: "img/day-hand-rotten-tomato.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 5,
        radiation: 0,
        energy: 0,
        heal: -40,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 2,
        id: 0,
        shot: 1,
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 1,
        sound: ["audio/crossbow-shot.mp3"],
        weapon: {
            src: "img/day-wood-crossbow.png",
            W: {
                isLoaded: 0
            },
            x: 50,
            y: 0
        },
        damage: 50,
        knockback: 15,
        gunEffect: 0,
        cartridge: 3,
        cartridgeDelay: 400,
        recoil: 2,
        recoilHead: 1,
        recoilGun: 2,
        noEffect: 1,
        firingRate: 0,
        spread: 0,
        bulletNumber: [0],
        bulletId: 5,
        bulletSpeed: 0.95,
        damageType: 1,
        magazine: 1,
        reload: 8,
        oneperone: 0,
        distance: 40,
        breath: 1,
        move: 2,
        delay: 400,
        impact: 401,
        stamina: 12,
        x: 0,
        path: 800,
        dist: 47,
        consumable: 0,
        trigger: 0
    }, {
        type: 2,
        id: 0,
        shot: 1,
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 1,
        sound: ["audio/nail-gun-shot.mp3"],
        weapon: {
            src: "img/day-nail-gun.png",
            W: {
                isLoaded: 0
            },
            x: 50,
            y: 0
        },
        damage: 6,
        knockback: 10,
        gunEffect: 0,
        cartridge: 4,
        cartridgeDelay: 400,
        recoil: 2,
        recoilHead: 1,
        recoilGun: 2,
        noEffect: 0,
        firingRate: 0,
        spread: 0,
        bulletNumber: [0],
        bulletId: 6,
        bulletSpeed: 1,
        damageType: 1,
        magazine: 80,
        reload: 30,
        oneperone: 0,
        distance: 52,
        breath: 1,
        move: 2,
        delay: 300,
        impact: 301,
        stamina: 0,
        x: 0,
        path: 500,
        dist: 47,
        consumable: 0,
        trigger: 0
    }, {
        type: 2,
        id: 0,
        shot: 1,
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 43,
            y: -13
        },
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 1,
        sound: ["audio/shotgun-shot.mp3"],
        weapon: {
            src: "img/day-sawed-off-shotgun.png",
            W: {
                isLoaded: 0
            },
            x: 50,
            y: 0
        },
        damage: 28,
        knockback: 30,
        gunEffect: 0,
        cartridge: 0,
        cartridgeDelay: 500,
        recoil: 3,
        recoilHead: 4,
        recoilGun: 3,
        noEffect: 0,
        firingRate: 0,
        spread: 0,
        bulletNumber: [0, 0.12, -0.12, 0.24, -0.24],
        bulletId: 2,
        bulletSpeed: 1.11,
        damageType: 1,
        magazine: 8,
        reload: 10,
        oneperone: 1,
        distance: 53,
        breath: 1,
        move: 2,
        delay: 900,
        impact: 901,
        stamina: 0,
        x: 0,
        path: 400,
        dist: 47,
        consumable: 0,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 3,
        sound: 1,
        weapon: {
            src: "img/day-hand-chips.png",
            W: {
                isLoaded: 0
            },
            angle: 1,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 4,
        breath: 0.4,
        move: 0.8,
        stamina: 0,
        consumableDelay: 200,
        wait: 20,
        food: 90,
        radiation: 0,
        energy: 50,
        heal: 0,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 3,
        sound: 1,
        weapon: {
            src: "img/day-hand-rotten-chips.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 5,
        radiation: 0,
        energy: 0,
        heal: -40,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 2,
        id: 0,
        shot: 1,
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 1,
        sound: ["audio/laser-pistol-shot.mp3"],
        weapon: {
            src: "img/day-laser-pistol.png",
            W: {
                isLoaded: 0
            },
            x: 50,
            y: 0
        },
        damage: 55,
        knockback: 0,
        gunEffect: 1,
        cartridge: 5,
        cartridgeDelay: 400,
        recoil: 2,
        recoilHead: 1,
        recoilGun: 2,
        noEffect: 0,
        firingRate: 0,
        spread: 0,
        bulletNumber: [0],
        bulletId: 7,
        bulletSpeed: 1.45,
        damageType: 2,
        magazine: 12,
        reload: 22,
        oneperone: 0,
        distance: 50,
        breath: 1,
        move: 2,
        delay: 400,
        impact: 401,
        stamina: 0,
        x: 0,
        path: 900,
        dist: 47,
        consumable: 0,
        trigger: 0
    }, {
        type: 1,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 0.8,
        soundLen: 1,
        sound: ["audio/axe-swing.mp3"],
        weapon: {
            src: "img/day-sulfur-axe.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 30,
            y: 0,
            rotation: 4,
            x2: 20,
            y2: 10
        },
        rightArm: {
            angle: 0,
            x: 33,
            y: 28,
            dist: 8,
            rotation: 1.8
        },
        leftArm: {
            angle: 0,
            x: 30,
            y: -28,
            dist: -14,
            rotation: 1
        },
        breath: 0.05,
        move: 3,
        delay: 650,
        impact: 651,
        impactClient: 550,
        damage: 50,
        damageCac: 30,
        knockback: 20,
        stamina: 4,
        radius: 46,
        dist: 72,
        consumable: 0,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        weapon: {
            src: "img/day-hand-joystick.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 2,
        food: 0,
        radiation: 0,
        energy: 0,
        heal: 0,
        poison: 0,
        consumable: 0,
        trigger: 1
    }, {
        type: 2,
        id: 0,
        shot: 1,
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 1,
        sound: ["audio/laser-submachine-shot.mp3"],
        weapon: {
            src: "img/day-laser-submachine.png",
            W: {
                isLoaded: 0
            },
            x: 50,
            y: 0
        },
        damage: 45,
        knockback: 0,
        gunEffect: 1,
        cartridge: 5,
        cartridgeDelay: 500,
        recoil: 3,
        recoilHead: 2,
        recoilGun: 4,
        noEffect: 0,
        firingRate: 0,
        spread: 0,
        bulletNumber: [0],
        bulletId: 7,
        bulletSpeed: 1.45,
        damageType: 2,
        magazine: 30,
        reload: 25,
        oneperone: 0,
        distance: 54,
        breath: 1,
        move: 2,
        delay: 160,
        impact: 161,
        stamina: 0,
        x: 0,
        path: 900,
        dist: 47,
        consumable: 0,
        trigger: 0
    }, {
        type: 3,
        id: 0,
        shot: 1,
        weapon: {
            src: "img/day-hand-grenade.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 25,
            y: 50
        },
        rightArm: {
            angle: 0,
            x: 10,
            y: 44
        },
        leftArm: {
            angle: 0,
            x: 22,
            y: -39
        },
        bulletNumber: [0],
        bulletId: 8,
        bulletSpeed: 0.4,
        damageType: 1,
        path: 380,
        damage: 15,
        knockback: 5,
        breath: 0.05,
        breathWeapon: 2,
        move: 3,
        delay: 850,
        impact: 100,
        impactClient: 100,
        stamina: 15,
        x: -50,
        dist: 47,
        distance: 25,
        consumable: 0,
        trigger: 0
    }, {
        type: 1,
        id: 0,
        shot: 0,
        weapon: {
            src: "img/day-super-hammer.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 25,
            y: 5,
            rotation: 4,
            x2: 20,
            y2: 10
        },
        rightArm: {
            angle: 0,
            x: 33,
            y: 28,
            dist: 8,
            rotation: 1.8
        },
        leftArm: {
            angle: 0,
            x: 30,
            y: -28,
            dist: -14,
            rotation: 1
        },
        breath: 0.02,
        move: 2,
        delay: 1100,
        delayClient: 1100,
        impact: 1101,
        impactClient: 950,
        damage: 1000,
        damageCac: 255,
        knockback: 30,
        stamina: 15,
        radius: 40,
        dist: 56,
        consumable: 0,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        weapon: {
            src: "img/day-hand-ghoul-drug.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 13
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 30,
        food: 0,
        radiation: 0,
        energy: 0,
        heal: -10,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 3,
        sound: 1,
        weapon: {
            src: "img/day-hand-mushroom1.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 0,
        radiation: 0,
        energy: 10,
        heal: -20,
        poison: 12,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 3,
        sound: 1,
        weapon: {
            src: "img/day-hand-mushroom2.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 40,
        radiation: 0,
        energy: 10,
        heal: 0,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 3,
        sound: 1,
        weapon: {
            src: "img/day-hand-mushroom3.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 40,
        radiation: 0,
        energy: 10,
        heal: 0,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 3,
        sound: 1,
        weapon: {
            src: "img/day-hand-rotten-mushroom1.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 0,
        radiation: 0,
        energy: 0,
        heal: -40,
        poison: 8,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 3,
        sound: 1,
        weapon: {
            src: "img/day-hand-rotten-mushroom2.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 5,
        radiation: 0,
        energy: 0,
        heal: -40,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 3,
        sound: 1,
        weapon: {
            src: "img/day-hand-rotten-mushroom3.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 5,
        radiation: 0,
        energy: 0,
        heal: -40,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        weapon: {
            src: "img/day-hand-lapadoine.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 13
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 30,
        food: 0,
        radiation: 0,
        energy: 0,
        heal: -10,
        poison: 2,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 3,
        sound: 1,
        weapon: {
            src: "img/day-hand-pumpkin.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 25
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -25
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 20,
        food: 90,
        radiation: 0,
        energy: 20,
        heal: 0,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 3,
        sound: 1,
        weapon: {
            src: "img/day-hand-rotten-pumpkin.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 25
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -25
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 30,
        radiation: 0,
        energy: 0,
        heal: -40,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        weapon: {
            src: "img/day-hand-antidote.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 13
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -13
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 30,
        food: 0,
        radiation: 0,
        energy: 0,
        heal: 50,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 3,
        sound: 1,
        weapon: {
            src: "img/day-hand-acorn.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 10
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -10
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 15,
        radiation: 0,
        energy: 0,
        heal: 0,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 3,
        sound: 1,
        weapon: {
            src: "img/day-hand-rotten-acorn.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 10
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -10
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 2,
        radiation: 0,
        energy: 0,
        heal: -20,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 2,
        id: 0,
        shot: 1,
        rightArm: {
            angle: 0,
            x: 32,
            y: 15
        },
        leftArm: {
            angle: 0,
            x: 43,
            y: -13
        },
        soundDelay: 0,
        soundVolume: 1,
        soundLen: 1,
        sound: ["audio/laser-sniper-shot.mp3"],
        weapon: {
            src: "img/day-laser-sniper.png",
            W: {
                isLoaded: 0
            },
            x: 55,
            y: 0
        },
        damage: 100,
        knockback: 0,
        gunEffect: 1,
        cartridge: 5,
        cartridgeDelay: 500,
        recoil: 3,
        recoilHead: 1,
        recoilGun: 4,
        noEffect: 0,
        firingRate: 0,
        spread: 0,
        bulletNumber: [0],
        bulletId: 7,
        bulletSpeed: 1.5,
        damageType: 2,
        magazine: 10,
        reload: 20,
        oneperone: 0,
        distance: 70,
        breath: 1,
        move: 2,
        delay: 1250,
        impact: 1251,
        stamina: 0,
        x: 0,
        path: 1100,
        dist: 47,
        consumable: 0,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        weapon: {
            src: "img/day-hand-christmas-cake.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 10
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -10
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 127,
        radiation: 0,
        energy: 30,
        heal: 0,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        weapon: {
            src: "img/day-hand-rotten-christmas-cake.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 10
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -10
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 10,
        radiation: 0,
        energy: 0,
        heal: -20,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        weapon: {
            src: "img/day-hand-gingerbread-man.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 10
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -10
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 20,
        radiation: 0,
        energy: 20,
        heal: 40,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        weapon: {
            src: "img/day-hand-rotten-gingerbread-man.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 10
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -10
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 10,
        radiation: 0,
        energy: 0,
        heal: -20,
        poison: 0,
        consumable: 1,
        trigger: 0
    }, {
        type: 1,
        id: 0,
        shot: 0,
        weapon: {
            src: "img/day-sugar-can.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 30,
            y: 0,
            rotation: 4,
            x2: 20,
            y2: 10
        },
        rightArm: {
            angle: 0,
            x: 33,
            y: 28,
            dist: 8,
            rotation: 1.8
        },
        leftArm: {
            angle: 0,
            x: 30,
            y: -28,
            dist: -14,
            rotation: 1
        },
        breath: 0.02,
        move: 2,
        delayClient: 650,
        delay: 650,
        impact: 651,
        impactClient: 550,
        damage: 60,
        damageCac: 38,
        knockback: 20,
        stamina: 16,
        radius: 50,
        dist: 56,
        consumable: 0,
        trigger: 0
    }, {
        type: 5,
        id: 0,
        shot: 0,
        weapon: {
            src: "img/day-hand-sugar-can-bow.png",
            W: {
                isLoaded: 0
            },
            angle: 0,
            x: 50,
            y: 0
        },
        rightArm: {
            angle: 0,
            x: 32,
            y: 10
        },
        leftArm: {
            angle: 0,
            x: 32,
            y: -10
        },
        recoil: 3,
        breath: 0.02,
        move: 2,
        stamina: 0,
        consumableDelay: 200,
        wait: 10,
        food: 30,
        radiation: 0,
        energy: 50,
        heal: 0,
        poison: 0,
        consumable: 1,
        trigger: 0
    }],
    AABB: {
        w: 24,
        h: 24
    },
    radius: 38,
    hitRadius: 40,
    _left: 36,
    _right: 36,
    _bottom: 36,
    _top: 36,
    speed: 0.23,
    speedRun: 0.35,
    speedMalusBusy: 0.08,
    speedMalusLapadone: 0.08,
    speedBonusLapadone: 0.08,
    speedKnockback: 0.05,
    collisionType: 0,
    remove: 1000,
    z: 0,
    life: 0,
    inventorySize: 8,
    lerp: 0.15,
    timelife: -1
}, {
    AABB: {
        w: 0,
        h: 0
    },
    radius: 50,
    _left: 0,
    _right: 0,
    _bottom: 0,
    _top: 0,
    speed: 0.2,
    collisionType: 2,
    remove: 1000,
    z: 0,
    life: 0,
    lerp: 0.1,
    timelife: 20000
}, {
    AABB: {
        w: 0,
        h: 0
    },
    radius: 4,
    _left: 0,
    _right: 0,
    _bottom: 0,
    _top: 0,
    speed: 1,
    collisionType: 2,
    remove: 1000,
    z: 0,
    life: 0,
    lerp: 0.2,
    timelife: -1
}, {
    AABB: {
        w: 0,
        h: 0
    },
    _left: 0,
    _right: 0,
    _bottom: 0,
    _top: 0,
    speed: 0,
    life: 0,
    remove: 1000,
    z: 0,
    lerp: 0.2,
    collisionType: 1,
    timelife: -1
}, {
    AABB: {
        w: 0,
        h: 0
    },
    _left: 0,
    _right: 0,
    _bottom: 0,
    _top: 0,
    speed: 0,
    life: 0,
    remove: 1000,
    z: 0,
    lerp: 0.2,
    collisionType: 1,
    timelife: -1
}, {
    AABB: {
        w: 0,
        h: 0
    },
    _left: 0,
    _right: 0,
    _bottom: 0,
    _top: 0,
    speed: 0,
    life: 0,
    remove: 1000,
    z: 0,
    lerp: 0.2,
    collisionType: 1,
    timelife: -1
}, {
    AABB: {
        w: 0,
        h: 0
    },
    _left: 0,
    _right: 0,
    _bottom: 0,
    _top: 0,
    speed: 0,
    life: 0,
    remove: 1000,
    z: 0,
    lerp: 0.2,
    collisionType: 1,
    timelife: -1
}, {
    speed: 0.7,
    life: 0,
    z: 0,
    lerp: 0.2
}, {
    AABB: {
        w: 24,
        h: 24
    },
    radius: 38,
    hitRadius: 40,
    _left: 36,
    _right: 36,
    _bottom: 36,
    _top: 36,
    speed: 0,
    collisionType: 0,
    remove: 1000,
    z: 1,
    life: 0,
    lerp: 0.15,
    timelife: 1800000
}, {
    AABB: {
        w: 24,
        h: 24
    },
    radius: 38,
    hitRadius: 40,
    _left: 36,
    _right: 36,
    _bottom: 36,
    _top: 36,
    speed: 0,
    collisionType: 0,
    remove: 1000,
    z: 1,
    life: 0,
    lerp: 0.15,
    timelife: 1800000
}, {
    AABB: {
        w: 24,
        h: 24
    },
    radius: 38,
    hitRadius: 40,
    _left: 36,
    _right: 36,
    _bottom: 36,
    _top: 36,
    speed: 0,
    collisionType: 0,
    remove: 1000,
    z: 1,
    life: 0,
    lerp: 0.15,
    timelife: 1800000
}, {
    AABB: {
        w: 24,
        h: 24
    },
    radius: 38,
    hitRadius: 40,
    _left: 36,
    _right: 36,
    _bottom: 36,
    _top: 36,
    speed: 0,
    collisionType: 0,
    remove: 1000,
    z: 1,
    life: 0,
    lerp: 0.15,
    timelife: 1800000
}, {
    AABB: {
        w: 24,
        h: 24
    },
    explosions: [{
        src: "img/day-explosion0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-explosion1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-explosion2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-explosion3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-explosion4.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-explosion5.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-explosion6.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-explosion7.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-explosion8.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-explosion9.png",
        W: {
            isLoaded: 0
        }
    }],
    radius: 38,
    hitRadius: 40,
    _left: 36,
    _right: 36,
    _bottom: 36,
    _top: 36,
    speed: 0,
    collisionType: 2,
    remove: 0,
    z: 1,
    life: 64000,
    lerp: 0.15,
    timelife: 1500
}, {
    AABB: {
        w: 24,
        h: 24
    },
    radius: 38,
    hitRadius: 40,
    _left: 36,
    _right: 36,
    _bottom: 36,
    _top: 36,
    speed: 0.23,
    speedRun: 0.35,
    speedMalusBusy: 0.08,
    speedKnockback: 0.05,
    collisionType: 0,
    remove: 1000,
    z: 0,
    life: 0,
    inventorySize: 8,
    lerp: 0.15,
    timelife: -1
}];

function EntitieClass(vV) {

    this.uid        = 0;
    this.pid        = 0;
    this.id         = 0;
    this.type       = vV;
    this.subtype    = 0;
    this.angle      = 0;
    this.nangle     = 0;
    this.angleX     = 0;
    this.angleY     = 0;
    this.state      = 0;
    this.extra      = 0;
    this.broke      = 0;
    this.x          = 0;
    this.y          = 0;
    this.rx         = 0;
    this.ry         = 0;
    this.nx         = -1;
    this.ny         = 0;
    this.px         = 0;
    this.py         = 0;
    this.i          = 0;
    this.j          = 0;
    this.speed      = 0;
    this.update     = 0;
    this.removed    = 0;
    this.hit        = 0;
    this.hitMax     = 0;
    this.hurt       = 0;
    this.hurtAngle  = 0;
    this.heal       = 0;
    this.death      = 0;
    this.born       = 0;
    this.breath     = 0;
    this.breath2    = 0;
    this.particles = [];
    this.draw       = null;
    this.lerp       = 0.1;

    for (var i = 0; i < 10; i++)
        this.particles.push({
            c: 0,
            V: 0,
            MNMWN: 0,
            nMNwv: 0,
            mMn: 0,
            r: 0
        });
};

function setEntitie(MW, pid, uid, Wn, vV, WX, WY, nx, ny, extra, angle, Mnn) {

    MW.pid      = pid;
    MW.uid      = uid;
    MW.id       = Wn;
    MW.nangle   = MathUtils.reduceAngle(MW.angle, ((angle * 2) * window.Math.PI) / 255);
    MW.state    = Mnn;
    MW.nx       = nx;
    MW.ny       = ny;
    MW.extra    = extra;

    if (MW.update === 0) {

        var WvW         = ENTITIES[vV];
        MW.speed        = WvW.speed;
        MW.angle        = MW.nangle;
        MW.x            = WX;
        MW.y            = WY;
        MW.z            = WvW.z;
        MW.lerp         = WvW.lerp;
        MW.rx           = WX;
        MW.ry           = WY;
        MW.i            = window.Math.floor(WY / Render.__TILE_SIZE__);
        MW.j            = window.Math.floor(WX / Render.__TILE_SIZE__);
        MW.hit          = 0;
        MW.hitMax       = 0;
        MW.hurt         = 0;
        MW.hurt2        = 0;
        MW.hurtAngle    = 0;
        MW.heal         = 0;
        MW.death        = 0;
        MW.breath       = 0;
        MW.breath2      = 0;
        MW.born         = 0;
        MW.broke        = 0;
        MW.subtype      = 0;
        MW.draw         = null;

        var init = WvW.init;

        if (init !== window.undefined)
            init(MW);

    }
    var angle = Math2d.angle(MW.rx, MW.ry, nx, ny);
    MW.angleX = window.Math.cos(angle);
    MW.angleY = window.Math.sin(angle);
    MW.update = 1;
};
var Border = (function() {
    function forceNewIdentifier(M) {
        if (M.border === M.size) {
            M.cycle[M.size] = M.size;
            M.locator[M.size] = M.size;
            M.size++;
        }
        return M.cycle[M.border++];
    };

    function getNewIdentifier(M) {
        if (M.border < M.size)
            return M.cycle[M.border++];
        return -1;
    };

    function fastKillIdentifier(M, WMwNN) {
        M.border--;
        var NNMwv = M.cycle[M.border];
        M.cycle[M.border] = M.cycle[WMwNN];
        M.cycle[WMwNN] = NNMwv;
    };

    function killIdentifier(M, WMWmm) {
        M.border--;
        var NNMwv = M.cycle[M.border];
        var wMmvn = M.locator[WMWmm];
        M.cycle[M.border] = WMWmm;
        M.cycle[wMmvn] = NNMwv;
        M.locator[NNMwv] = wMmvn;
        M.locator[WMWmm] = M.border;
    };

    function Border(wMv) {
        this.size = wMv;
        this.border = 0;
        this.cycle = [];
        this.locator = [];
        for (var i = 0; i < wMv; i++) {
            this.cycle[i] = i;
            this.locator[i] = i;
        }
    };

    function ImperfectBorder(wMv) {
        var border = new Border(wMv);
        var cycle = border.cycle;
        var VnMNn = new window.Array(wMv);
        this.length = 0;
        this.reset = function vision() {
            border.border = 0;
            this.length = 0;
        };
        this.add = function vmMVw(vMV) {
            VnMNn[forceNewIdentifier(border)] = vMV;
            this.length++;
        };
        this.remove = function remove(vMV) {
            for (var i = 0; i < this.length; i++) {
                if (VnMNn[cycle[i]] === vMV) {
                    fastKillIdentifier(border, i);
                    this.length--;
                    return;
                }
            }
        };
        this.get = function get(i) {
            return VnMNn[cycle[i]];
        };
    };

    function PerfectBorder(wMv) {
        var border = new Border(wMv);
        var cycle = border.cycle;
        var VnMNn = new window.Array(wMv);
        var i = 0;
        var wnVvv = [];
        for (i = 0; i < wMv; i++)
            wnVvv[i] = -1;
        this.length = 0;
        this.reset = function vision() {
            border.border = 0;
            this.length = 0;
        };
        this.add = function vmMVw(vMV) {
            var pos = forceNewIdentifier(border);
            VnMNn[pos] = vMV;
            wnVvv[vMV] = border.border - 1;
            this.length++;
        };
        this.remove = function remove(vMV) {
            var pos = wnVvv[vMV];
            if (pos === -1)
                return;
            wnVvv[vMV] = -1;
            fastKillIdentifier(border, pos);
            this.length--;
            if (this.length > 0)
                wnVvv[VnMNn[cycle[pos]]] = pos;
        };
        this.get = function get(i) {
            return VnMNn[cycle[i]];
        };
    };

    return {
        Border:             Border,
        PerfectBorder:      PerfectBorder,
        ImperfectBorder:    ImperfectBorder,
        getNewIdentifier:   getNewIdentifier,
        forceNewIdentifier: forceNewIdentifier,
        killIdentifier:     killIdentifier,
        fastKillIdentifier: fastKillIdentifier
    };

})();
var RNG = (function() {
    function Random(WVWWv) {
        var nMNwv = 2147483648;
        var WVm = 1103515245;
        var WNn = 12345;
        var Mnn = WVWWv ? WVWWv : window.Math.floor(window.Math.random() * (nMNwv - 1));
        this.init = function(WVWWv) {
            Mnn = WVWWv ? WVWWv : window.Math.floor(window.Math.random() * (nMNwv - 1));
        };
        this.get = function() {
            Mnn = ((WVm * Mnn) + WNn) % nMNwv;
            return Mnn / nMNwv;
        };
    };
    return {
        Random: Random
    };
})();
var Quicksort = (function() {
    function MvWmM(WwN, NvNNM, vVmmm, MMM, VWmWN) {
        var WnWnN = MMM;
        var nmnVv = WwN[vVmmm];
        var wWNMV = WwN[vVmmm];
        WwN[vVmmm] = WwN[VWmWN];
        WwN[VWmWN] = wWNMV;
        for (var VwvNN = MMM; VwvNN < VWmWN; VwvNN++) {
            if (NvNNM(WwN[VwvNN], nmnVv) <= 0) {
                var wWNMV = WwN[VwvNN];
                WwN[VwvNN] = WwN[WnWnN];
                WwN[WnWnN] = wWNMV;
                WnWnN++;
            }
        }
        var wWNMV = WwN[VWmWN];
        WwN[VWmWN] = WwN[WnWnN];
        WwN[WnWnN] = wWNMV;
        return WnWnN;
    };

    function nMNWM(WwN, NvNNM, MMM, VWmWN) {
        var vVmmm = 0;
        if (MMM < VWmWN) {
            vVmmm = MMM + window.Math.ceil((VWmWN - MMM) * 0.5);
            NMmnN = MvWmM(WwN, NvNNM, vVmmm, MMM, VWmWN);
            nMNWM(WwN, NvNNM, MMM, NMmnN - 1);
            nMNWM(WwN, NvNNM, NMmnN + 1, VWmWN);
        }
    };

    function MvvmM(WwN, NvNNM) {
        try {
            nMNWM(WwN, NvNNM, 0, WwN.length - 1);
        } catch (error) {
            WwN.sort(NvNNM);
        }
    };
    return {
        sort: MvvmM
    };
})();
var TextManager = (function() {
    var __COUNTER__ = 0;
    var languages = {
        eng: [__COUNTER__++, "en"],
        rus: [__COUNTER__++, "ru"],
        spa: [__COUNTER__++, "sp"],
        fra: [__COUNTER__++, "fr"],
        deu: [__COUNTER__++, "de"],
        ita: [__COUNTER__++, "it"],
        pol: [__COUNTER__++, "pl"],
        pt: [__COUNTER__++, "pt"]
    };
    var lang = languages.eng;
    var VNWww = lang[0];
    var VmvWv = [];
    for (var i = 0; i < __COUNTER__; i++)
        VmvWv[i] = [];
    var NWNnM = languages.eng;

    function nMmMN(wnWwm) {
        lang = wnWwm;
        TextManager.lang = lang;
        VNWww = lang[0];
        localStorage2.setItem("lang", window.JSON.stringify(lang));
    };

    function get(Wn) {
        if ((VmvWv[VNWww] === window.undefined) || (VmvWv[VNWww][Wn] === window.undefined))
            return VmvWv[NWNnM[0]][Wn];
        else
            return VmvWv[VNWww][Wn];
    };

    function getFormatted(Wn) {
        var NvV;
        if ((VmvWv[VNWww] === window.undefined) || (VmvWv[VNWww][Wn] === window.undefined))
            wmwww = VmvWv[NWNnM][Wn];
        else
            wmwww = VmvWv[VNWww][Wn];
        for (var i = 1; i < arguments.length; i++)
            wmwww[0] = wmwww[0].replace("%d", arguments[i]);
        return wmwww;
    };

    function NvMWn(vNvWn) {
        for (var i = 0; i < vNvWn.length; i++)
            VmvWv[VNWww][i] = [vNvWn[i]];
    };

    function loadLanguage(wnWwm, callback) {
        nMmMN(wnWwm);
        if (VmvWv[wnWwm[0]].length !== 0) {
            if (callback !== window.undefined)
                callback();
            return;
        }
        var xObj = new window.XMLHttpRequest;
        xObj.open("GET", ("json/lang" + wnWwm[1]) + ".json", true);
        xObj.onreadystatechange = function() {
            if ((xObj.readyState === 4) && (this.status === 200)) {
                NvMWn(window.JSON.parse(this.NWMnMvN));
                if (callback !== window.undefined)
                    callback();
            }
        };
        xObj.send();
    };

    function init(vNvWn, nVnNv, callback) {
        if (nVnNv !== window.undefined)
            NWNnM = nVnNv;
        if (vNvWn !== window.undefined) {
            var mWN = VNWww;
            VNWww = NWNnM[0];
            NvMWn(vNvWn);
            VNWww = mWN;
        }
        var WVNNM = localStorage2.getItem("lang");
        if (WVNNM === null) {
            var vnmnw = window.navigator.language || window.navigator.userLanguage;
            switch (vnmnw) {
                case "ru":
                    lang = languages.rus;
                    break;
                case "en":
                    lang = languages.eng;
                    break;
                case "es":
                    lang = languages.spa;
                    break;
                case "fr":
                    lang = languages.fra;
                    break;
                case "it":
                    lang = languages.ita;
                    break;
                case "pl":
                    lang = languages.pol;
                    break;
                case "de":
                    lang = languages.deu;
                    break;
                case "pt":
                    lang = languages.pt;
                    break;
            }
        } else
            lang = window.JSON.parse(WVNNM);
        loadLanguage(lang, callback);
    };

    return {
        languages:      languages,
        lang:           lang,
        get:            get,
        getFormatted:   getFormatted,
        init:           init,
        loadLanguage:   loadLanguage
    };

})();
var Keyboard = (function() {
    var VVvvM = "0";
    var WWWNw = "1";
    var mwN = 0;
    var mvNNW = 1;
    var key_a = 65;
    var key_d = 68;
    var key_w = 87;
    var key_s = 83;
    var numpad4 = 37;
    var numpad6 = 39;
    var numpad8 = 38;
    var numpad2 = 40;
    var keyshift = 16;
    var VNW = (new window.Array(255)).fill(mwN);
    var MVvNV = null;

    function isAzerty() {
        if (MVvNV === WWWNw)
            return 1;
        else
            return 0;
    };

    function isQwerty() {
        if (MVvNV === VVvvM)
            return 1;
        else
            return 0;
    };

    function setAzerty() {
        key_a = 81;
        key_d = 68;
        key_w = 90;
        key_s = 83;
        localStorage2.setItem("keyboardMap", WWWNw);
        MVvNV = WWWNw;
    };

    function setQwert() {
        key_a = 65;
        key_d = 68;
        key_w = 87;
        key_s = 83;
        localStorage2.setItem("keyboardMap", VVvvM);
        MVvNV = VVvvM;
    };

    function keyup(event) {
        var nMm = window.Math.min(event.charCode || event.keyCode, 255);
        VNW[nMm] = mwN;
    };

    function keydown(event) {
        var nMm = window.Math.min(event.charCode || event.keyCode, 255);
        if ((nMm === key_a) || (nMm === numpad4))
            NnvmV();
        else if ((nMm === key_w) || (nMm === numpad8))
            WNwVV();
        else if ((nMm === key_s) || (nMm === numpad2))
            MWnmw();
        else if ((nMm === key_d) || (nMm === numpad6))
            mWnvN();
        VNW[nMm] = mvNNW;
        return nMm;
    };

    function NnvmV() {
        VNW[key_d] = mwN;
        VNW[numpad6] = mwN;
    };

    function mWnvN() {
        VNW[key_a] = mwN;
        VNW[numpad4] = mwN;
    };

    function MWnmw() {
        VNW[key_w] = mwN;
        VNW[numpad8] = mwN;
    };

    function WNwVV() {
        VNW[key_s] = mwN;
        VNW[numpad2] = mwN;
    };

    function isLeft() {
        return VNW[key_a] || VNW[numpad4];
    };

    function isRight() {
        return VNW[key_d] || VNW[numpad6];
    };

    function isBottom() {
        return VNW[key_s] || VNW[numpad2];
    };

    function isTop() {
        return VNW[key_w] || VNW[numpad8];
    };

    function isShift() {
        return VNW[keyshift];
    };

    function isKey(WmVNW) {
        return VNW[WmVNW];
    };

    function clearDirectionnal() {
        VNW[key_d] = mwN;
        VNW[numpad6] = mwN;
        VNW[key_a] = mwN;
        VNW[numpad4] = mwN;
        VNW[key_w] = mwN;
        VNW[numpad8] = mwN;
        VNW[key_s] = mwN;
        VNW[numpad2] = mwN;
    };

    function LocalKeyboardEvent() {
        this.keyCode = 0;
        this.charCode = 0;
        this.altKey = false;
        this.ctrlKey = false;
        this.preventDefault = function() {};
    };
    MVvNV = localStorage2.getItem("keyboardMap");
    if (MVvNV === null) {
        var nVmWN = window.navigator.language || window.navigator.userLanguage;
        if ((nVmWN === "fr") || (nVmWN === "fr-FR"))
            setAzerty();
        else
            setQwert();
    } else if (MVvNV === WWWNw)
        setAzerty();
    else
        setQwert();
    return {

        setAzerty:          setAzerty,
        setQwert:           setQwert,
        keyup:              keyup,
        keydown:            keydown,
        clearDirectionnal:  clearDirectionnal,
        isLeft:             isLeft,
        isRight:            isRight,
        isBottom:           isBottom,
        isTop:              isTop,
        isAzerty:           isAzerty,
        isQwerty:           isQwerty,
        isShift:            isShift,
        isKey:              isKey,
        LocalKeyboardEvent: LocalKeyboardEvent
    };

})();
var AudioUtils = (function() {
    var WMNnN = 30000;
    var nnnMV = 300;
    window.AudioContext = window.AudioContext || window.webkitAudioContext;
    var NVNWw = new window.AudioContext;
    if (!NVNWw.createGain)
        NVNWw.createGain = NVNWw.vVWMM;
    VvNWN = null;
    WVVnV = null;
    mvWnN = [];
    MmVnn = null;
    NnwNv = null;

    function getLastRecord() {
        return MmVnn;
    };

    function initStream() {
        VvNWN = NVNWw.createMediaStreamDestination();
        WVVnV = new window.MediaRecorder(VvNWN.stream);
        WVVnV.ondataavailable = function(event) {
            mvWnN.push(event.data);
        };
        WVVnV.onstop = function(event) {
            var VwNMM = window.JSON.parse('{ "type" : "audio/ogg; codecs=opus" }');
            NnwNv = new window.Blob(mvWnN, VwNMM);
            MmVnn = window.URL.createObjectURL(NnwNv);
        };
    };

    function startRecordStream() {
        NnwNv = null;
        MmVnn = null;
        mvWnN = [];
        WVVnV.start();
    };

    function stopRecordStream() {
        WVVnV.stop();
    };
    var options = {
        VWVWW: 1,
        nNmMV: 1
    };
    try {
        var vW = localStorage2.getItem("isFx");
        if (vW !== null)
            options.VWVWW = window.Number(vW);
        else if (isTouchScreen === 1)
            options.VWVWW = 0;
        vW = localStorage2.getItem("isAudio");
        if (vW !== null)
            options.nNmMV = window.Number(vW);
        else if (isTouchScreen === 1)
            options.nNmMV = 0;
    } catch (error) {
        if (isTouchScreen === 1) {
            options.VWVWW = 0;
            options.nNmMV = 0;
        }
    }

    function setAudio(vW) {
        if ((vW === 0) && (options.nNmMV !== vW)) {
            for (var mmnNv in AudioUtils.audio) {
                var audio = AudioUtils.audio[mmnNv];
                stopSound(audio);
            }
        }
        options.nNmMV = vW;
        localStorage2.setItem("isAudio", "" + vW);
    };

    function setFx(vW) {
        if ((vW === 0) && (options.VWVWW !== vW)) {
            for (var Nnnmm in AudioUtils._fx) {
                var _fx = AudioUtils._fx[Nnnmm];
                stopSound(_fx);
            }
        }
        options.VWVWW = vW;
        localStorage2.setItem("isFx", "" + vW);
    };

    function playFx(_fx, VwV, dist, NwnmN) {
        if (dist > nnnMV)
            return;
        VwV = (1 - (dist / nnnMV)) * VwV;
        _fx.volume = VwV;
        playSound(_fx, 0, NwnmN);
        _fx.run = 0;
    };

    function Sound(mMm, VwV, nMnwM, _fx) {
        this.url = mMm;
        this.buffer = null;
        this.source = null;
        this.isLoaded = 0;
        this.run = 0;
        this.mwnnM = null;
        this.loop = nMnwM;
        this.volume = 1;
        this.wNvnw = -1;
        if (VwV !== window.undefined)
            this.volume = VwV;
        this.vVNVm = -1;
        this._fx = 0;
        if (_fx === 1)
            this._fx = 1;
        this.Nvmvn = 0;
        this.wNnwn = 0;
        this.MNnVm = 0;
        this.start = 0;
        this.nvnWn = 0;
    };

    function changeVolume(sound, vW) {
        sound.mwnnM.gain.value = vW;
        sound.volume = vW;
    };

    function stopSound(sound) {
        if (sound.run === 1) {
            sound.run = 0;
            sound.wNvnw = -1;
            sound.source.stop();
            window.console.log("Stop", sound.url);
        }
    };

    function fadeSound(sound, nnW, effect) {
        if (sound.vVNVm !== -1)
            sound.volume = sound.vVNVm;
        sound.Nvmvn = 0;
        sound.wNnwn = nnW;
        sound.MNnVm = effect;
        window.console.log("FADE", sound.url);
    };

    function playSound(sound, nnW, NwnmN) {
        if (sound._fx === 0) {
            if (options.nNmMV === 0)
                return;
        } else if (options.VWVWW === 0)
            return;
        if (sound.run === 1) {
            if (((sound.wNvnw !== -1) && (sound.wNnwn === 0)) && ((previousTimestamp - sound.wNvnw) > WMNnN)) {
                stopSound(sound);
                return;
            }
            if (sound.wNnwn > 0) {
                sound.Nvmvn = window.Math.min(sound.Nvmvn + delta, sound.wNnwn);
                var VwV = window.Math.max(0, window.Math.min(1, sound.volume + (window.Math.cos(((1 - (sound.Nvmvn / sound.wNnwn)) * 0.5) * window.Math.PI) * sound.MNnVm)));
                sound.mwnnM.gain.value = VwV;
                sound.vVNVm = VwV;
                if (sound.Nvmvn === sound.wNnwn) {
                    sound.volume = VwV;
                    sound.vVNVm = -1;
                    sound.wNnwn = 0;
                    sound.Nvmvn = 0;
                    if (sound.volume === 0)
                        sound.wNvnw = previousTimestamp;
                    else
                        sound.wNvnw = -1;
                }
            }
            return;
        }
        if (((sound.wNnwn === 0) && (sound.Nvmvn === 0)) && (sound.volume === 0))
            return;
        if (sound.isLoaded !== 1) {
            loadSound(sound);
            return;
        }
        var WNm = NVNWw.createBufferSource();
        var mwnnM = NVNWw.createGain();
        sound.source = WNm;
        sound.mwnnM = mwnnM;
        changeVolume(sound, sound.volume);
        WNm.buffer = sound.buffer;
        WNm.connect(mwnnM);
        if (VvNWN !== null)
            WNm.connect(VvNWN);
        mwnnM.connect(NVNWw.destination);
        if (sound.loop === true)
            WNm.loop = sound.loop;
        if (!WNm.stop)
            WNm.stop = WNm.vwwnN;
        if (!WNm.start)
            WNm.start = WNm.vWwMw;
        sound.source.start(((NwnmN === window.undefined) ? 0 : NwnmN) + NVNWw.currentTime, (nnW === window.undefined) ? 0 : nnW);
        sound.run = 1;
        sound.start = previousTimestamp;
        window.console.log("Start", sound.url, sound.Nvmvn, sound.wNnwn, nnW);
    };

    function loadSound(sound) {
        if (sound.isLoaded === 2)
            return;
        window.console.log("LOAD", sound);
        var VNvNM = new window.XMLHttpRequest;
        VNvNM.open('GET', sound.url, true);
        VNvNM.responseType = 'arraybuffer';
        VNvNM.onload = function() {
            NVNWw.decodeAudioData(VNvNM.response, function(WNNNm) {
                sound.buffer = WNNNm;
                sound.isLoaded = 1;
                sound.nvnWn = WNNNm.duration * 1000;
            });
        };
        sound.isLoaded = 2;
        VNvNM.send();
        return;
    };
    return {
        Sound:              Sound,
        loadSound:          loadSound,
        playSound:          playSound,
        playFx:             playFx,
        stopSound:          stopSound,
        fadeSound:          fadeSound,
        changeVolume:       changeVolume,
        options:            options,
        setAudio:           setAudio,
        setFx:              setFx,
        initStream:         initStream,
        startRecordStream:  startRecordStream,
        stopRecordStream:   stopRecordStream,
        getLastRecord:      getLastRecord,
        audio:              {},
        _fx:                {}
    };
})();
var Loader = (function() {
    var mwnMm;

    function init() {
        mwnMm = GUI.createBackground(423, 276, "img/loading1.png");
    };
    var MVv;
    var NWV = new Mouse.LocalMouseEvent;
    var nNw = new Keyboard.LocalKeyboardEvent;
    var VWm = 800;
    var WWN = 0;
    var VNvnM = function(mMn) {
        return MathUtils.Ease.speedLimit(mMn, MathUtils.Ease.inQuart, 0.05);
    };
    var Nmv = 800;
    var mwm = 0;
    var WVWWm = function(mMn) {
        return MathUtils.Ease.speedLimit(mMn, MathUtils.Ease.outQuart, 0.05);
    };
    var WwM = 0;
    var MNw = 0;
    var mwn = window.undefined;

    function run() {
        CanvasUtils.setRenderer(Loader);
        MNw = Nmv;
        WwM = Nmv;
        mwn = WVWWm;
        mwm = 1;
        update();
    };

    function quit(wMN) {
        MVv = wMN;
        MNw = VWm;
        WwM = VWm;
        mwn = VNvnM;
        WWN = 1;
    };

    function update() {
        var vMm = 0;
        var wwv = 0;
        if (MNw > 0) {
            wwv = canh;
            var transition = mwn(1 - (MNw / WwM));
            if (transition === 1)
                MNw = 0;
            if (WWN === 1)
                transition *= -1;
            else
                transition = 1 - window.Math.abs(transition);
            vMm *= transition;
            wwv *= transition;
        }
        mwnMm.pos.x = (canw2 - window.Math.floor(211 * scaleby)) + vMm;
        mwnMm.pos.y = window.Math.max(0, canh2 - window.Math.floor(138 * scaleby)) + wwv;
    };

    function draw() {
        if (MMVwV() === 0)
            return;
        ctx.clearRect(0, 0, canw, canh);
        mwnMm.draw();
    };

    function MMVwV() {
        if (WWN === 1) {
            update();
            if (MNw < 0) {
                WWN = 0;
                MVv.run();
                return 0;
            }
            MNw -= delta;
        } else if (mwm === 1) {
            update();
            if (MNw < 0) {
                mwm = 0;
                Loader.getURLData = function(_name) {
                    WwWVn = window.location.href;
                    _name = _name.replace(/[\[]/, "\[").replace(/[\]]/, "\]");
                    var mwVmN = ("[\?&]" + _name) + "=([^&#]*)";
                    var WVnmn = new window.RegExp(mwVmN);
                    var MwNMw = WVnmn.exec(WwWVn);
                    return (MwNMw === null) ? null : MwNMw[1];
                };

                function vvWNV() {

                    var serverList = Client.serverList;

                    Home.regions = [];
                    Home.privateServer = [];
                    Home.ghoulServer = [];

                    var regions = [];
                    var MNmMv = [];
                    var NnMvV = 0;
                    var NvNnM = '<select id="servers"><option value="auto">Auto Select Server</option>';

                    for (var i = 0; i < serverList.length; i++) {
                        var MNv = serverList[i][4];
                        var playerNumber = serverList[i][5];
                        var ghl = serverList[i][6];
                        NnMvV += playerNumber;

                        if (ghl === ["ghoul"]) {
                            Home.ghoulServer.push(i);
                            continue;
                        }

                        if (ghl === ["br"]) {
                            MNv = MNv.replace("BR", "");
                            if (Home.regions[MNv] === window.undefined)
                                Home.regions[MNv] = [];
                            Home.regions[MNv].push(i);
                            continue;
                        }

                        for (var j = 0; j < regions.length; j++) {
                            if (regions[j] === MNv) {
                                MNmMv[j] += playerNumber;
                                j = -1;
                                break;
                            }
                        }

                        if (j !== -1) {
                            regions.push(MNv);
                            MNmMv.push(playerNumber);
                        }

                    }
                    var MnNwN = 1;
                    var VVmNN = 0;

                    for (i = 0; i < regions.length; i++) {
                        MNv = regions[i];
                        NvNnM += ((("<option disabled>" + regions[i]) + "  - ") + MNmMv[i]) + "  players</option>";
                        MnNwN++;
                        var Wn = 1;
                        for (j = 0; j < serverList.length; j++) {
                            if (serverList[j][4] === MNv && serverList[j][6] === 'survival') {
                                NvNnM += ((((((('<option value="' + serverList[j][0]) + '">') + regions[i]) + " ") + (Wn++)) + "  - ") + serverList[j][5]) + "  players</option>";
                                if (Client.selectedServer === j)
                                    VVmNN = MnNwN;
                                MnNwN++;
                            }
                        }
                    }
                    
                    Home.htmlBattleRoyale = '<select id="servers"><option value="auto">Auto Select Server</option>';
                    for (var i in Home.regions) {
                        var MnNwN = 0;
                        for (var nMm = 0; nMm < Home.regions[i].length; nMm++)
                            MnNwN += serverList[Home.regions[i][nMm]][5];
                        //Home.htmlBattleRoyale += ((((('<option value="' + i) + '">') + i) + "  - ") + MnNwN) + "  players</option>";
                    }
                    Home.privateServer = Home.privateServer.sort(function(WVm, M) {
                        return window.Number(serverList[M][5]) - window.Number(serverList[WVm][5]);
                    });
                    Home.htmlPrivateServer = '<select id="servers"><option value="auto">Auto Select Server</option>';
                    for (var i in Home.privateServer) {
                        Home.htmlPrivateServer += ((((('<option value="' + i) + '">') + serverList[Home.privateServer[i]][4].replace("PRIV", "")) + "  - ") + serverList[Home.privateServer[i]][5]) + "  players</option>";
                    }
                    Home.htmlGhoulServer = '<select id="servers"><option value="auto">Auto Select Server</option>';
                    for (var i in Home.ghoulServer) {
                        Home.htmlGhoulServer += ('<option value="' + serverListserverList[Home.ghoulServer[i]][0] + '">' + serverList[Home.ghoulServer[i]][4].replace("GHOUL", "") + "  - " + serverList[Home.ghoulServer[i]][5]) + "  players</option>";
                    }
                    NvNnM += ("<option disabled>All servers  - " + NnMvV) + "  players</option></select>";
                    Home.htmlBattleRoyale += ("<option disabled>All servers  - " + NnMvV) + "  players</option></select>";
                    Home.htmlPrivateServer += ("<option disabled>All servers  - " + NnMvV) + "  players</option></select>";
                    Home.htmlGhoulServer += ("<option disabled>All servers  - " + NnMvV) + "  players</option></select>";

                    window.document.getElementById("serverList").innerHTML = NvNnM;
                    window.document.getElementById("servers").selectedIndex = VVmNN;
                    
                    World.PLAYER.admin = 1; //added just taked from beloved if, whatever xD

                    if (((Loader.getURLData("admin") !== null) || (Loader.getURLData("member") !== null)) || (Loader.getURLData("moderator") !== null)) {
                        if ((Loader.getURLData("admin") !== null) || (Loader.getURLData("moderator") !== null)) {
                            World.PLAYER.admin = 1;
                            window.document.getElementById("chatInput").maxLength = 1000000;
                        }
                        window.document.getElementById("nickname").innerHTML += '<input id="passwordInput" type="password" placeholder="Password" maxLength="16">';
                        var password = localStorage2.getItem("password");
                        if (password !== null) window.document.getElementById("passwordInput").value = password;
                    }

                    var port = Loader.getURLData("port");
                    var ip = Loader.getURLData("ips");
                    if (ip !== null) {
                        ip = ip.replace(/\./g, '-');
                        var selectedServer = window.Number(window.document.getElementById("servers").value);
                        Client.serverList[selectedServer][0] = ip;
                        Client.serverList[selectedServer][1] = ip + ".devast.io";
                        Client.serverList[selectedServer][2] = (port === null) ? "443" : port;
                        Client.serverList[selectedServer][3] = 1;
                    }
                    ip = Loader.getURLData("ip");
                    if (ip !== null) {
                        ip = ip.replace(/\./g, '-');
                        var selectedServer = window.Number(window.document.getElementById("servers").value);
                        Client.serverList[selectedServer][0] = ip;
                        Client.serverList[selectedServer][1] = ip;
                        Client.serverList[selectedServer][2] = (port === null) ? "8080" : port;
                        Client.serverList[selectedServer][3] = 0;
                    }
                };
                Client.types = ["BR", "PRIV", "HIDDEN", "GHOUL"];
                Client.getServerList(function() {
                    vvWNV();
                    Loader.quit(Home);
                });
                var vvwMM = ENTITIES[__ENTITIE_EXPLOSION__].explosions;
                var NWvwV = ENTITIES2[__ENTITIE_EXPLOSION__].explosions;
                for (var i = 0; i < vvwMM.length; i++) {
                    vvwMM[i].W = CanvasUtils.loadImage(vvwMM[i].src, vvwMM[i].W);
                    NWvwV[i].W = CanvasUtils.loadImage(NWvwV[i].src, NWvwV[i].W);
                }
            }
            MNw -= delta;
        }
        return 1;
    };
    return {
        quit:   quit,
        init:   init,
        run:    run,
        update: update,
        draw:   draw
    };
})();
var Home = (function() {

    function joinServer() {
        try {
            window.document.getElementsByClassName("ympb_target")[0].id;
            window.document.getElementById("trevda").id;
            window.document.getElementById("preroll").id;
        } catch (error) {
            Home.adblocker = 1;
        }
        try {
            if (((World.PLAYER.admin !== 1) && (typeof window["YMPB"] !== 'undefined')) && (typeof window["YMPB"]["preroll"] !== 'undefined')) {
                if (Home.waitAds === 1) return;
                if (Home.ads === 1) {
                    AudioManager.cutTitleMusic();
                    window.document.getElementById("preroll").style.display = "block";
                    window["YMPB"]["preroll"]('preroll', function() {
                        Home.waitAds = 0;
                        Home.ads = -1;
                        Home.joinServer();
                    });
                    Home.waitAds = 1;
                    return;
                }
            }
        } catch (error) {}
      
        var board;
        if (Home.gameMode === World['__SURVIVAL__'])
            board = 'survival';
        else {
            if (Home.gameMode === World['__GHOUL__'])
                board = 'ghoul';
            else {
                if (Home.gameMode === World['__BR__'])
                    board = 'br';
                else
                    throw new Error('Unknown game mode',Home.gameMode);
            }
        }

        var _lobbys = document.getElementById('servers').value,
        lobbiesFind,
        _modes;
        
        _lobbys == 'auto' ? (lobbiesFind = 'https://matchmaker.api.rivet.gg/v1/lobbies/find',

        _modes = { 'game_modes': [board] }) : (lobbiesFind = 'https://matchmaker.api.rivet.gg/v1/lobbies/join',

        _modes = { 'lobby_id': _lobbys });

        Client['joiningServer'] = !![];
        let _0x521bb0 = {};
        _0x521bb0['Accept'] = 'application/json',
        _0x521bb0['Content-Type'] = 'application/json',
        window['RIVET_TOKEN'] && (_0x521bb0['Authorization'] = 'Bearer' + window['RIVET_TOKEN']),
        fetch(lobbiesFind, {
            'method': 'POST',
            'headers': _0x521bb0,
            'body': JSON.stringify(_modes)
        })['then'](_0x4c43da=>{
            if (_0x4c43da['ok'])
                return _0x4c43da.json();
            else
                throw 'Failed to find lobby: ' + _0x4c43da['status'];
        }
        )['then'](_0x275829=>{
            let _0xc7afeb = _0x275829['lobby'];
            Client['selectedServer'] = Client['serverList']['findIndex'](_0x323660=>_0x323660[0x0] == _0xc7afeb['lobby_id']),
            Client['connectedLobby'] = _0xc7afeb,
            Client['startConnection'](document.getElementById('nicknameInput').value, 0, _0xc7afeb['player']['token']);
        }
        )['catch'](err=>{
            console.log('Failed to join server' + err);
        }
        );

    };

    function onError(Mnn) {};

    function quitGame() {
        quit(Game);
    };

    function onOpen() {
        quitGame();
    };
    var vmV = 0;

    function nnn(vV, WX, WY, angle, MMWWm, Mmwvn) {
        var MW = Entitie.get(0, vmV, vmV, vV);
        setEntitie(MW, 0, vmV, vmV, vV, WX, WY, WX, WY, (MMWWm << 5) + (Mmwvn << 10), angle, 1);
        vmV++;
    };

    function Vnvmv(vV, WX, WY, Rot, Mnn, subtype) {
        var MW = Entitie.get(0, vmV, vmV, vV);
        setEntitie(MW, 0, vmV, vmV, vV, WX, WY, WX, WY, (subtype << 7) + (Rot << 5), 0, Mnn);
        vmV++;
    };
    var NNN = 0;
    var mNMWw = {
        vNWVw: [{
            _name: 'Yuukun',
            button: ["img/yuukun0out.png", "img/yuukun0in.png", "img/yuukun0click.png"],
            WwWVn: "https://energy.youtube.com/watch?v=TyI_8Il64d8"
        }, {
            _name: 'eXistenZ',
            button: ["img/existenz5out.png", "img/existenz5in.png", "img/existenz5click.png"],
            WwWVn: "https://energy.youtube.com/watch?v=Seq6QGBTvNQ"
        }, {
            _name: 'Bubble Gum',
            button: ["img/bubblegum2out.png", "img/bubblegum2in.png", "img/bubblegum2click.png"],
            WwWVn: "https://youtu.be/fD7lx9zAQGU"
        }],
        NnVWM: [{
            _name: 'Devaster',
            button: ["img/devaster0out.png", "img/devaster0in.png", "img/devaster0click.png"],
            WwWVn: "https://energy.youtube.com/watch?v=Jpgx-d3qHzs"
        }]
    };
    var WVwwn = mNMWw.vNWVw;
    var vnmnw = window.navigator.language || window.navigator.userLanguage;
    if (vnmnw.toLowerCase().indexOf("fr") !== -1) WVwwn = mNMWw.NnVWM;
    var WWNWM = WVwwn[window.Math.floor(WVwwn.length * window.Math.random())];
    var mnMMV = [GUI.renderText(WWNWM._name, "'Viga', sans-serif", "#FFFFFF", 30, 150), GUI.renderText(WWNWM._name, "'Viga', sans-serif", "#C5B03C", 30, 150), GUI.renderText(WWNWM._name, "'Viga', sans-serif", "#9B800D", 30, 150)];
    mnMMV[0].isLoaded = 1;
    mnMMV[1].isLoaded = 1;
    mnMMV[2].isLoaded = 1;
    var wMMNm = GUI.createButton(mnMMV[0].wh, mnMMV[0].h2, window.undefined, mnMMV);
    var wvmwM = GUI.createButton(120, 67, WWNWM.button);
    var WnwMN = {
        W: null
    };
    var VmV;
    var mVwVw;
    var nickname;
    var vWmNN;
    var VWvmM;
    var playbutt;
    var NnnVw;
    var Wvwwv;
    var VMmWW;
    var serverList;
    var vnmmN;
    var wwMMw;
    var mwvwV;
    var NNnwN;
    var VNVnM;
    var nmnWW;
    var mmvWv;
    var mwnnv;
    var wnwvW;
    var MMNMM;
    var WWNNV;
    var NVn;
    var VNWMN;
    var VnmWw;
    var nMNNN;
    var vVNnM;
    var NvW;
    var VmwMm;
    var vvWWW;
    var wnm;
    var VMm;
    var WMmmM;
    var nvWwv;
    var WwWvv;
    var wvmmM;
    var mNVWV;
    var VMmWN;
    var vnvmm;
    var wWWwm;
    var privateServer;
    var vvmMm;
    var wMNWw;
    var trevdaStyle;
    var vWNNw;
    var VvVMm;
    var VwWMv;
    var vmWmN;

    function init() {
        Home.joinServer = joinServer;
        Home.ads = 1;
        Home.waitAds = 0;
        /*var WvMwn = new window.XMLHttpRequest;
        WvMwn.onreadystatechange = function() {
            if ((this.readyState === 4) && (this.status === 0)) {
                Home.adblocker = 1;
                window.document.getElementById("trevda").innerHTML = '<img src="./img/disable-to-get-bonus.png"></img>';
            }
        };
        WvMwn.open("GET", "https://api.adinplay.com/libs/aiptag/assets/adsbygoogle.js", true);
        WvMwn.send();
        */
        if (window.String(window.document.createElement).indexOf("createElement") === -1) Home.adblocker = 1;
        Home.gameMode = 0;
        Home.publicMode = 1;
        Home.alertId = 0;
        Home.alertDelay = 0;
        window.document.getElementById("nicknameInput").value = localStorage2.getItem("nickname", nickname);
        AudioUtils.fadeSound(AudioUtils.audio.title, 1000, AudioManager.musicVolume);
        Entitie.removeAll();
        Render.reset(1);
        vmV = 0;

        nnn(__ENTITIE_RESOURCES_DOWN__, 200, 0, 127, object.STONE, 3);
        nnn(__ENTITIE_RESOURCES_TOP__, 400, 100, 127, object.ORANGETREE, 2);
        nnn(__ENTITIE_RESOURCES_STOP__, 100, 100, 127, object.LEAFTREE, 0);
        Vnvmv(__ENTITIE_BUILD_GROUND__, 900, 500, 0, 33, IID.smelter);
        Vnvmv(__ENTITIE_BUILD_DOWN__, 800, 400, 1, 1, IID.workbench);
        nnn(__ENTITIE_RESOURCES_STOP__, 1100, 300, 10, object.LEAFTREE, 1);
        nnn(__ENTITIE_RESOURCES_STOP__, 800, 200, 127, object.LEAFTREE, 2);
        nnn(__ENTITIE_RESOURCES_STOP__, 700, 100, 127, object.LEAFTREE, 3);
        nnn(__ENTITIE_RESOURCES_STOP__, 1200, 0, 127, object.LEAFTREE, 0);
        nnn(__ENTITIE_RESOURCES_STOP__, 1300, 100, 127, object.LEAFTREE, 4);
        nnn(__ENTITIE_RESOURCES_STOP__, 1300, 300, 127, object.LEAFTREE, 2);
        nnn(__ENTITIE_RESOURCES_STOP__, 800, 500, 127, object.LEAFTREE, 4);
        nnn(__ENTITIE_RESOURCES_TOP__, 1000, 200, 127, object.ORANGETREE, 0);
        nnn(__ENTITIE_RESOURCES_STOP__, 700, 600, 127, object.LEAFTREE, 0);
        nnn(__ENTITIE_RESOURCES_STOP__, 500, 400, 127, object.LEAFTREE, 2);
        nnn(__ENTITIE_RESOURCES_DOWN__, 500, 700, 127, object.STONE, 3);
        nnn(__ENTITIE_RESOURCES_DOWN__, 1000, 300, 127, object.STONE, 4);
        nnn(__ENTITIE_RESOURCES_STOP__, 1300, 500, 100, object.LEAFTREE, 2);
        nnn(__ENTITIE_RESOURCES_STOP__, 1200, 700, 127, object.LEAFTREE, 4);
        nnn(__ENTITIE_RESOURCES_STOP__, 1300, 700, 127, object.LEAFTREE, 0);
        nnn(__ENTITIE_RESOURCES_DOWN__, 800, 600, 127, object.STONE, 5);
        nnn(__ENTITIE_RESOURCES_STOP__, 500, 600, 127, object.LEAFTREE, 4);
        nnn(__ENTITIE_RESOURCES_DOWN__, 200, 400, 127, object.URANIUM, 0);
        nnn(__ENTITIE_RESOURCES_DOWN__, 400, 500, 50, object.WOOD, 3);
        nnn(__ENTITIE_RESOURCES_STOP__, 100, 400, 190, object.LEAFTREE, 2);
        nnn(__ENTITIE_RESOURCES_STOP__, 100, 500, 190, object.LEAFTREE, 3);
        nnn(__ENTITIE_RESOURCES_STOP__, 100, 600, 127, object.LEAFTREE, 4);
        nnn(__ENTITIE_RESOURCES_STOP__, 0, 500, 127, object.LEAFTREE, 1);
        nnn(__ENTITIE_RESOURCES_STOP__, 200, 300, 50, object.LEAFTREE, 4);
        nnn(__ENTITIE_RESOURCES_STOP__, 400, 200, 10, object.LEAFTREE, 2);
        nnn(__ENTITIE_RESOURCES_STOP__, 500, 200, 10, object.LEAFTREE, 1);
        nnn(__ENTITIE_RESOURCES_STOP__, 100, 800, 10, object.LEAFTREE, 0);
        nnn(__ENTITIE_RESOURCES_STOP__, 400, 800, 10, object.LEAFTREE, 1);
        nnn(__ENTITIE_RESOURCES_STOP__, 700, 800, 10, object.LEAFTREE, 2);
        nnn(__ENTITIE_RESOURCES_DOWN__, 900, 700, 50, object.WOOD, 4);


        if (isTouchScreen === 1) VmV = GUI.createBackground(650, 312, "img/logo-homepage-mobile2.png");
        else VmV = GUI.createBackground(650, 312, "img/logo-homepage4.png");
        if (isTouchScreen === 1) mVwVw = GUI.createButton(0, 0);
        else mVwVw = GUI.createButton(94, 40, ["img/more-io-games-out.png", "img/more-io-games-in.png", "img/more-io-games-click.png"]);
        nickname = window.document.getElementById("nickname");
        vWmNN = nickname.style;
        VWvmM = {
            x: 0,
            y: 0
        };
        nickname.addEventListener("keyup", function(event) {
            if ((WWN | mwm) === 1) return;
            if (event.keyCode === 13) joinServer();
        }, false);

        playbutt = GUI.createButton(136, 57, ["img/play-button-out.png", "img/play-button-in.png", "img/play-button-click.png"]);

        NnnVw = window.document.getElementById("terms");
        Wvwwv = NnnVw.style;
        VMmWW = {
            x: 0,
            y: 0
        };
        serverList = window.document.getElementById("serverList");
        vnmmN = serverList.style;
        wwMMw = {
            x: 0,
            y: 0
        };
        serverList.addEventListener("mouseover", function(event) {
            if ((WWN | mwm) === 1) return;
        }, false);
        serverList.addEventListener("mousedown", function(event) {
            if ((WWN | mwm) === 1) return;
        }, false);
        serverList.addEventListener("mouseup", function(event) {
            if ((WWN | mwm) === 1) return;
        }, false);
        if (isTouchScreen === 1) mwvwV = GUI.createBackground(0, 0);
        else mwvwV = GUI.createBackground(230, 235, "img/changelogBox.png");
        NNnwN = window.document.getElementById("changelog");
        VNVnM = NNnwN.style;
        nmnWW = {
            x: 0,
            y: 0
        };
        if (isTouchScreen === 1) mmvWv = GUI.createBackground(0, 0);
        else mmvWv = GUI.createBackground(230, 355, "img/commandsBox.png");
        mwnnv = window.document.getElementById("howtoplay");
        wnwvW = mwnnv.style;
        MMNMM = {
            x: 0,
            y: 0
        };
        if (isTouchScreen === 1) WWNNV = GUI.createBackground(0, 0);
        else WWNNV = GUI.createBackground(123, 55, "img/ameMade.png");
        if (isTouchScreen === 1) NVn = GUI.createButton(0, 0);
        else NVn = GUI.createButton(40, 38, ["img/twitter-button-out.png", "img/twitter-button-in.png", "img/twitter-button-click.png"]);
        if (isTouchScreen === 1) VNWMN = GUI.createButton(0, 0);
        else VNWMN = GUI.createButton(40, 38, ["img/facebook-button-out.png", "img/facebook-button-in.png", "img/facebook-button-click.png"]);
        if (isTouchScreen === 1) VnmWw = GUI.createButton(0, 0);
        else VnmWw = GUI.createButton(40, 38, ["img/youtube-button-out.png", "img/youtube-button-in.png", "img/youtube-button-click.png"]);
        if (isTouchScreen === 1) nMNNN = GUI.createButton(0, 0);
        else nMNNN = GUI.createButton(54, 54, ["img/home-reddit-button-out.png", "img/home-reddit-button-in.png", "img/home-reddit-button-click.png"]);
        if (isTouchScreen === 1) vVNnM = GUI.createButton(0, 0);
        else vVNnM = GUI.createButton(54, 54, ["img/home-discord-button-out.png", "img/home-discord-button-in.png", "img/home-discord-button-click.png"]);
        NvW = GUI.createButton(93, 51, ["img/survivalmode-button-out.png", "img/survivalmode-button-in.png", "img/survivalmode-button-click.png"]);
        VmwMm = GUI.createButton(93, 51, ["img/battle-royale-button-out.png", "img/battle-royale-button-in.png", "img/battle-royale-button-click.png"]);
        vvWWW = GUI.createButton(93, 51, ["img/ghoul-mode-button-out.png", "img/ghoul-mode-button-in.png", "img/ghoul-mode-button-click.png"]);
        wnm = GUI.createButton(68, 34, ["img/private-server-button-out.png", "img/private-server-button-in.png", "img/private-server-button-click.png"]);
        VMm = GUI.createButton(68, 34, ["img/public-server-button-out.png", "img/public-server-button-in.png", "img/public-server-button-click.png"]);
        if (isTouchScreen === 1) WMmmM = GUI.createBackground(0, 0);
        else WMmmM = GUI.createBackground(171, 432, "img/featured.png");
        if (isTouchScreen === 1) nvWwv = GUI.createButton(0, 0);
        else nvWwv = GUI.createButton(60, 60, ["img/home-limaxio-out.png", "img/home-limaxio-in.png", "img/home-limaxio-click.png"]);
        if (isTouchScreen === 1) WwWvv = GUI.createButton(0, 0);
        else WwWvv = GUI.createButton(60, 60, ["img/home-oibio-out.png", "img/home-oibio-in.png", "img/home-oibio-click.png"]);
        if (isTouchScreen === 1) wvmmM = GUI.createButton(0, 0);
        else wvmmM = GUI.createButton(60, 60, ["img/home-starveio-out.png", "img/home-starveio-in.png", "img/home-starveio-click.png"]);
        if (isTouchScreen === 1) mNVWV = GUI.createButton(0, 0);
        else mNVWV = GUI.createButton(60, 60, ["img/home-nendio-out.png", "img/home-nendio-in.png", "img/home-nendio-click.png"]);
        VMmWN = window.document.getElementById("featuredVideo");
        vnvmm = VMmWN.style;
        wWWwm = {
            x: 0,
            y: 0
        };
        if (isTouchScreen === 1) privateServer = GUI.createButton(0, 0);
        else privateServer = GUI.createButton(86, 48, ["img/privateserver-button-out.png", "img/privateserver-button-in.png", "img/privateserver-button-click.png"]);
        if (isTouchScreen === 1) vvmMm = GUI.createButton(0, 0);
        else vvmMm = GUI.createButton(52, 42, ["img/map-editor-button-out.png", "img/map-editor-button-in.png", "img/map-editor-button-click.png"]);
        wMNWw = window.document.getElementById("trevda");
        trevdaStyle = wMNWw.style;
        vWNNw = {
            x: 0,
            y: 0
        };
        VvVMm = window.document.getElementById("preroll");
        VwWMv = VvVMm.style;
        vmWmN = {
            x: 0,
            y: 0
        };
    };
    var MVv;
    var NWV = new Mouse.LocalMouseEvent;
    var nNw = new Keyboard.LocalKeyboardEvent;
    var VWm = 800;
    var WWN = 0;
    var VNvnM = function(mMn) {
        return MathUtils.Ease.speedLimit(mMn, MathUtils.Ease.inQuart, 0.05);
    };
    var Nmv = 2000;
    var mwm = 0;
    var WVWWm = function(mMn) {
        return MathUtils.Ease.speedLimit(mMn, MathUtils.Ease.outQuart, 0.05);
    };
    var WwM = 0;
    var MNw = 0;
    var mwn = window.undefined;

    function run() {
        Client.onError = onError;
        Client.onOpen = onOpen;
        World.PLAYER.isBuilding = 0;
        World.PLAYER.id = 0;
        Render.setDetection(0);
        Render.stopPoisonEffect();
        if (Home.gameMode === 1) {
            VMm.hide();
            wnm.hide();
        }
        Home.trevdaStyle = trevdaStyle;
        if (isTouchScreen === 1) {
            wMMNm.hide();
            wvmwM.hide();
            vvmMm.hide();
        }
        CanvasUtils.setRenderer(Home);
        MNw = Nmv;
        WwM = Nmv;
        mwn = WVWWm;
        mwm = 1;
        update();
        vWmNN.display = "inline-block";
        if (isTouchScreen === 0) Wvwwv.display = "inline-block";
        vnmmN.display = "inline-block";
        if (isTouchScreen === 0) VNVnM.display = "inline-block";
        if (isTouchScreen === 0) wnwvW.display = "inline-block";
        if (isTouchScreen === 0) vnvmm.display = "inline-block";
    };

    function quit(wMN) {
        MVv = wMN;
        VVwMW();
        MNw = VWm;
        WwM = VWm;
        mwn = VNvnM;
        WWN = 1;
    };

    function update() {
        var vMm = 0;
        var wwv = 0;
        if (MNw > 0) {
            wwv = canh;
            var transition = mwn(1 - (MNw / WwM));
            if (transition === 1) MNw = 0;
            if (mwm === 1) transition = 1 - window.Math.abs(transition);
            vMm *= transition;
            wwv *= transition;
        }
        VmV.pos.x = ((canw2 - window.Math.floor(325 * scaleby)) + window.Math.floor(((isTouchScreen === 0) ? -30 : -70) * scaleby)) - vMm;
        VmV.pos.y = window.Math.max(0, (canh2 - window.Math.floor(156 * scaleby)) + window.Math.floor(((isTouchScreen === 0) ? -150 : -150) * scaleby)) - wwv;
        mVwVw.pos.x = window.Math.floor(5 * scaleby) + vMm;
        mVwVw.pos.y = ((canh - window.Math.floor(40 * scaleby)) + window.Math.floor(-5 * scaleby)) + wwv;
        VWvmM.x = ((canw2 - window.Math.floor(91 * scaleby)) + window.Math.floor(((isTouchScreen === 0) ? -6.8 : -47.5) * scaleby)) - vMm;
        vWmNN.left = VWvmM.x + "px";
        VWvmM.y = VmV.pos.y + window.Math.floor(143 * scaleby);
        vWmNN.top = VWvmM.y + "px";
        playbutt.pos.x = VmV.pos.x + window.Math.floor(290 * scaleby);
        playbutt.pos.y = VmV.pos.y + window.Math.floor(235 * scaleby);
        VMmWW.x = (canw - 85) + vMm;
        Wvwwv.left = VMmWW.x + "px";
        VMmWW.y = ((canh - 17) + window.Math.floor(-10 * scaleby)) + wwv;
        Wvwwv.top = VMmWW.y + "px";
        wwMMw.x = ((canw2 - window.Math.floor(100 * scaleby)) + window.Math.floor(((isTouchScreen === 0) ? 12.8 : -26.5) * scaleby)) - vMm;
        vnmmN.left = wwMMw.x + "px";
        wwMMw.y = VWvmM.y + window.Math.floor(45 * scaleby);
        vnmmN.top = wwMMw.y + "px";
        mwvwV.pos.x = ((canw - window.Math.floor(230 * scaleby)) + window.Math.floor(7 * scaleby)) - vMm;
        mwvwV.pos.y = -wwv;
        nmnWW.x = ((canw - 200) + window.Math.floor(-10 * scaleby)) - vMm;
        VNVnM.left = nmnWW.x + "px";
        nmnWW.y = window.Math.floor(20 * scaleby) - wwv;
        VNVnM.top = nmnWW.y + "px";
        mmvWv.pos.x = mwvwV.pos.x;
        mmvWv.pos.y = mwvwV.pos.y + window.Math.floor(230 * scaleby);
        MMNMM.x = ((canw - 200) + window.Math.floor(-10 * scaleby)) - vMm;
        wnwvW.left = MMNMM.x + "px";
        MMNMM.y = nmnWW.y + window.Math.floor(215 * scaleby);
        wnwvW.top = MMNMM.y + "px";
        WWNNV.pos.x = window.Math.floor(15 * scaleby) - vMm;
        WWNNV.pos.y = window.Math.floor(5 * scaleby) - wwv;
        NVn.pos.x = WWNNV.pos.x + window.Math.floor(-5 * scaleby);
        NVn.pos.y = WWNNV.pos.y + window.Math.floor(55 * scaleby);
        VNWMN.pos.x = NVn.pos.x + window.Math.floor(45 * scaleby);
        VNWMN.pos.y = NVn.pos.y;
        VnmWw.pos.x = VNWMN.pos.x + window.Math.floor(45 * scaleby);
        VnmWw.pos.y = NVn.pos.y;
        nMNNN.pos.x = VmV.pos.x + window.Math.floor(26 * scaleby);
        nMNNN.pos.y = VmV.pos.y + window.Math.floor(36 * scaleby);
        vVNnM.pos.x = nMNNN.pos.x + window.Math.floor(83.5 * scaleby);
        vVNnM.pos.y = nMNNN.pos.y;
        NvW.pos.x = playbutt.pos.x + window.Math.floor(213 * scaleby);
        NvW.pos.y = playbutt.pos.y + window.Math.floor(-98 * scaleby);
        VmwMm.pos.x = NvW.pos.x;
        VmwMm.pos.y = NvW.pos.y + window.Math.floor(60 * scaleby);
        vvWWW.pos.x = NvW.pos.x;
        vvWWW.pos.y = NvW.pos.y + window.Math.floor(60 * scaleby);
        wnm.pos.x = playbutt.pos.x + window.Math.floor(-126 * scaleby);
        wnm.pos.y = playbutt.pos.y + window.Math.floor(-58 * scaleby);
        VMm.pos.x = wnm.pos.x;
        VMm.pos.y = wnm.pos.y + window.Math.floor(-37 * scaleby);
        WMmmM.pos.x = NVn.pos.x;
        WMmmM.pos.y = NVn.pos.y + window.Math.floor(50 * scaleby);
        nvWwv.pos.x = NVn.pos.x + window.Math.floor(21.5 * scaleby);
        nvWwv.pos.y = NVn.pos.y + window.Math.floor(72 * scaleby);
        WwWvv.pos.x = nvWwv.pos.x;
        WwWvv.pos.y = nvWwv.pos.y + window.Math.floor(70 * scaleby);
        wvmmM.pos.x = WwWvv.pos.x;
        wvmmM.pos.y = WwWvv.pos.y + window.Math.floor(69 * scaleby);
        mNVWV.pos.x = wvmmM.pos.x;
        mNVWV.pos.y = wvmmM.pos.y + window.Math.floor(69 * scaleby);
        wWWwm.x = mNVWV.pos.x + window.Math.floor(15 * scaleby);
        vnvmm.left = wWWwm.x + "px";
        wWWwm.y = mNVWV.pos.y + window.Math.floor(83 * scaleby);
        vnvmm.top = wWWwm.y + "px";
        privateServer.pos.x = VMm.pos.x + window.Math.floor(-120 * scaleby);
        privateServer.pos.y = VMm.pos.y + window.Math.floor(41 * scaleby);
        vvmMm.pos.x = privateServer.pos.x + window.Math.floor(-8.5 * scaleby);
        vvmMm.pos.y = privateServer.pos.y + window.Math.floor(-53 * scaleby);
        vWNNw.x = canw2 - window.Math.floor(150 * scaleby);
        trevdaStyle.left = vWNNw.x + "px";
        vWNNw.y = VWvmM.y + window.Math.floor(130 * scaleby);
        trevdaStyle.top = vWNNw.y + "px";
        var mVvwv = window.Math.min(scaleby, 1);
        var pos = (VWvmM.y + wwv) + (170 * scaleby);
        window.document.getElementById("trevda").style.left = window.Math.floor(canw2 - (325 * mVvwv)) + "px";
        window.document.getElementById("trevda").style.top = window.Math.floor(pos + (((mVvwv * 250) - 250) / 2)) + "px";
        window.document.getElementById("trevda").style.transform = ("scale(" + mVvwv) + ")";
        var mwNww = window.document.getElementById("nicknameInput").style;
        var SY = window.Math.floor(220 * scaleby);
        var SX = window.Math.floor(35 * scaleby);
        SX = SX + "px";
        SY = SY + "px";
        vWmNN.width = SY;
        vWmNN.height = SX;
        mwNww["borderWidth"] = window.Math.floor(3 * scaleby) + "px";
        mwNww.width = SY;
        mwNww.height = SX;
        mwNww.fontSize = window.Math.floor(18 * scaleby) + "px";
        if ((Loader.getURLData("ips") !== null) || (Loader.getURLData("ip") !== null)) {
            vnmmN.display = "none";
            NvW.pos.y = -500;
            VmwMm.pos.y = -500;
            vvWWW.pos.y = -500;
            wnm.pos.y = -500;
            VMm.pos.y = -500;
            if (Loader.getURLData("admin") !== null) wMNWw.display = "none";
        }
        if (window.document.getElementById("passwordInput") !== null) {
            var VNNvn = window.document.getElementById("passwordInput").style;
            var SY = window.Math.floor(220 * scaleby);
            var SX = window.Math.floor(35 * scaleby);
            var MMM = window.Math.floor(canw2 - (SY / 2)) + "px";
            SX = SX + "px";
            SY = SY + "px";
            VNNvn.width = SY;
            VNNvn.height = SX;
            VNNvn.left = MMM;
            VNNvn["borderWidth"] = window.Math.floor(3 * scaleby) + "px";
            VNNvn.width = SY;
            VNNvn.height = SX;
            VNNvn.fontSize = window.Math.floor(18 * scaleby) + "px";
            VNNvn["marginTop"] = window.Math.floor(4 * scaleby) + "px";
        };
        SY = window.Math.floor(200 * scaleby);
        SX = window.Math.floor(28 * scaleby);
        SX = SX + "px";
        SY = SY + "px";
        vnmmN.width = SY;
        vnmmN.height = SX;
        vnmmN["backgroundSize"] = window.Math.floor(17 * scaleby) + "px";
        var nVvNv = window.document.getElementById("servers").style;
        SY = window.Math.floor(230 * scaleby) + "px";
        SX = window.Math.floor(28 * scaleby) + "px";
        nVvNv.width = SY;
        nVvNv.height = SX;
        nVvNv.fontSize = window.Math.floor(13 * scaleby) + "px";
        SY = window.Math.floor(185 * scaleby);
        SX = window.Math.floor(17 * scaleby);
        MMM = window.Math.floor(canw - SY) + "px";
        SX = SX + "px";
        SY = SY + "px";
        _top = (window.Math.floor(canh - (18 * scaleby)) + wwv) + "px";
        Wvwwv.width = SY;
        Wvwwv.height = SX;
        Wvwwv.left = MMM;
        Wvwwv.top = _top;
        Wvwwv.fontSize = window.Math.floor(11 * scaleby) + "px";
        SY = window.Math.floor(197 * scaleby);
        SX = window.Math.floor(250 * scaleby);
        MMM = window.Math.floor(canw - (205 * scaleby)) + "px";
        SX = SX + "px";
        SY = SY + "px";
        VNVnM.width = SY;
        VNVnM.height = SX;
        VNVnM.left = MMM;
        VNVnM.fontSize = window.Math.floor(11 * scaleby) + "px";
        VNVnM["borderRadius"] = window.Math.floor(5 * scaleby) + "px";
        VNVnM["paddingTop"] = window.Math.floor(18 * scaleby) + "px";
        var NNVVn = window.document.getElementById("changelogTitle").style;
        SY = window.Math.floor(197 * scaleby) + "px";
        SX = window.Math.floor(23 * scaleby) + "px";
        NNVVn.width = SY;
        NNVVn.height = SX;
        NNVVn.fontSize = window.Math.floor(16 * scaleby) + "px";
        NNVVn["paddingTop"] = window.Math.floor(8 * scaleby) + "px";
        NNVVn["paddingBottom"] = window.Math.floor(0 * scaleby) + "px";
        NNVVn["marginBottom"] = window.Math.floor(-2 * scaleby) + "px";
        NNVVn["marginTop"] = window.Math.floor(-22 * scaleby) + "px";
        NNVVn["borderRadius"] = ((((((window.Math.floor(5 * scaleby) + "px ") + window.Math.floor(5 * scaleby)) + "px ") + window.Math.floor(0 * scaleby)) + "px ") + window.Math.floor(0 * scaleby)) + "px";
        var NMvMW = window.document.getElementById("changelogImg").style;
        SY = window.Math.floor(175 * scaleby) + "px";
        SX = window.Math.floor(80 * scaleby) + "px";
        NMvMW.width = SY;
        NMvMW.height = SX;
        NMvMW.wnwNW = window.Math.floor(10 * scaleby) + "px";
        var nMWvW = window.document.getElementById("changelogText").style;
        nMWvW.fontSize = window.Math.floor(10 * scaleby) + "px";
        nMWvW["padding"] = window.Math.floor(15 * scaleby) + "px";
        nMWvW["paddingTop"] = window.Math.floor(5 * scaleby) + "px";
        SY = window.Math.floor(197 * scaleby);
        SX = window.Math.floor(347 * scaleby);
        MMM = window.Math.floor(canw - (205 * scaleby)) + "px";
        MVvmn = window.Math.floor(canh - (105 * scaleby)) + "px";
        SX = SX + "px";
        SY = SY + "px";
        wnwvW.width = SY;
        wnwvW.height = SX;
        wnwvW.left = MMM;
        wnwvW.bottom = MVvmn;
        wnwvW.fontSize = window.Math.floor(13 * scaleby) + "px";
        wnwvW["marginTop"] = window.Math.floor(0 * scaleby) + "px";
        wnwvW["paddingTop"] = window.Math.floor(18 * scaleby) + "px";
        window.document.getElementById("featuredVideo").style.fontSize = window.Math.floor(13 * scaleby) + "px";
        window.document.getElementById("mainCommands").style["marginTop"] = window.Math.floor(55 * scaleby) + "px";
        window.document.getElementById("secondCommands").style["marginTop"] = window.Math.floor(55 * scaleby) + "px";
        window.document.getElementById("moveCommand").style["paddingLeft"] = window.Math.floor(20 * scaleby) + "px";
        window.document.getElementById("moveCommand").style["paddingRight"] = window.Math.floor(20 * scaleby) + "px";
        window.document.getElementById("hitCommands").style["paddingLeft"] = window.Math.floor(10 * scaleby) + "px";
        window.document.getElementById("hitCommands").style["paddingRight"] = window.Math.floor(10 * scaleby) + "px";
        window.document.getElementById("runCommands").style["paddingLeft"] = window.Math.floor(0 * scaleby) + "px";
        window.document.getElementById("runCommands").style["paddingRight"] = window.Math.floor(20 * scaleby) + "px";
        window.document.getElementById("interactCommands").style["paddingLeft"] = window.Math.floor(7 * scaleby) + "px";
        window.document.getElementById("interactCommands").style["paddingRight"] = window.Math.floor(0 * scaleby) + "px";
        window.document.getElementById("craftCommands").style["paddingLeft"] = window.Math.floor(5 * scaleby) + "px";
        window.document.getElementById("craftCommands").style["paddingRight"] = window.Math.floor(18 * scaleby) + "px";
        window.document.getElementById("mapCommands").style["paddingLeft"] = window.Math.floor(6 * scaleby) + "px";
        window.document.getElementById("mapCommands").style["paddingRight"] = window.Math.floor(12 * scaleby) + "px";
        var NwvWV = window.document.getElementById("howtoplayTitle").style;
        SY = window.Math.floor(197 * scaleby) + "px";
        SX = window.Math.floor(23 * scaleby) + "px";
        NwvWV.width = SY;
        NwvWV.height = SX;
        NwvWV.fontSize = window.Math.floor(16 * scaleby) + "px";
        NwvWV["paddingTop"] = window.Math.floor(0 * scaleby) + "px";
        NwvWV["paddingBottom"] = window.Math.floor(13 * scaleby) + "px";
        NwvWV["marginBottom"] = window.Math.floor(6 * scaleby) + "px";
        NwvWV["marginTop"] = window.Math.floor(0 * scaleby) + "px";
        NwvWV["borderRadius"] = ((((((window.Math.floor(5 * scaleby) + "px ") + window.Math.floor(5 * scaleby)) + "px ") + window.Math.floor(0 * scaleby)) + "px ") + window.Math.floor(0 * scaleby)) + "px";
        var vNvVn = window.document.getElementById("howtoplayText").style;
        vNvVn.fontSize = window.Math.floor(11 * scaleby) + "px";
        vNvVn.MNmmV = window.Math.floor(6 * scaleby) + "px";
        vNvVn.height = window.Math.floor(52 * scaleby) + "px";
        var NWmNv = window.document.getElementById("howtoplayCommands").style;
        SY = window.Math.floor(197 * scaleby) + "px";
        SX = window.Math.floor(23 * scaleby) + "px";
        NWmNv.width = SY;
        NWmNv.height = SX;
        NWmNv.fontSize = window.Math.floor(16 * scaleby) + "px";
        NWmNv["paddingTop"] = window.Math.floor(13 * scaleby) + "px";
        NWmNv["paddingBottom"] = window.Math.floor(13 * scaleby) + "px";
        NWmNv["marginBottom"] = window.Math.floor(6 * scaleby) + "px";
        NWmNv["marginTop"] = window.Math.floor(11 * scaleby) + "px";
    };

    function draw() {
        if (MMVwV() === 0) return;
        ctx.clearRect(0, 0, canw, canh);
        Render.world();
        if (MNw > 0) {
            NNN = mwn(1 - (MNw / WwM));
            if (mwm === 1) NNN = 1 - window.Math.abs(NNN);
            NNN = 1 - NNN;
        }
        ctx.globalAlpha = 0.3 * NNN;
        ctx.fillStyle = "#000000";
        ctx.fillRect(0, 0, canw, canh);
        ctx.globalAlpha = 1;
        if (Home.gameMode === World.__SURVIVAL__) NvW.setState(GUI.__BUTTON_CLICK__);
        else if (Home.gameMode === World.__BR__) VmwMm.setState(GUI.__BUTTON_CLICK__);
        else if (Home.gameMode === World.__GHOUL__) vvWWW.setState(GUI.__BUTTON_CLICK__);
        if (Home.publicMode === 0) wnm.setState(GUI.__BUTTON_CLICK__);
        else if (Home.publicMode === 1) VMm.setState(GUI.__BUTTON_CLICK__);
        VmV.draw();
        mVwVw.draw();
        playbutt.draw();
        mwvwV.draw();
        mmvWv.draw();
        WWNNV.draw();
        NVn.draw();
        VNWMN.draw();
        VnmWw.draw();
        nMNNN.draw();
        vVNnM.draw();
        NvW.draw();
        vvWWW.draw();
        wnm.draw();
        VMm.draw();
        WMmmM.draw();
        nvWwv.draw();
        WwWvv.draw();
        wvmmM.draw();
        mNVWV.draw();
        privateServer.draw();
        vvmMm.draw();
        if (WnwMN.W === null) {
            WnwMN.W = GUI.renderText((('0.' + versionInf[0]) + '.') + versionInf[1], "'Viga', sans-serif", "#d6ddde", 24, 400, window.undefined, 16, 25, window.undefined, window.undefined, window.undefined, window.undefined, "#2b3c3e", 8);
            WnwMN.W.isLoaded = 1;
        }
        CanvasUtils.drawImageHd(WnwMN, (VmV.pos.x / scaleby) + 484.5, (VmV.pos.y / scaleby) + 124, 0, 0, 0, 1);
        wvmwM.pos.x = WMmmM.pos.x + (27 * scaleby);
        wvmwM.pos.y = WMmmM.pos.y + (329 * scaleby);
        wvmwM.draw();
        wMMNm.pos.x = WMmmM.pos.x + (34 * scaleby);
        wMMNm.pos.y = WMmmM.pos.y + (399 * scaleby);
        wMMNm.draw();
        Render.alertServer();
        AudioManager.scheduler();
    };

    function MMVwV() {
        if (WWN === 1) {
            update();
            if (MNw < 0) {
                WWN = 0;
                mVwVw.setState(GUI.__BUTTON_OUT__);
                vWmNN.display = "none";
                playbutt.setState(GUI.__BUTTON_OUT__);
                Wvwwv.display = "none";
                vnmmN.display = "none";
                VNVnM.display = "none";
                wnwvW.display = "none";
                NVn.setState(GUI.__BUTTON_OUT__);
                VNWMN.setState(GUI.__BUTTON_OUT__);
                VnmWw.setState(GUI.__BUTTON_OUT__);
                nMNNN.setState(GUI.__BUTTON_OUT__);
                vVNnM.setState(GUI.__BUTTON_OUT__);
                NvW.setState(GUI.__BUTTON_OUT__);
                VmwMm.setState(GUI.__BUTTON_OUT__);
                vvWWW.setState(GUI.__BUTTON_OUT__);
                wnm.setState(GUI.__BUTTON_OUT__);
                VMm.setState(GUI.__BUTTON_OUT__);
                nvWwv.setState(GUI.__BUTTON_OUT__);
                WwWvv.setState(GUI.__BUTTON_OUT__);
                wvmmM.setState(GUI.__BUTTON_OUT__);
                mNVWV.setState(GUI.__BUTTON_OUT__);
                vnvmm.display = "none";
                privateServer.setState(GUI.__BUTTON_OUT__);
                vvmMm.setState(GUI.__BUTTON_OUT__);
                trevdaStyle.display = "none";
                VwWMv.display = "none";
                MVv.run();
                return 0;
            }
            MNw -= delta;
        } else if (mwm === 1) {
            update();
            if (MNw < 0) {
                mwm = 0;
                if (World.PLAYER.admin !== 1) trevdaStyle.display = "inline-block";
                window.document.getElementById("bod").style.backgroundColor = "#46664d";
                MmNNN();
            }
            MNw -= delta;
        }
        return 1;
    };

    function VNn(event) {
        Mouse.updateAll(event, Mouse.__MOUSE_DOWN__);
        var vnm = 0;
        if (mVwVw.trigger() === 1) {
            vnm = 1;
        }
        if (playbutt.trigger() === 1) {
            vnm = 1;
        }
        if (NVn.trigger() === 1) {
            vnm = 1;
        }
        if (VNWMN.trigger() === 1) {
            vnm = 1;
        }
        if (VnmWw.trigger() === 1) {
            vnm = 1;
        }
        if (nMNNN.trigger() === 1) {
            vnm = 1;
        }
        if (vVNnM.trigger() === 1) {
            vnm = 1;
        }
        if (NvW.trigger() === 1) {
            vnm = 1;
        }
        if (VmwMm.trigger() === 1) {
            vnm = 1;
        }
        if (vvWWW.trigger() === 1) {
            vnm = 1;
        }
        if (wnm.trigger() === 1) {
            vnm = 1;
        }
        if (VMm.trigger() === 1) {
            vnm = 1;
        }
        if (nvWwv.trigger() === 1) {
            vnm = 1;
        }
        if (WwWvv.trigger() === 1) {
            vnm = 1;
        }
        if (wvmmM.trigger() === 1) {
            vnm = 1;
        }
        if (mNVWV.trigger() === 1) {
            vnm = 1;
        }
        if (privateServer.trigger() === 1) {
            vnm = 1;
        }
        if (vvmMm.trigger() === 1) {
            vnm = 1;
        }
        wvmwM.trigger();
        wMMNm.trigger();
    };

    function vNm(event) {
        Mouse.updateAll(event, Mouse.__MOUSE_UP__);
        var vnm = 0;
        if (mVwVw.trigger() === 1) {
            vnm = 1;
            var MwWMw = window.open("https://iogames.space", "_blank");
        }
        if (playbutt.trigger() === 1) {
            vnm = 1;
            joinServer();
            AudioUtils.playFx(AudioUtils._fx.play, 1, 0);

        }
        if (NVn.trigger() === 1) {
            vnm = 1;
            var MwWMw = window.open("https://twitter.com/lapamauve", "_blank");
        }
        if (VNWMN.trigger() === 1) {
            vnm = 1;
            var MwWMw = window.open(" https://energy.facebook.com/limaxio-571818073000979", "_blank");
        }
        if (VnmWw.trigger() === 1) {
            vnm = 1;
            var MwWMw = window.open("https://youtube.com/c/LapaMauve", "_blank");
        }
        if (nMNNN.trigger() === 1) {
            vnm = 1;
            var MwWMw = window.open("https://energy.reddit.com/r/devastio/", "_blank");
        }
        if (vVNnM.trigger() === 1) {
            vnm = 1;
            var MwWMw = window.open("https://discord.gg/V4KXEwr", "_blank");
        }
        if (NvW.trigger() === 1) {
            vnm = 1;
            if (Home.gameMode !== 0) {
                if (((Client.state & State.__PENDING__) === 0) && ((Client.state & State.__CONNECTED__) === 0)) {
                    Home.gameMode = 0;
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    VMm.show();
                    wnm.show();
                    window.document.getElementById("serverList").innerHTML = Home.survivalHtml;
                    window.document.getElementById("servers").selectedIndex = Home.survivalIndex;
                    update();
                }
            }
        }
        if (VmwMm.trigger() === 1) {
            vnm = 1;
            if ((0 && (Home.gameMode !== 1)) && (Home.publicMode === 1)) {
                if (((Client.state & State.__PENDING__) === 0) && ((Client.state & State.__CONNECTED__) === 0)) {
                    Home.serverTest = 0;
                    Home.gameMode = World.__BR__;
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    VMm.hide();
                    wnm.hide();
                    Home.survivalHtml = window.document.getElementById("serverList").innerHTML;
                    Home.survivalIndex = window.document.getElementById("servers").selectedIndex;
                    window.document.getElementById("serverList").innerHTML = Home.htmlBattleRoyale;
                    var j = 0;
                    var vvvNm = 0;
                    for (var i in Home.regions) {
                        if (i === Client.serverList[Home.survivalIndex][4]) {
                            Home.serverTest = window.Math.floor(window.Math.random() * Home.regions[i].length);
                            vvvNm = j;
                            break;
                        }
                        j++;
                    };
                    window.document.getElementById("servers").selectedIndex = vvvNm;
                    update();
                }
            }
        }
        if (vvWWW.trigger() === 1) {
            vnm = 1;
            if ((Home.gameMode !== 1) && (Home.publicMode === 1)) {
                if (((Client.state & State.__PENDING__) === 0) && ((Client.state & State.__CONNECTED__) === 0)) {
                    Home.serverTest = 0;
                    Home.gameMode = World.__GHOUL__;
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    VMm.hide();
                    wnm.hide();
                    Home.survivalHtml = window.document.getElementById("serverList").innerHTML;
                    Home.survivalIndex = window.document.getElementById("servers").selectedIndex;
                    window.document.getElementById("serverList").innerHTML = Home.htmlGhoulServer;
                    var vvvNm = window.Math.floor(window.Math.random() * 1);
                    window.document.getElementById("servers").selectedIndex = vvvNm;
                    update();
                }
            }
        }
        if (wnm.trigger() === 1) {
            vnm = 1;
            if ((Home.publicMode !== 0) && (Home.gameMode === 0)) {
                if (((Client.state & State.__PENDING__) === 0) && ((Client.state & State.__CONNECTED__) === 0)) {
                    Home.serverTest = 0;
                    Home.publicMode = 0;
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    NvW.hide();
                    VmwMm.hide();
                    vvWWW.hide();
                    Home.survivalHtml = window.document.getElementById("serverList").innerHTML;
                    Home.survivalIndex = window.document.getElementById("servers").selectedIndex;
                    window.document.getElementById("serverList").innerHTML = Home.htmlPrivateServer;
                    Home.serverTest = 0;
                    window.document.getElementById("servers").selectedIndex = 0;
                    update();
                }
            }
        }
        if (VMm.trigger() === 1) {
            vnm = 1;
            if ((Home.publicMode !== 1) && (Home.gameMode === 0)) {
                if (((Client.state & State.__PENDING__) === 0) && ((Client.state & State.__CONNECTED__) === 0)) {
                    Home.publicMode = 1;
                    Home.gameMode = 0;
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    NvW.show();
                    vvWWW.show();
                    window.document.getElementById("serverList").innerHTML = Home.survivalHtml;
                    window.document.getElementById("servers").selectedIndex = Home.survivalIndex;
                    update();
                }
            }
        }
        if (nvWwv.trigger() === 1) {
            vnm = 1;
            var MwWMw = window.open("http://limax.io", "_blank");
        }
        if (WwWvv.trigger() === 1) {
            vnm = 1;
            var MwWMw = window.open("http://oib.io", "_blank");
        }
        if (wvmmM.trigger() === 1) {
            vnm = 1;
            var MwWMw = window.open("http://starve.io", "_blank");
        }
        if (mNVWV.trigger() === 1) {
            vnm = 1;
            var MwWMw = window.open("https://nend.io", "_blank");
        }
        if (privateServer.trigger() === 1) {
            vnm = 1;
            var MwWMw = window.open("https://devast.io/private-server", "_blank");
        }
        if (vvmMm.trigger() === 1) {
            vnm = 1;
            Home.quit(Editor);
            AudioUtils.playFx(AudioUtils._fx.play, 1, 0);
        }
        if ((wvmwM.trigger() === 1) || (wMMNm.trigger() === 1)) {
            var MwWMw = window.open(WWNWM.WwWVn, "_blank");
        };
    };

    function wVv(event) {
        Mouse.updateAll(event, Mouse.__MOUSE_MOVE__);
        var vnm = 0;
        if (mVwVw.trigger() === 1) {
            vnm = 1;
        }
        if (playbutt.trigger() === 1) {
            vnm = 1;
        }
        if (NVn.trigger() === 1) {
            vnm = 1;
        }
        if (VNWMN.trigger() === 1) {
            vnm = 1;
        }
        if (VnmWw.trigger() === 1) {
            vnm = 1;
        }
        if (nMNNN.trigger() === 1) {
            vnm = 1;
        }
        if (vVNnM.trigger() === 1) {
            vnm = 1;
        }
        if (NvW.trigger() === 1) {
            vnm = 1;
        }
        if (VmwMm.trigger() === 1) {
            vnm = 1;
        }
        if (vvWWW.trigger() === 1) {
            vnm = 1;
        }
        if (wnm.trigger() === 1) {
            vnm = 1;
        }
        if (VMm.trigger() === 1) {
            vnm = 1;
        }
        if (nvWwv.trigger() === 1) {
            vnm = 1;
        }
        if (WwWvv.trigger() === 1) {
            vnm = 1;
        }
        if (wvmmM.trigger() === 1) {
            vnm = 1;
        }
        if (mNVWV.trigger() === 1) {
            vnm = 1;
        }
        if (privateServer.trigger() === 1) {
            vnm = 1;
        }
        if (vvmMm.trigger() === 1) {
            vnm = 1;
        }
        wvmwM.trigger();
        wMMNm.trigger();
    };

    function WwW(event) {
        if (event.touches.length > 0) {
            Mouse.touchToMouseEvent(NWV, event, event.touches[0]);
            VNn(NWV);
        }
    };

    function nMN(event) {
        vNm(NWV);
    };

    function Www(event) {
        if (event.touches.length > 0) {
            Mouse.touchToMouseEvent(NWV, event, event.touches[0]);
            vNm(NWV);
        }
    };

    function vnv(event) {
        if (event.touches.length > 0) {
            Mouse.touchToMouseEvent(NWV, event, event.touches[0]);
            wVv(NWV);
        }
    };

    function getClickPos(e)
    {
        setx = rowx;
        sety = rowy;
        console.log('set: ' + rowx + ', ' + rowy)
    };

    function MmNNN() {
        if (isTouchScreen === 0) window.addEventListener('contextmenu', function(ev) {
            ev.preventDefault();
            getClickPos();
            return false;
            }, false);
        if (isTouchScreen === 0) window.addEventListener('mousedown', VNn, false);
        if (isTouchScreen === 0) window.addEventListener('mouseup', vNm, false);
        if (isTouchScreen === 0) window.addEventListener('mousemove', wVv, false);
        if (isTouchScreen === 1) window.addEventListener('touchstart', WwW, false);
        if (isTouchScreen === 1) window.addEventListener('touchend', nMN, false);
        if (isTouchScreen === 1) window.addEventListener('touchcancel', Www, false);
        if (isTouchScreen === 1) window.addEventListener('touchmove', vnv, false);
    };

    function VVwMW() {
        if (isTouchScreen === 0) window.removeEventListener('mousedown', VNn, false);
        if (isTouchScreen === 0) window.removeEventListener('mouseup', vNm, false);
        if (isTouchScreen === 0) window.removeEventListener('mousemove', wVv, false);
        if (isTouchScreen === 1) window.removeEventListener('touchstart', WwW, false);
        if (isTouchScreen === 1) window.removeEventListener('touchend', nMN, false);
        if (isTouchScreen === 1) window.removeEventListener('touchcancel', Www, false);
        if (isTouchScreen === 1) window.removeEventListener('touchmove', vnv, false);
    };
    return {
        quit: quit,
        init: init,
        run: run,
        update: update,
        draw: draw
    };
})();
var Game = (function() {
    function onError(Mnn) {
        window.console.log("onError", Mnn);
        if (World.gameMode === 1) quit(Rank);
        else quit(Score);
    };

    function onOpen() {};

    function getBoxState() {
        return NmW;
    };

    function MvN() {
        return NmW & isCraftOpen;
    };
    var nMnnm = null;
    var chatvisible = 0;
    var NmW = 0;
    var isMapOpen = 0;
    var isSettingsOpen = 0;
    var isCraftOpen = 0;
    var isChestOpen = 0;
    var isTeamOpen = 0;
    var MNnnv = 0;

    function MVVMv(NWNVm) {
        nVN();
        NmW = 1;
        if (NWNVm === 1) isCraftOpen = 1;
        else if (NWNVm === 2) isChestOpen = 1; 
    };

    function nVN() {
        NmW = 0;
        closebutt.setState(GUI.__BUTTON_OUT__);
        isMapOpen = 0;
        isSettingsOpen = 0;
        isCraftOpen = 0;
        isChestOpen = 0;
        isTeamOpen = 0;
        World.releaseBuilding();
    };
    var addtimbutt = GUI.createButton(63, 28, ["img/addteam-button-out.png", "img/addteam-button-in.png", "img/addteam-button-click.png"]);
    var leavebutt = GUI.createButton(44, 33, ["img/leave-button-out.png", "img/leave-button-in.png", "img/leave-button-click.png"]);
    var lockbutt = GUI.createButton(44, 33, ["img/lockteam-button-out.png", "img/lockteam-button-in.png", "img/lockteam-button-click.png"]);
    var unlockbutt = GUI.createButton(44, 33, ["img/unlockteam-button-out.png", "img/unlockteam-button-in.png", "img/unlockteam-button-click.png"]);
    var deletebutt = GUI.createButton(44, 33, ["img/delete-button-out.png", "img/delete-button-in.png", "img/delete-button-click.png"]);
    var deletebuttout = GUI.createButton(44, 33, ["img/delete-button-out.png", "img/delete-button-in.png", "img/delete-button-click.png"]);
    var joinbutt = GUI.createButton(44, 33, ["img/join-button-out.png", "img/join-button-in.png", "img/join-button-click.png"]);
    var craftbutt = GUI.createButton(71, 46, ["img/craft-button-out.png", "img/craft-button-in.png", "img/craft-button-click.png"]);
    var cancelbutt = GUI.createButton(71, 46, ["img/cancel-craft-button-out.png", "img/cancel-craft-button-in.png", "img/cancel-craft-button-click.png"]);
    var unlockbuttout = GUI.createButton(71, 46, ["img/unlock-button-out.png", "img/unlock-button-in.png", "img/unlock-button-click.png"]);
    var bagbutt = GUI.createButton(64, 63, ["img/bag-button-out.png", "img/bag-button-in.png", "img/bag-button-click.png"]);
    bagbutt.open = 0;
    var wnV = [];
    var craftList = [];
    var nmMMm = 0;
    var closebutt = GUI.createButton(43, 43, ["img/close-box-out.png", "img/close-box-in.png", "img/close-box-click.png"]);
    var highpartout = [CanvasUtils.loadImage("img/high-particules-out.png"), CanvasUtils.loadImage("img/high-particules-in.png"), CanvasUtils.loadImage("img/high-particules-click.png")];
    var joinbuttout = [CanvasUtils.loadImage("img/join-button-out.png"), CanvasUtils.loadImage("img/join-button-in.png"), CanvasUtils.loadImage("img/join-button-click.png")];
    var removebuttout = [CanvasUtils.loadImage("img/remove-button-out.png"), CanvasUtils.loadImage("img/remove-button-in.png"), CanvasUtils.loadImage("img/remove-button-click.png")];
    var wVwnm = GUI.createButton(54, 42, null, highpartout);
    var vWmmV = [CanvasUtils.loadImage("img/low-particules-out.png"), CanvasUtils.loadImage("img/low-particules-in.png"), CanvasUtils.loadImage("img/low-particules-click.png")];
    var VnWMV = GUI.createButton(54, 42, null, vWmmV);
    var vVvNM = [CanvasUtils.loadImage("img/no-particules-out.png"), CanvasUtils.loadImage("img/no-particules-in.png"), CanvasUtils.loadImage("img/no-particules-click.png")];
    var wwMwv = GUI.createButton(54, 42, null, vVvNM);
    var nwMVN = [CanvasUtils.loadImage("img/fuel-button-out.png"), CanvasUtils.loadImage("img/fuel-button-in.png"), CanvasUtils.loadImage("img/fuel-button-click.png")];
    var VWNWV = GUI.createButton(46, 46, null, nwMVN);
    var vnwVW = [CanvasUtils.loadImage("img/fuel1-button-out.png"), CanvasUtils.loadImage("img/fuel1-button-in.png"), CanvasUtils.loadImage("img/fuel1-button-click.png")];
    var WmWwW = GUI.createButton(46, 46, null, vnwVW);
    var wnnMw = [CanvasUtils.loadImage("img/energy-cells-button-out.png"), CanvasUtils.loadImage("img/energy-cells-button-in.png"), CanvasUtils.loadImage("img/energy-cells-button-click.png")];
    var WwMvM = GUI.createButton(46, 46, null, wnnMw);
    var VVVMw = [CanvasUtils.loadImage("img/high-resolution-out.png"), CanvasUtils.loadImage("img/high-resolution-in.png"), CanvasUtils.loadImage("img/high-resolution-click.png")];
    var wWNnw = GUI.createButton(54, 42, null, VVVMw);
    var wmnmv = [CanvasUtils.loadImage("img/medium-resolution-out.png"), CanvasUtils.loadImage("img/medium-resolution-in.png"), CanvasUtils.loadImage("img/medium-resolution-click.png")];
    var nvwMN = GUI.createButton(54, 42, null, wmnmv);
    var vmVnn = [CanvasUtils.loadImage("img/low-resolution-out.png"), CanvasUtils.loadImage("img/low-resolution-in.png"), CanvasUtils.loadImage("img/low-resolution-click.png")];
    var MNVVn = GUI.createButton(54, 42, null, vmVnn);
    var NwVwn = [CanvasUtils.loadImage("img/azerty-button-out.png"), CanvasUtils.loadImage("img/azerty-button-in.png"), CanvasUtils.loadImage("img/azerty-button-click.png")];
    var VmvmN = GUI.createButton(81, 33, null, NwVwn);
    var NMnMN = [CanvasUtils.loadImage("img/qwerty-button-out.png"), CanvasUtils.loadImage("img/qwerty-button-in.png"), CanvasUtils.loadImage("img/qwerty-button-click.png")];
    var WMVVn = GUI.createButton(87, 33, null, NMnMN);
    var soundonbutt = [CanvasUtils.loadImage("img/sound-on-out.png"), CanvasUtils.loadImage("img/sound-on-in.png"), CanvasUtils.loadImage("img/sound-on-click.png")];
    var soundoffbutt = [CanvasUtils.loadImage("img/sound-off-out.png"), CanvasUtils.loadImage("img/sound-off-in.png"), CanvasUtils.loadImage("img/sound-off-click.png")];
    var wvNNV = GUI.createButton(51, 36, null, soundonbutt);
    var WVnnn = GUI.createButton(51, 36, null, soundoffbutt);
    var NmVWV = GUI.createButton(51, 36, null, soundonbutt);
    var vVMWm = GUI.createButton(51, 36, null, soundoffbutt);
    var MNWwn = [];
    var MmV = -1;
    var NWmNn = -1;
    var emptyinvslot = CanvasUtils.loadImage("img/inv-empty.png");
    var WwvNM = [emptyinvslot, emptyinvslot, emptyinvslot];
    var inventory = [];
    var craft = [];
    var recipe = [];
    var queue = [];
    var tools = [];
    var nmMvw = [];
    var kick = [];
    var chest = [];
    var preview = GUI.createButton(58, 58, null, WwvNM);
    var inventoryItemNumber = [];
    var inventoryAmmoNumber = [];
    var mWM = 0;
    var MWVNw = 0;
    var NVNwm = 0;
    var MMMvM = 0;
    var vmWNW = 0;
    var NnVMv = 0;
    var WNmmw = 0;
    var nvnNv = 0;

    function NnnNW() {
        if ((Mouse.state === Mouse.__MOUSE_DOWN__) && (World.PLAYER.click === 0)) {
            if (World.PLAYER.isBuilding === 1) {
                World.PLAYER.click = -1;
                if (World.PLAYER.canBuild === 1) Client.sendPacket(window.JSON.stringify([14, World.PLAYER.buildRotate, World.PLAYER.iBuild, World.PLAYER.jBuild]));
            } else {
                World.PLAYER.click = 1;
                World.interaction = -1;
                Client.sendMouseDown();
            }
        } else if (Mouse.state === Mouse.__MOUSE_UP__) {
            if (World.PLAYER.isBuilding === 1) {
                nmMMm = 0;
                World.PLAYER.click = 0;
            } else if (World.PLAYER.click === 1) {
                nmMMm = 0;
                World.PLAYER.click = 0;
                Client.sendMouseUp();
            } else if (nmMMm === 1) {
                World.PLAYER.click = 1;
                World.interaction = -1;
                Client.sendMouseDown();
            }
        }
    };

    function vWMVN() {
        Client.update();
        if (delta > 5000) Client.sendPacket("[20]");
        if (chatvisible === 0) {
            Client.sendMove();
            Client.sendShift();
        }
        if (Mouse.state === Mouse.__MOUSE_DOWN__) Client.sendFastMouseAngle();
        else Client.sendMouseAngle();
        NnnNW();
    };

    function markposition() {
        if (Nnw > 0) {
            Nnw -= delta;
            if (Nnw > 2500) ctx.globalAlpha = MathUtils.Ease.inOutQuad((3000 - Nnw) / 500);
            else if (Nnw < 500) ctx.globalAlpha = MathUtils.Ease.inOutQuad(Nnw / 500);
            ctx.drawImage(VWWvn, copypastebutton.pos.x - (85 * scaleby), copypastebutton.pos.y - (40 * scaleby), VWWvn.wh * scaleby, VWWvn.h2 * scaleby);
            ctx.globalAlpha = 1;
        }
        if (NVVNW[World.PLAYER._j] === window.undefined) NVVNW[World.PLAYER._j] = [];
        if (NVVNW[World.PLAYER._j][World.PLAYER._i] === window.undefined) NVVNW[World.PLAYER._j][World.PLAYER._i] = GUI.renderText(((("(" + World.PLAYER._j) + ",") + World.PLAYER._i) + ")", "'Viga', sans-serif", "#FFFFFF", 30, 300, "#000000", 22, 22, window.undefined, window.undefined, 0.4, window.undefined, "#000000", 15.6);
        var W = NVVNW[World.PLAYER._j][World.PLAYER._i];
        ctx.drawImage(W, 5 * scaleby, fullscreenimg.pos.y, W.wh * scaleby, W.h2 * scaleby);
    };

    var NVVNW = [];


    var gauges;
    var settingbox;
    var chestbox;
    var craftbox;
    var bordermap;
    var minimap;
    var leaderboard;
    var teambox;
    var teammemberbox;
    var fullscreenimg;
    var craftbutton;
    var settingsimg;
    var minimapbutt;
    var teambutt;
    var leaderboardbutt;
    var leaderboardbutt2;
    var chat;
    var mnnNv;
    var NWmmW;        

    function init() {
        VWWvn = GUI.renderText("Copied to clipboard", "'Viga', sans-serif", "#FFFFFF", 40, 350, "#000000", 18, 18, window.undefined, window.undefined, 0.2);
        chatinput = window.document.getElementById("chatInput");
        var wMv = 68;
        var len = ENTITIES[__ENTITIE_PLAYER__].inventorySize + 8;
        for (i = 0; i < len; i++) inventory.push(GUI.createButton(wMv, wMv, null, WwvNM));
        for (i = 0; i < 4; i++) chest.push(GUI.createButton(wMv, wMv, null, WwvNM));
        wMv = 49;
        for (i = 0; i < 35; i++) craft.push(GUI.createButton(wMv, wMv, null, WwvNM));
        wMv = 40;
        for (i = 0; i < 5; i++) recipe.push(GUI.createButton(wMv, wMv, null, WwvNM));
        for (i = 0; i < 4; i++) queue.push(GUI.createButton(wMv, wMv, null, WwvNM));
        for (i = 0; i < 3; i++) tools.push(GUI.createButton(wMv, wMv, null, WwvNM));
        for (i = 0; i < 9; i++) kick.push(GUI.createButton(29, 27, null, removebuttout));
        for (i = 0; i < 18; i++) nmMvw.push(GUI.createButton(44, 33, null, joinbuttout));
        Game.closebutt = nVN;
        Game.nwmVV = MVVMv;
        Game.inventory = inventory;
        Game.craft = craft;
        Game.recipe = recipe;
        Game.preview = preview;
        Game.queue = queue;
        Game.tools = tools;
        Game.chest = chest;
        Game.kick = kick;
        Game.join = nmMvw;
        Game.MvN = MvN;
        Game.getBoxState = getBoxState;
        Game.teamName = "";
        Game.nVNMM = joinbutt;
        Game.nWvnm = deletebuttout;
        Game.inventoryItemNumber = inventoryItemNumber;
        Game.inventoryAmmoNumber = inventoryAmmoNumber;
        Game.mNNwM = 0;
        Game.nNwMM = 0;
        Game.vwVnW = 0;
        Game.mnNnW = 0;
        Game.mmNWn = 0;
        Game.vmwNV = 0;
        wnV[SKILLS.__BUILDING__] = GUI.createButton(42, 42, ["img/building-button-out.png", "img/building-button-in.png", "img/building-button-click.png"]);
        wnV[SKILLS.__SKILL__] = GUI.createButton(42, 42, ["img/skill-button-out.png", "img/skill-button-in.png", "img/skill-button-click.png"]);
        wnV[SKILLS.__CLOTHE__] = GUI.createButton(42, 42, ["img/clothe-button-out.png", "img/clothe-button-in.png", "img/clothe-button-click.png"]);
        wnV[SKILLS.__PLANT__] = GUI.createButton(42, 42, ["img/plant-button-out.png", "img/plant-button-in.png", "img/plant-button-click.png"]);
        wnV[SKILLS.__DRUG__] = GUI.createButton(42, 42, ["img/medecine-button-out.png", "img/medecine-button-in.png", "img/medecine-button-click.png"]);
        wnV[SKILLS.__MINERAL__] = GUI.createButton(42, 42, ["img/resources-button-out.png", "img/resources-button-in.png", "img/resources-button-click.png"]);
        wnV[SKILLS.__SURVIVAL__] = GUI.createButton(42, 42, ["img/survival-button-out.png", "img/survival-button-in.png", "img/survival-button-click.png"]);
        wnV[SKILLS.__TOOL__] = GUI.createButton(42, 42, ["img/tool-button-out.png", "img/tool-button-in.png", "img/tool-button-click.png"]);
        wnV[SKILLS.__WEAPON__] = GUI.createButton(42, 42, ["img/weapon-button-out.png", "img/weapon-button-in.png", "img/weapon-button-click.png"]);
        wnV[SKILLS.__LOGIC__] = GUI.createButton(42, 42, ["img/cable-button-out.png", "img/cable-button-in.png", "img/cable-button-click.png"]);
        craftList[AREAS.own] = GUI.createButton(42, 42, ["img/own-button-out.png", "img/own-button-in.png", "img/own-button-click.png"]);
        craftList[AREAS.firepart] = GUI.createButton(42, 42, ["img/fire-button-out.png", "img/fire-button-in.png", "img/fire-button-click.png"]);
        craftList[AREAS.workbench] = GUI.createButton(42, 42, ["img/workbench1-button-out.png", "img/workbench1-button-in.png", "img/workbench1-button-click.png"]);
        craftList[AREAS.bbq] = GUI.createButton(42, 42, ["img/bbq-button-out.png", "img/bbq-button-in.png", "img/bbq-button-click.png"]);
        craftList[AREAS.composter] = GUI.createButton(42, 42, ["img/composter-button-out.png", "img/composter-button-in.png", "img/composter-button-click.png"]);
        craftList[AREAS.weavingmachine] = GUI.createButton(42, 42, ["img/weaving-machine-button-out.png", "img/weaving-machine-button-in.png", "img/weaving-machine-button-click.png"]);
        craftList[AREAS.weldingmachine] = GUI.createButton(42, 42, ["img/welding-machine-button-out.png", "img/welding-machine-button-in.png", "img/welding-machine-button-click.png"]);
        craftList[AREAS.researchbench] = GUI.createButton(42, 42, ["img/workbench2-button-out.png", "img/workbench2-button-in.png", "img/workbench2-button-click.png"]);
        craftList[AREAS.smelter] = GUI.createButton(42, 42, ["img/smelter-button-out.png", "img/smelter-button-in.png", "img/smelter-button-click.png"]);
        craftList[AREAS.teslabench] = GUI.createButton(42, 42, ["img/workbench3-button-out.png", "img/workbench3-button-in.png", "img/workbench3-button-click.png"]);
        craftList[AREAS.agitator] = GUI.createButton(42, 42, ["img/agitator-button-out.png", "img/agitator-button-in.png", "img/agitator-button-click.png"]);
        craftList[AREAS.extractor] = GUI.createButton(42, 42, ["img/extractor-button-out.png", "img/extractor-button-in.png", "img/extractor-button-click.png"]);
        gauges = GUI.createBackground(255, 174, "img/profile-player2.png");
        settingbox = GUI.createBackground(269, 267, "img/settings-box.png");
        chestbox = GUI.createBackground(162, 165, "img/chest-box4.png");
        craftbox = GUI.createBackground(595, 405, "img/craftbox2.png");
        bordermap = GUI.createBackground(412, 412, "img/borderBigMinimap2.png");
        minimap = GUI.createBackground(128, 128, "img/minimap.png");
        leaderboard = GUI.createBackground(233, 246, "img/leaderboard.png");
        teambox = GUI.createBackground(516, 275, "img/jointeam-box.png");
        teammemberbox = GUI.createBackground(513, 150, "img/memberteam-box.png");
        fullscreenimg = GUI.createButton(40, 40, ["img/full-screen-out.png", "img/full-screen-in.png", "img/full-screen-click.png"]);
        craftbutton = GUI.createButton(64, 63, ["img/craftbox-button-out.png", "img/craftbox-button-in.png", "img/craftbox-button-click.png"]);
        settingsimg = GUI.createButton(40, 40, ["img/settings-out.png", "img/settings-in.png", "img/settings-click.png"]);
        minimapbutt = GUI.createButton(40, 40, ["img/minimap-button-out.png", "img/minimap-button-in.png", "img/minimap-button-click.png"]);
        teambutt = GUI.createButton(40, 40, ["img/team-button-out.png", "img/team-button-in.png", "img/team-button-click.png"]);
        leaderboardbutt = GUI.createButton(34, 33, ["img/close-leaderboard-out.png", "img/close-leaderboard-in.png", "img/close-leaderboard-click.png"]);
        leaderboardbutt2 = GUI.createButton(34, 33, ["img/open-leaderboard-out.png", "img/open-leaderboard-in.png", "img/open-leaderboard-click.png"]);
        chat = window.document.getElementById("chat");
        mnnNv = chat.style;
        NWmmW = {
            x: 0,
            y: 0
        };
    };
    var MVv;
    var NWV = new Mouse.LocalMouseEvent;
    var nNw = new Keyboard.LocalKeyboardEvent;
    var VWm = 2000;
    var WWN = 0;
    var VNvnM = MathUtils.Ease.inQuad;
    var Nmv = 1000;
    var mwm = 0;
    var WVWWm = MathUtils.Ease.outQuad;
    var WwM = 0;
    var MNw = 0;
    var mwn = window.undefined;

    function run() {
        Client.onError = onError;
        Client.onOpen = onOpen;
        if (localStorage2.getItem("showLeaderboard") === "0") {
            leaderboardbutt.hide();
            leaderboardbutt2.show();
        } else {
            leaderboardbutt2.hide();
            leaderboardbutt.show();
        }
        window.document.getElementById("bod").style.backgroundColor = "#46664D";
        nmMMm = 0;
        Home.ads++;
        Game.teamName = "";
        Game.teamNameValid = 0;
        AudioManager.startGame();
        if (World.gameMode === World.__BR__) {
            teambutt.hide();
            craftbutton.show();
        } else if (World.PLAYER.ghoul > 0) {
            window.console.log("HERE");
            teambutt.hide();
            craftbutton.hide();
        } else {
            teambutt.show();
            craftbutton.show();
        }
        CanvasUtils.setRenderer(Game);
        MNw = Nmv;
        WwM = Nmv;
        mwn = WVWWm;
        mwm = 1;
        update();
    };

    function quit(wMN) {
        chatvisible = 0;
        nVN();
        AudioManager.quitGame();
        MVv = wMN;
        VVwMW();
        MNw = VWm;
        WwM = VWm;
        mwn = VNvnM;
        WWN = 1;
    };

    function update() {
        var vMm = 0;
        var wwv = 0;
        if (MNw > 0) {
            wwv = canh;
            var transition = mwn(1 - (MNw / WwM));
            if (transition === 1) MNw = 0;
            if (mwm === 1) transition = 1 - window.Math.abs(transition);
            vMm *= transition;
            wwv *= transition;
        }
        gauges.pos.x = window.Math.floor(5 * scaleby) + vMm;
        gauges.pos.y = ((canh - window.Math.floor(174 * scaleby)) + window.Math.floor(-7 * scaleby)) + wwv;
        settingbox.pos.x = (canw2 - window.Math.floor(134 * scaleby)) + vMm;
        settingbox.pos.y = window.Math.max(0, canh2 - window.Math.floor(133 * scaleby)) + wwv;
        chestbox.pos.x = (canw2 - window.Math.floor(81 * scaleby)) + vMm;
        chestbox.pos.y = window.Math.max(0, canh2 - window.Math.floor(82 * scaleby)) + wwv;
        craftbox.pos.x = (canw2 - window.Math.floor(297 * scaleby)) + vMm;
        craftbox.pos.y = window.Math.max(0, canh2 - window.Math.floor(202 * scaleby)) + wwv;
        bordermap.pos.x = (canw2 - window.Math.floor(206 * scaleby)) + vMm;
        bordermap.pos.y = window.Math.max(0, canh2 - window.Math.floor(206 * scaleby)) + wwv;
        minimap.pos.x = window.Math.floor(5 * scaleby) - vMm;
        minimap.pos.y = window.Math.floor(5 * scaleby) - wwv;
        leaderboard.pos.x = ((canw - window.Math.floor(233 * scaleby)) + window.Math.floor(-6 * scaleby)) - vMm;
        leaderboard.pos.y = window.Math.floor(5 * scaleby) - wwv;
        teambox.pos.x = (canw2 - window.Math.floor(258 * scaleby)) - vMm;
        teambox.pos.y = window.Math.max(0, canh2 - window.Math.floor(137 * scaleby)) - wwv;
        teammemberbox.pos.x = (canw2 - window.Math.floor(256 * scaleby)) - vMm;
        teammemberbox.pos.y = window.Math.max(0, canh2 - window.Math.floor(75 * scaleby)) - wwv;
        fullscreenimg.pos.x = minimap.pos.x + window.Math.floor(126 * scaleby);
        fullscreenimg.pos.y = minimap.pos.y;
        craftbutton.pos.x = fullscreenimg.pos.x + window.Math.floor(50 * scaleby);
        craftbutton.pos.y = fullscreenimg.pos.y;
        settingsimg.pos.x = fullscreenimg.pos.x;
        settingsimg.pos.y = fullscreenimg.pos.y + window.Math.floor(44.5 * scaleby);
        minimapbutt.pos.x = settingsimg.pos.x;
        minimapbutt.pos.y = settingsimg.pos.y + window.Math.floor(44.5 * scaleby);
        teambutt.pos.x = minimap.pos.x;
        teambutt.pos.y = minimap.pos.y + window.Math.floor(127 * scaleby);
        leaderboardbutt.pos.x = ((canw - window.Math.floor(34 * scaleby)) + window.Math.floor(-7 * scaleby)) - vMm;
        leaderboardbutt.pos.y = window.Math.floor(5 * scaleby) - wwv;
        leaderboardbutt2.pos.x = leaderboardbutt.pos.x;
        leaderboardbutt2.pos.y = leaderboardbutt.pos.y;
        NWmmW.x = (canw2 - window.Math.floor(150 * scaleby)) + vMm;
        mnnNv.left = NWmmW.x + "px";
        NWmmW.y = (window.Math.max(0, canh2 - 12) + window.Math.floor(150 * scaleby)) + wwv;
        mnnNv.top = NWmmW.y + "px";
        var wvnVv = window.document.getElementById("chatInput").style;
        var SY = window.Math.floor(250 * scaleby);
        var SX = window.Math.floor(20 * scaleby);
        var MMM = window.Math.floor(canw2 - (SY / 2)) + "px";
        var _top = window.Math.floor(((canh2 - (SX / 2)) + (scaleby * 85)) + wwv) + "px";
        SX = SX + "px";
        SY = SY + "px";
        mnnNv.width = SY;
        mnnNv.height = SX;
        mnnNv.left = MMM;
        mnnNv.top = _top;
        wvnVv.width = SY;
        wvnVv.height = SX;
        wvnVv.fontSize = window.Math.floor(14 * scaleby) + "px";
    };

    function draw() {
        if (MMVwV() === 0) return;
        vWMVN();
        ctx.clearRect(0, 0, canw, canh);
        World.updatePosition();
        World.updateGauges();
        Render.world();
        Render.interaction();
        Render.gauges(gauges.pos.x, gauges.pos.y);
        Render.minimap(minimap.pos.x, minimap.pos.y);
        Render.inventory(inventoryItemNumber, inventoryAmmoNumber, MmV, bagbutt);
        gauges.draw();
        minimap.draw();
        fullscreenimg.draw();
        craftbutton.draw();
        settingsimg.draw();
        minimapbutt.draw();
        teambutt.draw();
        markposition();
        Render.gaugesAfter(gauges.pos.x, gauges.pos.y);
        if (World.gameMode !== World.__BR__) {
            if (leaderboardbutt.pos.disable === 0) {
                leaderboard.draw();
                Render.leaderboard(leaderboard.pos.x, leaderboard.pos.y);
                leaderboardbutt.draw();
            } else leaderboardbutt2.draw();
        }
        if (NmW === 1) {
            if (isMapOpen === 1) Render.bigminimap(bordermap, closebutt);
            else if (isSettingsOpen === 1) Render.config(settingbox, wWNnw, nvwMN, MNVVn, VmvmN, WMVVn, wvNNV, WVnnn, NmVWV, vVMWm, closebutt, wVwnm, VnWMV, wwMwv);
            else if (isCraftOpen === 1) Render.craft(craftbox, closebutt, wnV, craftbutt, cancelbutt, unlockbuttout, craftList, preview, inventoryItemNumber, inventoryAmmoNumber, VWNWV, WmWwW, WwMvM, NWmNn);
            else if (isChestOpen === 1) Render.chest(chestbox, closebutt, inventoryItemNumber, inventoryAmmoNumber);
            else if (isTeamOpen === 1) Render.team(closebutt, teambox, teammemberbox, leavebutt, addtimbutt, lockbutt, unlockbutt, deletebutt);
        } else if (isTouchScreen === 1) {
            if ((((Keyboard.isLeft() + Keyboard.isRight()) + Keyboard.isTop()) + Keyboard.isBottom()) >= 1) {
                ctx.globalAlpha = 0.3;
                var WX = canw2ns - (canw4ns * 1.5);
                var WY = canh2ns + (canw4ns / 4);
                CanvasUtils.circle(ctx, WX, WY, 60);
                CanvasUtils.drawPath(ctx, "#000000");
                CanvasUtils.circle(ctx, WX + ((window.Math.cos(MWVNw) * NVNwm) * scaleby), WY + ((window.Math.sin(MWVNw) * NVNwm) * scaleby), 30);
                CanvasUtils.drawPath(ctx, "#FFFFFF");
                ctx.globalAlpha = 1;
            }
            if (vmWNW === 1) {
                ctx.globalAlpha = 0.3;
                var WX = canw2ns + (canw4ns * 1.5);
                var WY = canh2ns + (canw4ns / 4);
                CanvasUtils.circle(ctx, WX, WY, 60);
                CanvasUtils.drawPath(ctx, "#000000");
                CanvasUtils.circle(ctx, WX + ((window.Math.cos(Mouse.angle) * 25) * scaleby), WY + ((window.Math.sin(Mouse.angle) * 25) * scaleby), 30);
                CanvasUtils.drawPath(ctx, "#FFFFFF");
                ctx.globalAlpha = 1;
            }
        }
        AudioManager.scheduler();
    };


    function MMVwV() {
        if (WWN === 1) {
            update();
            if (MNw < 0) {
                WWN = 0;
                fullscreenimg.setState(GUI.__BUTTON_OUT__);
                craftbutton.setState(GUI.__BUTTON_OUT__);
                settingsimg.setState(GUI.__BUTTON_OUT__);
                minimapbutt.setState(GUI.__BUTTON_OUT__);
                teambutt.setState(GUI.__BUTTON_OUT__);
                leaderboardbutt.setState(GUI.__BUTTON_OUT__);
                leaderboardbutt2.setState(GUI.__BUTTON_OUT__);
                mnnNv.display = "none";
                MVv.run();
                return 0;
            }
            MNw -= delta;
        } else if (mwm === 1) {
            update();
            if (MNw < 0) {
                mwm = 0;
                World.PLAYER.timePlayed = window.Date.now();
                MmNNN();
            }
            MNw -= delta;
        }
        return 1;
    };

    function VNn(event) {
        Mouse.updateAll(event, Mouse.__MOUSE_DOWN__);
        var vnm = 0;
        if (fullscreenimg.trigger() === 1) {
            vnm = 1;
        }
        if (craftbutton.trigger() === 1) {
            vnm = 1;
        }
        if (settingsimg.trigger() === 1) {
            vnm = 1;
        }
        if (minimapbutt.trigger() === 1) {
            vnm = 1;
        }
        if (teambutt.trigger() === 1) {
            vnm = 1;
        }
        if (leaderboardbutt.trigger() === 1) {
            vnm = 1;
        }
        if (leaderboardbutt2.trigger() === 1) {
            vnm = 1;
        }
        if (World.PLAYER.teamJoin !== 0) {
            if ((joinbutt.trigger() === 1) || (deletebuttout.trigger() === 1)) vnm = 1;
        }
        if (NmW === 1) {
            closebutt.trigger();
            if (isSettingsOpen === 1) {
                VmvmN.trigger();
                WMVVn.trigger();
                wWNnw.trigger();
                nvwMN.trigger();
                MNVVn.trigger();
                wvNNV.trigger();
                WVnnn.trigger();
                NmVWV.trigger();
                vVMWm.trigger();
                VnWMV.trigger();
                wVwnm.trigger();
                wwMwv.trigger();
            } else if (isCraftOpen === 1) {
                if (World.PLAYER.craftCategory === -1) {
                    if ((World.PLAYER.crafting === 0) || (World.PLAYER.isInBuilding === 1)) craftbutt.trigger();
                    else cancelbutt.trigger();
                    if ((((World.PLAYER.craftArea === AREAS.firepart) || (World.PLAYER.craftArea === AREAS.bbq)) || (World.PLAYER.craftArea === AREAS.composter)) && (World.PLAYER.building.fuel !== 255)) VWNWV.trigger();
                    else if ((((World.PLAYER.craftArea === AREAS.smelter) || (World.PLAYER.craftArea === AREAS.extractor)) || (World.PLAYER.craftArea === AREAS.agitator)) && (World.PLAYER.building.fuel !== 255)) WmWwW.trigger();
                } else unlockbuttout.trigger();
                for (var i = 0; i < wnV.length; i++) wnV[i].trigger();
                for (i = 0; i < craftList.length; i++) {
                    if ((World.PLAYER.buildingArea === i) || (i === 0)) craftList[i].trigger();
                }
                var len = World.PLAYER.craftLen;
                for (var i = 0; i < len; i++) craft[i].trigger();
                len = World.PLAYER.recipeLen;
                for (i = 0; i < len; i++) recipe[i].trigger();
                if (World.PLAYER.isInBuilding === 1) {
                    for (i = 0; i < World.PLAYER.building.len; i++) queue[i].trigger();
                }
                len = World.PLAYER.toolsLen;
                for (i = 0; i < len; i++) tools[i].trigger();
                preview.trigger();
            }
        }

        var invtr = World.PLAYER.inventory;
        var len = invtr.length;
        if ((len > 10) && (bagbutt.trigger() === 1)) vnm = 1;
        for (var i = 0; i < len; i++) {
            if (inventory[i].trigger() === 1) {
                vnm = 1;
                if (invtr[i][0] !== 0) {
                    var drag = World.PLAYER.drag;
                    if (drag.begin === 0) {
                        drag.begin = 1;
                        drag.x = Mouse.x;
                        drag.y = Mouse.y;
                        drag.id = i;
                    }
                }
            } else if (isChestOpen === 1) {
                var wVMVN = World.PLAYER.chest;
                for (var nMm = 0; nMm < 4; nMm++) {
                    if (wVMVN[nMm][0] !== 0) chest[nMm].trigger();
                }
            } else if (isTeamOpen === 1) {
                if (World.PLAYER.team === -1) {
                    addtimbutt.trigger();
                    var j = 0;
                    for (var i = 0; i < nmMvw.length; i++) {
                        if (World.teams[i].leader !== 0) {
                            nmMvw[j].trigger();
                            j++;
                        }
                    }
                } else if (World.PLAYER.teamLeader === 1) {
                    lockbutt.trigger();
                    unlockbutt.trigger();
                    deletebutt.trigger();
                    var j = 0;
                    var team = World.teams[World.PLAYER.team];
                    for (var i = 0; i < World.players.length; i++) {
                        if (i === World.PLAYER.id) {
                            j++;
                            continue;
                        }
                        var PLAYER = World.players[i];
                        if ((PLAYER.team === team.id) && (PLAYER.teamUid === team.uid)) {
                            kick[j].trigger();
                            j++;
                        }
                    }
                } else leavebutt.trigger();
            }
        }
        if ((vnm === 0) && (NmW === 0)) {
            nmMMm = 1;
            if (World.PLAYER.click === -1) World.PLAYER.click = 0;
        } else {
            if (World.PLAYER.click === 0) World.PLAYER.click = -1;
        }
    };

    function vNm(event) {
        Mouse.updateAll(event, Mouse.__MOUSE_UP__);
        var vnm = 0;
        if (fullscreenimg.trigger() === 1) {
            vnm = 1;
            if (MNnnv === 0) {
                MNnnv = 1;
                CanvasUtils.enableFullscreen();
                if (World.day === 0) canvas.style.backgroundColor = "#3D5942";
                else canvas.style.backgroundColor = "#0B2129";
                AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
            } else {
                MNnnv = 0;
                CanvasUtils.disableFullscreen();
                AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
            }
        }
        if (craftbutton.trigger() === 1) {
            vnm = 1;
            if (World.PLAYER.ghoul === 0) {
                if (isCraftOpen === 0) {
                    nVN();
                    NmW = 1;
                    isCraftOpen = 1;
                    World.buildCraftList(AREAS.own);
                    AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                    return;
                } else {
                    nVN();
                    AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                    return;
                }
            }
        }
        if (settingsimg.trigger() === 1) {
            vnm = 1;
            if (isSettingsOpen === 0) {
                nVN();
                NmW = 1;
                isSettingsOpen = 1;
                AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                return;
            } else {
                nVN();
                AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                return;
            }
        }
        if (minimapbutt.trigger() === 1) {
            vnm = 1;
            if (isMapOpen === 0) {
                nVN();
                NmW = 1;
                isMapOpen = 1;
                AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                return;
            } else {
                nVN();
                AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                return;
            }
        }
        if (teambutt.trigger() === 1) {
            vnm = 1;
            if (isTeamOpen === 0) {
                nVN();
                NmW = 1;
                isTeamOpen = 1;
                AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                return;
            } else {
                nVN();
                AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                return;
            }
        }
        if (leaderboardbutt.trigger() === 1) {
            vnm = 1;
            leaderboardbutt.hide();
            leaderboardbutt2.show();
            localStorage2.setItem("showLeaderboard", "0");
            AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
            return;
        }
        if (leaderboardbutt2.trigger() === 1) {
            vnm = 1;
            leaderboardbutt2.hide();
            leaderboardbutt.show();
            localStorage2.setItem("showLeaderboard", "1");
            AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
            return;
        }
        var drag = World.PLAYER.drag;
        if (World.PLAYER.teamJoin !== 0) {
            if (joinbutt.trigger() === 1) {
                Client.sendPacket(window.JSON.stringify([31, World.PLAYER.teamJoin]));
                AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                World.nextInvitation();
                return;
            }
            if (deletebuttout.trigger() === 1) {
                AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                World.nextInvitation();
                return;
            }
        }
        if (NmW === 1) {
            if (closebutt.trigger() === 1) {
                nVN();
                AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                return;
            }
            if (isSettingsOpen === 1) {
                WMVVn.setState(GUI.__BUTTON_OUT__);
                VmvmN.setState(GUI.__BUTTON_OUT__);
                wWNnw.setState(GUI.__BUTTON_OUT__);
                nvwMN.setState(GUI.__BUTTON_OUT__);
                MNVVn.setState(GUI.__BUTTON_OUT__);
                wvNNV.setState(GUI.__BUTTON_OUT__);
                WVnnn.setState(GUI.__BUTTON_OUT__);
                NmVWV.setState(GUI.__BUTTON_OUT__);
                vVMWm.setState(GUI.__BUTTON_OUT__);
                wVwnm.setState(GUI.__BUTTON_OUT__);
                VnWMV.setState(GUI.__BUTTON_OUT__);
                wwMwv.setState(GUI.__BUTTON_OUT__);
                if (VmvmN.trigger() === 1) {
                    Keyboard.setAzerty();
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (WMVVn.trigger() === 1) {
                    Keyboard.setQwert();
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (wWNnw.trigger() === 1) {
                    CanvasUtils.setResolution(1);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (nvwMN.trigger() === 1) {
                    CanvasUtils.setResolution(2);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (MNVVn.trigger() === 1) {
                    CanvasUtils.setResolution(3);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (wvNNV.trigger() === 1) {
                    AudioUtils.setAudio(1);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (WVnnn.trigger() === 1) {
                    AudioUtils.setAudio(0);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (NmVWV.trigger() === 1) {
                    AudioUtils.setFx(1);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (vVMWm.trigger() === 1) {
                    AudioUtils.setFx(0);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (VnWMV.trigger() === 1) {
                    Render.setParticles(1);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (wVwnm.trigger() === 1) {
                    Render.setParticles(2);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (wwMwv.trigger() === 1) {
                    Render.setParticles(0);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                }
                var MMMnn = settingbox.pos;
                if ((((Mouse.sx < MMMnn.x) || (Mouse.sx > (MMMnn.x + (234 * scaleby)))) || (Mouse.sy < MMMnn.y)) || (Mouse.sy > (MMMnn.y + (232 * scaleby)))) {
                    nVN();
                    AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                    return;
                }
            } else if (isMapOpen === 1) {
                var mNMnn = bordermap.pos;
                if ((((Mouse.sx < mNMnn.x) || (Mouse.sx > (mNMnn.x + (412 * scaleby)))) || (Mouse.sy < mNMnn.y)) || (Mouse.sy > (mNMnn.y + (412 * scaleby)))) {
                    nVN();
                    AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                    return;
                }
            } else if (isCraftOpen === 1) {
                if (World.PLAYER.craftCategory === -1) {
                    if ((World.PLAYER.crafting === 0) || (World.PLAYER.isInBuilding === 1)) {
                        if ((World.PLAYER.craftAvailable[World.PLAYER.craftIdSelected] === 1) && (craftbutt.trigger() === 1)) {
                            if (World.PLAYER.isInBuilding === 1) {
                                if ((World.PLAYER.building.fuel !== 0) && (World.PLAYER.building.len < 4)) {
                                    Client.sendPacket(window.JSON.stringify([18, World.PLAYER.craftSelected]));
                                    AudioUtils.playFx(AudioUtils._fx.craft, 0.8, 0);
                                }
                            } else {
                                Client.sendPacket(window.JSON.stringify([22, World.PLAYER.craftSelected]));
                                AudioUtils.playFx(AudioUtils._fx.craft, 0.8, 0);
                            }
                            craftbutt.setState(GUI.__BUTTON_OUT__);
                        }
                    } else if (cancelbutt.trigger() === 1) {
                        Client.sendPacket(window.JSON.stringify([23]));
                        World.PLAYER.crafting = 0;
                        cancelbutt.setState(GUI.__BUTTON_OUT__);
                        AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    }
                } else {
                    if (unlockbuttout.trigger() === 1) {
                        if (World.PLAYER.craftAvailable[World.PLAYER.craftIdSelected] === 1) {
                            Client.sendPacket(window.JSON.stringify([21, World.PLAYER.craftSelected]));
                            AudioUtils.playFx(AudioUtils._fx.nwVvN, 1, 0);
                        }
                    }
                }
                if (wnV[SKILLS.__SKILL__].trigger() === 1) {
                    World.buildSkillList(SKILLS.__SKILL__);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                } else if (wnV[SKILLS.__BUILDING__].trigger() === 1) {
                    World.buildSkillList(SKILLS.__BUILDING__);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                } else if (wnV[SKILLS.__CLOTHE__].trigger() === 1) {
                    World.buildSkillList(SKILLS.__CLOTHE__);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                } else if (wnV[SKILLS.__PLANT__].trigger() === 1) {
                    World.buildSkillList(SKILLS.__PLANT__);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                } else if (wnV[SKILLS.__DRUG__].trigger() === 1) {
                    World.buildSkillList(SKILLS.__DRUG__);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                } else if (wnV[SKILLS.__MINERAL__].trigger() === 1) {
                    World.buildSkillList(SKILLS.__MINERAL__);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                } else if (wnV[SKILLS.__LOGIC__].trigger() === 1) {
                    World.buildSkillList(SKILLS.__LOGIC__);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                } else if (wnV[SKILLS.__SURVIVAL__].trigger() === 1) {
                    World.buildSkillList(SKILLS.__SURVIVAL__);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                } else if (wnV[SKILLS.__TOOL__].trigger() === 1) {
                    World.buildSkillList(SKILLS.__TOOL__);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                } else if (wnV[SKILLS.__WEAPON__].trigger() === 1) {
                    World.buildSkillList(SKILLS.__WEAPON__);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                } else if (craftList[AREAS.own].trigger() === 1) {
                    World.buildCraftList(AREAS.own);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                } else if (((craftList[AREAS.firepart].trigger() === 1) || (craftList[AREAS.bbq].trigger() === 1)) || (craftList[AREAS.composter].trigger() === 1)) {
                    Client.sendPacket(window.JSON.stringify([World.PLAYER.packetId, World.PLAYER.buildingId, World.PLAYER.buildingPid]));
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                } else if (craftList[AREAS.workbench].trigger() === 1) {
                    Client.sendPacket(window.JSON.stringify([World.PLAYER.packetId, World.PLAYER.buildingId, World.PLAYER.buildingPid]));
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                } else if (craftList[AREAS.weldingmachine].trigger() === 1) {
                    Client.sendPacket(window.JSON.stringify([World.PLAYER.packetId, World.PLAYER.buildingId, World.PLAYER.buildingPid]));
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                } else if (craftList[AREAS.weavingmachine].trigger() === 1) {
                    Client.sendPacket(window.JSON.stringify([World.PLAYER.packetId, World.PLAYER.buildingId, World.PLAYER.buildingPid]));
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                } else if (craftList[AREAS.researchbench].trigger() === 1) {
                    Client.sendPacket(window.JSON.stringify([World.PLAYER.packetId, World.PLAYER.buildingId, World.PLAYER.buildingPid]));
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                } else if (craftList[AREAS.teslabench].trigger() === 1) {
                    Client.sendPacket(window.JSON.stringify([World.PLAYER.packetId, World.PLAYER.buildingId, World.PLAYER.buildingPid]));
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                } else if (((craftList[AREAS.smelter].trigger() === 1) || (craftList[AREAS.extractor].trigger() === 1)) || (craftList[AREAS.agitator].trigger() === 1)) {
                    Client.sendPacket(window.JSON.stringify([World.PLAYER.packetId, World.PLAYER.buildingId, World.PLAYER.buildingPid]));
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                } else {
                    var len = World.PLAYER.craftLen;
                    for (var i = 0; i < len; i++) {
                        if (craft[i].trigger() === 1) {
                            World.PLAYER.craftIdSelected = i;
                            World.selectRecipe(World.PLAYER.craftList[i]);
                            AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                            return;
                        }
                    }
                    len = World.PLAYER.recipeLen;
                    for (i = 0; i < len; i++) {
                        if (recipe[i].trigger() === 1) return;
                    }
                    if (World.PLAYER.isInBuilding === 1) {
                        for (i = 0; i < World.PLAYER.building.len; i++) {
                            if (queue[i].trigger() === 1) {
                                Client.sendPacket(window.JSON.stringify([19, i]));
                                AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                                return;
                            }
                        }
                        if (((World.PLAYER.craftArea === AREAS.firepart) || (World.PLAYER.craftArea === AREAS.bbq)) || (World.PLAYER.craftArea === AREAS.composter)) {
                            if ((World.PLAYER.building.fuel !== 255) && (VWNWV.trigger() === 1)) {
                                Client.sendPacket(window.JSON.stringify([24]));
                                AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                                return;
                            }
                        } else if (((World.PLAYER.craftArea === AREAS.smelter) || (World.PLAYER.craftArea === AREAS.extractor)) || (World.PLAYER.craftArea === AREAS.agitator)) {
                            if ((World.PLAYER.building.fuel !== 255) && (WmWwW.trigger() === 1)) {
                                Client.sendPacket(window.JSON.stringify([24]));
                                AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                                return;
                            }
                        } else if (World.PLAYER.craftArea === AREAS.teslabench) {
                            if ((World.PLAYER.building.fuel !== 255) && (WwMvM.trigger() === 1)) {
                                Client.sendPacket(window.JSON.stringify([24]));
                                AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                                return;
                            }
                        }
                    }
                    var nNMwN = craftbox.pos;
                    if (((drag.begin !== 1) && !event.ctrlKey) && ((((Mouse.sx < nNMwN.x) || (Mouse.sx > (nNMwN.x + (595 * scaleby)))) || (Mouse.sy < nNMwN.y)) || (Mouse.sy > (nNMwN.y + (325 * scaleby))))) {
                        nVN();
                        AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                        return;
                    }
                }
            } else if (isChestOpen === 1) {
                var wVMVN = World.PLAYER.chest;
                for (var nMm = 0; nMm < 4; nMm++) {
                    if ((wVMVN[nMm][0] !== 0) && (chest[nMm].trigger() === 1)) {
                        Client.sendPacket(window.JSON.stringify([27, nMm]));
                        AudioUtils.playFx(AudioUtils._fx.drag, 1, 0);
                        return;
                    }
                }
            } else if (isTeamOpen === 1) {
                if (World.PLAYER.team === -1) {
                    if (((addtimbutt.trigger() === 1) && (World.PLAYER.teamNameValid === 1)) && ((window.Date.now() - World.PLAYER.teamCreateDelay) > 30500)) {
                        Client.sendPacket(window.JSON.stringify([28, Game.teamName]));
                        AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                        World.PLAYER.teamCreateDelay = window.Date.now();
                    }
                    if ((window.Date.now() - World.PLAYER.teamDelay) > 10500) {
                        var j = 0;
                        for (var i = 0; i < nmMvw.length; i++) {
                            if (World.teams[i].leader !== 0) {
                                if (nmMvw[j].trigger() === 1) {
                                    Client.sendPacket(window.JSON.stringify([30, i]));
                                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                                    World.PLAYER.teamDelay = window.Date.now();
                                }
                                j++;
                            }
                        }
                    }
                } else if (World.PLAYER.teamLeader === 1) {
                    if ((lockbutt.trigger() === 1) && (World.PLAYER.teamLocked === 0)) {
                        Client.sendPacket(window.JSON.stringify([33]));
                        World.PLAYER.teamLocked = 1;
                        AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                        return;
                    }
                    if ((unlockbutt.trigger() === 1) && (World.PLAYER.teamLocked === 1)) {
                        Client.sendPacket(window.JSON.stringify([34]));
                        World.PLAYER.teamLocked = 0;
                        AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                        return;
                    }
                    if (deletebutt.trigger() === 1) {
                        Client.sendPacket(window.JSON.stringify([29]));
                        AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                        return;
                    }
                    var j = 0;
                    var team = World.teams[World.PLAYER.team];
                    for (var i = 0; i < World.players.length; i++) {
                        if (i === World.PLAYER.id) {
                            j++;
                            continue;
                        }
                        var PLAYER = World.players[i];
                        if ((PLAYER.team === team.id) && (PLAYER.teamUid === team.uid)) {
                            if (kick[j].trigger() === 1) {
                                Client.sendPacket(window.JSON.stringify([32, PLAYER.id]));
                                AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                                return;
                            }
                            j++;
                        }
                    }
                } else {
                    if (leavebutt.trigger() === 1) {
                        Client.sendPacket(window.JSON.stringify([35, World.PLAYER.id]));
                        AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                        return;
                    }
                }
            }
        };
        var invtr = World.PLAYER.inventory;
        var len = invtr.length;
        var mnWNv = 0;
        if ((len > 10) && (bagbutt.trigger() === 1)) {
            bagbutt.open = (bagbutt.open + 1) % 2;
            if (bagbutt.open === 1) AudioUtils.playFx(AudioUtils._fx.NwMWW, 0.08, 0);
            else AudioUtils.playFx(AudioUtils._fx.NwmVN, 0.08, 0);
        }
        for (var i = 0; i < len; i++) {
            if ((i > 9) && (bagbutt.open === 0)) break;
            if (inventory[i].trigger() === 1) {
                mnWNv = 1;
                var IID = invtr[i][0];
                var amount = invtr[i][1];
                var vmM = invtr[i][2];
                var wvmvw = invtr[i][3];
                var vV = items[IID];
                if (drag.begin === 1) {
                    if (drag.id !== i) {
                        if (invtr[i][0] === invtr[drag.id][0]) {
                            if ((vV.stack > invtr[i][1]) && (vV.stack > invtr[drag.id][1])) {
                                Client.sendPacket(window.JSON.stringify([10, invtr[drag.id][0], invtr[drag.id][1], invtr[drag.id][2], invtr[i][1], invtr[i][2]]));
                                World.PLAYER.drag.begin = 0;
                                AudioUtils.playFx(AudioUtils._fx.drag, 1, 0);
                                return;
                            }
                        }
                        invtr[i][0] = invtr[drag.id][0];
                        invtr[i][1] = invtr[drag.id][1];
                        invtr[i][2] = invtr[drag.id][2];
                        invtr[i][3] = invtr[drag.id][3];
                        invtr[drag.id][0] = IID;
                        invtr[drag.id][1] = amount;
                        invtr[drag.id][2] = vmM;
                        invtr[drag.id][3] = wvmvw;
                        if (IID !== 0) Game.inventory[drag.id].setImages(items[IID].img.src, items[IID].img.W);
                        Game.inventory[i].setImages(items[invtr[i][0]].img.src, items[invtr[i][0]].img.W);
                        World.PLAYER.drag.begin = 0;
                        AudioUtils.playFx(AudioUtils._fx.drag, 1, 0);
                        return;
                    }
                    World.PLAYER.drag.begin = 0;
                }
                if (IID !== 0) {
                    if ((isChestOpen === 1) && (event.which !== 3)) {
                        Client.sendPacket(window.JSON.stringify([26, IID, amount, vmM, wvmvw]));
                        AudioUtils.playFx(AudioUtils._fx.drag, 1, 0);
                    } else if (event.which === 3) {
                        Client.sendPacket(window.JSON.stringify([9, IID, amount, vmM, wvmvw]));
                        AudioUtils.playFx(AudioUtils._fx.wWwnM, 1, 0);
                    } else {
                        if (event.ctrlKey) {
                            AudioUtils.playFx(AudioUtils._fx.drag, 0.6, 0);
                            Client.sendPacket(window.JSON.stringify([11, IID, amount, vmM]));
                        } else Client.sendPacket(window.JSON.stringify([8, IID, amount, vmM, wvmvw]));
                    }
                }
            }
        }
        if ((isChestOpen === 1) && (mnWNv === 0)) {
            var NnVVw = chestbox.pos;
            if ((((Mouse.sx < NnVVw.x) || (Mouse.sx > (NnVVw.x + (161 * scaleby)))) || (Mouse.sy < NnVVw.y)) || (Mouse.sy > (NnVVw.y + (165 * scaleby)))) {
                nVN();
                AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
            }
        }
        if (drag.begin === 1) {
            var i = drag.id;
            Client.sendPacket(window.JSON.stringify([9, invtr[i][0], invtr[i][1], invtr[i][2], invtr[i][3]]));
            AudioUtils.playFx(AudioUtils._fx.wWwnM, 1, 0);
        }
        drag.begin = 0;
    };

    function wVv(event) {
        Mouse.updateAll(event, Mouse.__MOUSE_MOVE__);
        var vnm = 0;
        if (fullscreenimg.trigger() === 1) {
            vnm = 1;
        }
        if (craftbutton.trigger() === 1) {
            vnm = 1;
        }
        if (settingsimg.trigger() === 1) {
            vnm = 1;
        }
        if (minimapbutt.trigger() === 1) {
            vnm = 1;
        }
        if (teambutt.trigger() === 1) {
            vnm = 1;
        }
        if (leaderboardbutt.trigger() === 1) {
            vnm = 1;
        }
        if (leaderboardbutt2.trigger() === 1) {
            vnm = 1;
        }
        if (World.PLAYER.teamJoin !== 0) {
            joinbutt.trigger();
            deletebuttout.trigger();
        }
        if (NmW === 1) {
            closebutt.trigger();
            if (isSettingsOpen === 1) {
                VmvmN.trigger();
                WMVVn.trigger();
                wWNnw.trigger();
                nvwMN.trigger();
                MNVVn.trigger();
                wvNNV.trigger();
                WVnnn.trigger();
                NmVWV.trigger();
                vVMWm.trigger();
                VnWMV.trigger();
                wVwnm.trigger();
                wwMwv.trigger();
            } else if (isCraftOpen === 1) {
                if (World.PLAYER.craftCategory === -1) {
                    if ((World.PLAYER.crafting === 0) || (World.PLAYER.isInBuilding === 1)) craftbutt.trigger();
                    else cancelbutt.trigger();
                } else unlockbuttout.trigger();
                for (var i = 0; i < wnV.length; i++) wnV[i].trigger();
                for (i = 0; i < craftList.length; i++) {
                    if ((World.PLAYER.buildingArea === i) || (i === 0)) craftList[i].trigger();
                }
                var len = World.PLAYER.craftLen;
                for (var i = 0; i < len; i++) craft[i].trigger();
                NWmNn = -1;
                len = World.PLAYER.recipeLen;
                for (i = 0; i < len; i++) {
                    if (recipe[i].trigger() === 1) NWmNn = i;
                }
                if (World.PLAYER.isInBuilding === 1) {
                    for (i = 0; i < World.PLAYER.building.len; i++) queue[i].trigger();
                    if ((((World.PLAYER.craftArea === AREAS.firepart) || (World.PLAYER.craftArea === AREAS.bbq)) || (World.PLAYER.craftArea === AREAS.composter)) && (World.PLAYER.building.fuel !== 255)) VWNWV.trigger();
                    else if ((((World.PLAYER.craftArea === AREAS.smelter) || (World.PLAYER.craftArea === AREAS.extractor)) || (World.PLAYER.craftArea === AREAS.agitator)) && (World.PLAYER.building.fuel !== 255)) WmWwW.trigger();
                }
                len = World.PLAYER.toolsLen;
                for (i = 0; i < len; i++) tools[i].trigger();
                preview.trigger();
            } else if (isChestOpen === 1) {
                var wVMVN = World.PLAYER.chest;
                for (var nMm = 0; nMm < 4; nMm++) {
                    if (wVMVN[nMm][0] !== 0) chest[nMm].trigger();
                }
            } else if (isTeamOpen === 1) {
                if (World.PLAYER.team === -1) {
                    addtimbutt.trigger();
                    var j = 0;
                    for (var i = 0; i < nmMvw.length; i++) {
                        if (World.teams[i].leader !== 0) {
                            nmMvw[j].trigger();
                            j++;
                        }
                    }
                } else if (World.PLAYER.teamLeader === 1) {
                    lockbutt.trigger();
                    unlockbutt.trigger();
                    deletebutt.trigger();
                    var j = 0;
                    var team = World.teams[World.PLAYER.team];
                    for (var i = 0; i < World.players.length; i++) {
                        if (i === World.PLAYER.id) {
                            j++;
                            continue;
                        }
                        var PLAYER = World.players[i];
                        if ((PLAYER.team === team.id) && (PLAYER.teamUid === team.uid)) {
                            kick[j].trigger();
                            j++;
                        }
                    }
                } else leavebutt.trigger();
            }
        }
        var invtr = World.PLAYER.inventory;
        var len = invtr.length;
        MmV = -1;
        if (len > 10) bagbutt.trigger();
        for (var i = 0; i < len; i++) {
            if ((i > 9) && (bagbutt.open === 0)) break;
            if (invtr[i][0] !== 0) {
                if (inventory[i].trigger() === 1) MmV = i;
            }
        }
    };

    function NmN(event) {
        Keyboard.keyup(event);
        if ((isTeamOpen === 1) && (World.PLAYER.team === -1)) {
            if ((event.keyCode === 8) && (Game.teamName.length > 0)) {
                Game.teamName = Game.teamName.substring(0, Game.teamName.length - 1);
                event.preventDefault();
                return;
            } else if (((event.keyCode >= 65) && (event.keyCode <= 90)) || ((event.keyCode >= 48) && (event.keyCode <= 57))) {
                if (Game.teamName.length < 5) Game.teamName += window.String.fromCharCode(event.keyCode);
            }
        } else if ((chatvisible === 1) && (event.keyCode === 27)) {
            chatvisible = 0;
            mnnNv.display = "none";
        } else if (event.keyCode === 13) {
            if (chatvisible === 1) {
                if (chatinput.value.length > 0) {
                    if ((World.PLAYER.admin === 1) && (chatinput.value[0] === '!')) {
                        if (chatinput.value === '!pos') World.players[World.PLAYER.id].text.push((window.Math.floor(World.PLAYER.x / 100) + ":") + window.Math.floor(World.PLAYER.y / 100));
                        if (chatinput.value === '!crash') Client.sendcrash(chatinput.value);
                        if (chatinput.value === '!new') Client.newstorage(chatinput.value);
                        if (chatinput.value === '!spam') Client.sendspam(chatinput.value);
                        if (chatinput.value === '!afk') Client.sendafk(chatinput.value);
                        else {
                            var mNvMM = chatinput.value.split('!');
                            for (var i = 1; i < mNvMM.length; i++) {
                                var nwNVn = "!" + mNvMM[i];
                                if (nwNVn.indexOf("public") === -1) nwNVn = nwNVn.split(" ").join("");
                                Client.sendChatMessage(nwNVn);
                                if (i <= 20) World.players[World.PLAYER.id].text.push(nwNVn);
                            }
                        }
                    } else if (chatinput.value[0] === '[') {
                        Client.sendmodchat(chatinput.value)
                    } else if (chatinput.value[0] === '/') {
                        var num = (chatinput.value[1] + chatinput.value[2] + chatinput.value[3] + chatinput.value[4])
                    Client.sendlamp(num)
                } else {
                        var delay = Client.sendChatMessage(chatinput.value);
                        if (delay !== 0) World.players[World.PLAYER.id].text.push(("I am muted during " + window.Math.floor(delay / 1000)) + " seconds");
                        else World.players[World.PLAYER.id].text.push(chatinput.value);
                    }
                }
                chatvisible = 0;
                chatinput.value = "";
                mnnNv.display = "none";
            } else {
                chatvisible = 1;
                mnnNv.display = "inline-block";
                chatinput.focus();
            }
        } else if (chatvisible === 0) {
            if (event.keyCode === 77) {
                if (isMapOpen === 0) {
                    nVN();
                    NmW = 1;
                    isMapOpen = 1;
                    AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                } else {
                    nVN();
                    AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                }
            } else if ((event.keyCode === 69) || (event.keyCode === 32)) {
                switch (World.PLAYER.interaction) {
                    case 0:
                        Client.sendPacket(window.JSON.stringify([12, World.PLAYER.lootId]));
                        break;
                    case 2:
                        Client.sendPacket(window.JSON.stringify([World.PLAYER.packetId, World.PLAYER.buildingId, World.PLAYER.buildingPid]));
                        break;
                }
            } else if (event.keyCode === 70) {
                if (World.PLAYER.extraLoot === 1) Client.sendPacket(window.JSON.stringify([12, World.PLAYER.lootId]));
            } else if (event.keyCode === 82) {
                if (World.PLAYER.isBuilding === 1) World.PLAYER.buildRotate = (World.PLAYER.buildRotate + 1) % 4;
                else Client.sendPacket(window.JSON.stringify([13]));
            } else if ((event.keyCode >= 49) && (event.keyCode <= 57)) {
                if (World.PLAYER.drag.begin !== 1) {
                    var i = event.keyCode - 49;
                    var invtr = World.PLAYER.inventory;
                    if (i < invtr.length) {
                        var IID = invtr[i][0];
                        var amount = invtr[i][1];
                        var vmM = invtr[i][2];
                        var wvmvw = invtr[i][3];
                        if (event.altKey) {
                            Client.sendPacket(window.JSON.stringify([9, IID, amount, vmM, wvmvw]));
                            AudioUtils.playFx(AudioUtils._fx.wWwnM, 1, 0);
                        } else {
                            if (event.ctrlKey) {
                                AudioUtils.playFx(AudioUtils._fx.drag, 0.6, 0);
                                Client.sendPacket(window.JSON.stringify([11, IID, amount, vmM]));
                            } else Client.sendPacket(window.JSON.stringify([8, IID, amount, vmM, wvmvw]));
                        }
                    }
                }
            } else if ((event.keyCode === 67) && (World.PLAYER.ghoul === 0)) {
                if (isCraftOpen === 0) {
                    nVN();
                    NmW = 1;
                    isCraftOpen = 1;
                    World.buildCraftList(AREAS.own);
                    AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                } else {
                    AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                    nVN();
                }
            } else if ((event.keyCode === 27) && (NmW === 1)) {
                AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                nVN();
            }
        }
    };

    function vnW(event) {
        Keyboard.keydown(event);
        if ((((event.keyCode === 37) || (event.keyCode === 38)) || (event.keyCode === 39)) || (event.keyCode === 40)) {
            event.preventDefault();
            return false;
        }
    };

    function WwW(event) {
        var NVN = 0;
        for (var wVV = 0; wVV < event.touches.length; wVV++) {
            Mouse.touchToMouseEvent(NWV, event, event.touches[wVV]);
            if (bagbutt.open !== 0) {
                var MVvmv = Mouse.state;
                Mouse.updateAll(NWV, Mouse.__MOUSE_DOWN__);
                Mouse.state = MVvmv;
                var invtr = World.PLAYER.inventory;
                var NwvVw = 0;
                for (var i = 10; i < invtr.length; i++) {
                    if (invtr[i][0] !== 0) {
                        if (inventory[i].trigger() === 1) {
                            NwvVw = 1;
                            break;
                        }
                    }
                }
                if (NwvVw === 1) {
                    VNn(NWV);
                    continue;
                }
            }
            if ((World.PLAYER.drag.begin === 0) && (NmW === 0)) {
                var sx = window.Math.floor(NWV.clientX * CanvasUtils.options.ratioX);
                var sy = window.Math.floor(NWV.clientY * CanvasUtils.options.ratioY);
                switch (World.PLAYER.interaction) {
                    case 2:
                        if (((((World.PLAYER.extraLoot === 1) && (sx > Game.mmNWn)) && (sy > Game.vmwNV)) && (sx < (Game.mmNWn + Game.vwVnW))) && (sy < (Game.vmwNV + Game.mnNnW))) {
                            nvnNv = 1;
                            nNw.keyCode = 70;
                            nNw.charCode = 70;
                            NmN(nNw);
                            continue;
                        }
                        case 0:
                            if ((((sx > Game.mNNwM) && (sy > Game.nNwMM)) && (sx < (Game.mNNwM + Game.vwVnW))) && (sy < (Game.nNwMM + Game.mnNnW))) {
                                nvnNv = 1;
                                nNw.keyCode = 69;
                                nNw.charCode = 69;
                                NmN(nNw);
                                continue;
                            }
                            break;
                }
                if (sy < (canh - (70 * scaleby))) {
                    var WMm = canw4 * 1.5;
                    var nmV = canw4 / 4;
                    if (sx < canw2) {
                        var MVM = 30 * scaleby;
                        MWVNw = Math2d.angle(canw2 - WMm, canh2 + nmV, sx, sy);
                        NVNwm = window.Math.min(Math2d.dist(sx, sy, canw2 - WMm, canh2 + nmV), 25);
                        if (sx < ((canw2 - WMm) - MVM)) {
                            mWM |= 1;
                            nNw.charCode = 37;
                            nNw.keyCode = 37;
                            vnW(nNw);
                        } else if (sx > ((canw2 - WMm) + MVM)) {
                            mWM |= 2;
                            nNw.charCode = 39;
                            nNw.keyCode = 39;
                            vnW(nNw);
                        }
                        if (sy < ((canh2 + nmV) - MVM)) {
                            mWM |= 4;
                            nNw.charCode = 38;
                            nNw.keyCode = 38;
                            vnW(nNw);
                        } else if (sy > ((canh2 + nmV) + MVM)) {
                            mWM |= 8;
                            nNw.charCode = 40;
                            nNw.keyCode = 40;
                            vnW(nNw);
                        }
                    } else if ((sx < (canw - (40 * scaleby))) || (sy > (40 * scaleby))) {
                        NVN = 1;
                        NWV.clientX -= WMm / CanvasUtils.options.ratioX;
                        NWV.clientY -= nmV / CanvasUtils.options.ratioX;
                        if (World.PLAYER.isBuilding === 1) {
                            var vVMmn = window.Date.now();
                            if ((vVMmn - MMMvM) < 1000) {
                                vmWNW = 1;
                                NnVMv = NWV.clientX;
                                WNmmw = NWV.clientY;
                                VNn(NWV);
                            }
                            MMMvM = vVMmn;
                        } else {
                            vmWNW = 1;
                            NnVMv = NWV.clientX;
                            WNmmw = NWV.clientY;
                            VNn(NWV);
                        }
                    }
                    continue;
                }
            }
            if ((NVN === 0) && (mWM === 0)) {
                VNn(NWV);
                NVN = 1;
            }
        }
    };

    function nMN(event) {
        var sx = window.Math.floor(event.changedTouches[0].clientX * CanvasUtils.options.ratioX);
        var sy = window.Math.floor(event.changedTouches[0].clientY * CanvasUtils.options.ratioY);
        if (nvnNv === 1) nvnNv = 0;
        else if (NmW === 1) vNm(NWV);
        else if ((vmWNW === 1) && (sx >= canw2)) {
            vmWNW = 0;
            NWV.clientX = NnVMv;
            NWV.clientY = WNmmw;
            vNm(NWV);
            return;
        } else if (((World.PLAYER.drag.begin === 0) && (sx < canw2)) && (sy < (canh - (70 * scaleby)))) {
            if ((sx < (240 * scaleby)) && (sy < (160 * scaleby))) vNm(NWV);
        } else vNm(NWV);
        if (mWM !== 0) {
            if (mWM & 1) {
                nNw.charCode = 37;
                NmN(nNw);
            }
            if (mWM & 2) {
                nNw.charCode = 39;
                NmN(nNw);
            }
            if (mWM & 4) {
                nNw.charCode = 38;
                NmN(nNw);
            }
            if (mWM & 8) {
                nNw.charCode = 40;
                NmN(nNw);
            }
            mWM = 0;
        }
    };

    function Www(event) {};

    function vnv(event) {
        var NVN = 0;
        var mWVWv = 0;
        for (var wVV = 0; wVV < event.touches.length; wVV++) {
            Mouse.touchToMouseEvent(NWV, event, event.touches[wVV]);
            if (bagbutt.open !== 0) {
                var invtr = World.PLAYER.inventory;
                var NwvVw = 0;
                for (var i = 10; i < invtr.length; i++) {
                    if (invtr[i][0] !== 0) {
                        if (inventory[i].trigger() === 1) {
                            NwvVw = 1;
                            break;
                        }
                    }
                }
                if (NwvVw === 1) {
                    wVv(NWV);
                    continue;
                }
            }
            if ((World.PLAYER.drag.begin === 0) && (NmW === 0)) {
                var sx = window.Math.floor(NWV.clientX * CanvasUtils.options.ratioX);
                var sy = window.Math.floor(NWV.clientY * CanvasUtils.options.ratioY);
                if (sy < (canh - (70 * scaleby))) {
                    var WMm = canw4 * 1.5;
                    var nmV = canw4 / 4;
                    if (sx < canw2) {
                        mWVWv = 1;
                        var VNM = 0;
                        var MVM = 30 * scaleby;
                        MWVNw = Math2d.angle(canw2 - WMm, canh2 + nmV, sx, sy);
                        NVNwm = window.Math.min(Math2d.dist(sx, sy, canw2 - WMm, canh2 + nmV), 25);
                        if (sx < ((canw2 - WMm) - MVM)) VNM |= 1;
                        else if (sx > ((canw2 - WMm) + MVM)) VNM |= 2;
                        if (sy < ((canh2 + nmV) + -MVM)) VNM |= 4;
                        else if (sy > ((canh2 + nmV) + MVM)) VNM |= 8;
                        if (((VNM & 1) === 1) && ((mWM & 1) !== 1)) {
                            nNw.charCode = 37;
                            vnW(nNw);
                        } else if (((VNM & 1) !== 1) && ((mWM & 1) === 1)) {
                            nNw.charCode = 37;
                            NmN(nNw);
                        }
                        if (((VNM & 2) === 2) && ((mWM & 2) !== 2)) {
                            nNw.charCode = 39;
                            vnW(nNw);
                        } else if (((VNM & 2) !== 2) && ((mWM & 2) === 2)) {
                            nNw.charCode = 39;
                            NmN(nNw);
                        }
                        if (((VNM & 4) === 4) && ((mWM & 4) !== 4)) {
                            nNw.charCode = 38;
                            vnW(nNw);
                        } else if (((VNM & 4) !== 4) && ((mWM & 4) === 4)) {
                            nNw.charCode = 38;
                            NmN(nNw);
                        }
                        if (((VNM & 8) === 8) && ((mWM & 8) !== 8)) {
                            nNw.charCode = 40;
                            vnW(nNw);
                        } else if (((VNM & 8) !== 8) && ((mWM & 8) === 8)) {
                            nNw.charCode = 40;
                            NmN(nNw);
                        }
                        mWM = VNM;
                        continue;
                    } else if ((sx < (canw - (40 * scaleby))) || (sy > (40 * scaleby))) {
                        NVN = 1;
                        NWV.clientX -= WMm / CanvasUtils.options.ratioX;
                        NWV.clientY -= nmV / CanvasUtils.options.ratioX;
                        NnVMv = NWV.clientX;
                        WNmmw = NWV.clientY;
                        wVv(NWV);
                    }
                }
            }
            if ((NVN === 0) && (mWM === 0)) {
                wVv(NWV);
                NVN = 1;
            }
        }
        if ((mWVWv === 0) && (mWM !== 0)) {
            if (mWM & 1) {
                nNw.charCode = 37;
                NmN(nNw);
            }
            if (mWM & 2) {
                nNw.charCode = 39;
                NmN(nNw);
            }
            if (mWM & 4) {
                nNw.charCode = 38;
                NmN(nNw);
            }
            if (mWM & 8) {
                nNw.charCode = 40;
                NmN(nNw);
            }
            mWM = 0;
        }
    };

    function MouseWheelHandler(e)
    {
        var e = window.event || e;
            Render.scale += (e.wheelDelta / 5000);
        return false;
    };

    function MmNNN() {
        if (isTouchScreen === 0) window.addEventListener("wheel", MouseWheelHandler, false);
        if (isTouchScreen === 0) window.addEventListener('mousedown', VNn, false);
        if (isTouchScreen === 0) window.addEventListener('mouseup', vNm, false);
        if (isTouchScreen === 0) window.addEventListener('mousemove', wVv, false);
        if (isTouchScreen === 0) window.addEventListener('keyup', NmN, false);
        if (isTouchScreen === 0) window.addEventListener('keydown', vnW, false);
        if (isTouchScreen === 1) window.addEventListener('touchstart', WwW, false);
        if (isTouchScreen === 1) window.addEventListener('touchend', nMN, false);
        if (isTouchScreen === 1) window.addEventListener('touchcancel', Www, false);
        if (isTouchScreen === 1) window.addEventListener('touchmove', vnv, false);
    };

    function VVwMW() {
        if (isTouchScreen === 0) window.addEventListener("wheel", MouseWheelHandler, false);
        if (isTouchScreen === 0) window.removeEventListener('mousedown', VNn, false);
        if (isTouchScreen === 0) window.removeEventListener('mouseup', vNm, false);
        if (isTouchScreen === 0) window.removeEventListener('mousemove', wVv, false);
        if (isTouchScreen === 0) window.removeEventListener('keyup', NmN, false);
        if (isTouchScreen === 0) window.removeEventListener('keydown', vnW, false);
        if (isTouchScreen === 1) window.removeEventListener('touchstart', WwW, false);
        if (isTouchScreen === 1) window.removeEventListener('touchend', nMN, false);
        if (isTouchScreen === 1) window.removeEventListener('touchcancel', Www, false);
        if (isTouchScreen === 1) window.removeEventListener('touchmove', vnv, false);
    };
    return {
        quit: quit,
        init: init,
        run: run,
        update: update,
        draw: draw
    };
})();
var Score = (function() {
    function onError(Mnn) {};

    function quitGame() {
        quit(Game);
    };

    function onOpen() {
        quitGame();
    };
    var NNN = 0;
    var nMwNn = {
        src: "img/adblocker-msg.png",
        W: {
            isLoaded: 0
        }
    };
    var VmVNw = 0;
    var VwvVv = -1;
    var WwwvV = null;
    var WMwMN = {
        W: null
    };
    var wNnwN = null;
    var nwWMv = {
        W: null
    };
    var lastScore = -1;
    var MnvWv = {
        W: null
    };
    var scoreLabel = null;
    var vvWmM = -1;
    var VMnMw = null;
    var vMMnW = {
        W: null
    };

    function nmNnw() {
        var WX = mNw.pos.x;
        var WY = mNw.pos.y;
        var wVw = WX / scaleby;
        var VVm = WY / scaleby;
        if ((scoreLabel === null) || (lastScore !== World.PLAYER.exp)) {
            lastScore = World.PLAYER.exp;
            scoreLabel = GUI.renderText(lastScore + "", "'Viga', sans-serif", "#FFFFFF", 38, 400, window.undefined, 16, 25, window.undefined, window.undefined, window.undefined, window.undefined, "#000000", 12);
            MnvWv.W = scoreLabel;
            MnvWv.W.isLoaded = 1;
        }
        CanvasUtils.drawImageHd(MnvWv, wVw + 280, VVm + 117, 0, 0, 0, 1);
        if ((WwwvV === null) || (VwvVv !== World.PLAYER.level)) {
            VwvVv = World.PLAYER.level;
            WwwvV = GUI.renderText(VwvVv + "", "'Viga', sans-serif", "#FFFFFF", 38, 400, window.undefined, 16, 25, window.undefined, window.undefined, window.undefined, window.undefined, "#000000", 12);
            wNnwN = GUI.renderText(window.Math.floor(VwvVv / 2), "'Viga', sans-serif", "#FFFFFF", 38, 400, window.undefined, 16, 25, window.undefined, window.undefined, window.undefined, window.undefined, "#000000", 12);
            WMwMN.W = WwwvV;
            WMwMN.W.isLoaded = 1;
            nwWMv.W = wNnwN;
            nwWMv.W.isLoaded = 1;
        }
        CanvasUtils.drawImageHd(WMwMN, wVw + 108, VVm + 117, 0, 0, 0, 1);
        CanvasUtils.drawImageHd(nwWMv, wVw + 288, VVm + 147, 0, 0, 0, 1);
        if ((VMnMw === null) || (vvWmM !== World.PLAYER.kill)) {
            vvWmM = World.PLAYER.kill;
            VMnMw = GUI.renderText(vvWmM + "", "'Viga', sans-serif", "#FFFFFF", 38, 400, window.undefined, 16, 25, window.undefined, window.undefined, window.undefined, window.undefined, "#000000", 12);
            vMMnW.W = VMnMw;
            vMMnW.W.isLoaded = 1;
        }
        CanvasUtils.drawImageHd(vMMnW, wVw + 453, VVm + 117, 0, 0, 0, 1);
        var inventory = Game.inventory;
        var invtr = World.PLAYER.inventory;
        var len = invtr.length;
        var MVM = 50 * scaleby;
        var _y = WY + (182 * scaleby);
        var _x = WX + (80 * scaleby);
        var WnVvn = scaleby;
        scaleby = scaleby - (0.3 * scaleby);
        for (var i = 0; i < len; i++) {
            var wm = inventory[i];
            if (invtr[i][0] !== 0) Render.buttonInv(wm, invtr[i], _x, _y, Game.inventoryItemNumber, Game.inventoryAmmoNumber);
            _x += MVM;
        }
        scaleby = WnVvn;
        if (Home.adblocker === 1) {
            var breath = MathUtils.Ease.inOutQuad((VmVNw > 500) ? ((1000 - VmVNw) / 500) : (VmVNw / 500));
            ctx.globalAlpha = 0.7;
            CanvasUtils.drawImageHd(nMwNn, wVw + 288, VVm + 193, 0, 0, 0, 1 + (0.04 * breath));
            ctx.globalAlpha = 1;
            VmVNw = (VmVNw + delta) % 1000;
        }
    };
    var waitAds = 0;
    var mNw;
    var playagainbutt;
    var vWv;

    function init() {
        mNw = GUI.createBackground(541, 324, "img/scoreboardnew.png");
        playagainbutt = GUI.createButton(123, 35, ["img/play-again-button-out.png", "img/play-again-button-in.png", "img/play-again-button-click.png"]);
        vWv = GUI.createButton(198, 35, ["img/back-main-page-button-out.png", "img/back-main-page-button-in.png", "img/back-main-page-button-click.png"]);
    };
    var MVv;
    var NWV = new Mouse.LocalMouseEvent;
    var nNw = new Keyboard.LocalKeyboardEvent;
    var VWm = 500;
    var WWN = 0;
    var VNvnM = function(mMn) {
        return MathUtils.Ease.speedLimit(mMn, MathUtils.Ease.inQuad, 0.05);
    };
    var Nmv = 500;
    var mwm = 0;
    var WVWWm = function(mMn) {
        return MathUtils.Ease.speedLimit(mMn, MathUtils.Ease.outQuad, 0.05);
    };
    var WwM = 0;
    var MNw = 0;
    var mwn = window.undefined;

    function run() {
        Client.onError = onError;
        Client.onOpen = onOpen;
        World.PLAYER.isBuilding = 0;
        World.PLAYER.id = 0;
        Render.setDetection(0);
        Render.stopPoisonEffect();
        for (var i = 0; i < World.PLAYER.inventory.length; i++) {
            for (var j = 0; j < 4; j++) World.PLAYER.inventory[i][j] = 0;
        }
        var MWMwV = KIT[window.Math.min(KIT.length - 1, World.PLAYER.level)];
        for (var i = 0; i < MWMwV.length; i++) {
            var IID = MWMwV[i];
            if (IID.id !== 0) Game.inventory[i].setImages(items[IID.id].img.src, items[IID.id].img.W);
            var invtr = World.PLAYER.inventory[i];
            invtr[1] = IID.amount;
            invtr[2] = 0;
            invtr[3] = IID.life;
            invtr[0] = IID.id;
        }
        waitAds = 5000;
        if (Loader.getURLData("admin") === null) {
            window["YMPB"]["refresh"]();
        }
        CanvasUtils.setRenderer(Score);
        MNw = Nmv;
        WwM = Nmv;
        mwn = WVWWm;
        mwm = 1;
        update();
    };

    function quit(wMN) {
        Home.trevdaStyle.display = "none";
        MVv = wMN;
        VVwMW();
        MNw = VWm;
        WwM = VWm;
        mwn = VNvnM;
        WWN = 1;
    };

    function update() {
        var vMm = 0;
        var wwv = 0;
        if (MNw > 0) {
            wwv = canh;
            var transition = mwn(1 - (MNw / WwM));
            if (transition === 1) MNw = 0;
            if (mwm === 1) transition = 1 - window.Math.abs(transition);
            vMm *= transition;
            wwv *= transition;
        }
        mNw.pos.x = (canw2 - window.Math.floor(270 * scaleby)) - vMm;
        mNw.pos.y = window.Math.max(0, (canh2 - window.Math.floor(162 * scaleby)) + window.Math.floor(-135 * scaleby)) - wwv;
        playagainbutt.pos.x = ((canw2 - window.Math.floor(61 * scaleby)) + window.Math.floor(-100 * scaleby)) - vMm;
        playagainbutt.pos.y = window.Math.max(0, (canh2 - window.Math.floor(17 * scaleby)) + window.Math.floor(-35 * scaleby)) - wwv;
        vWv.pos.x = ((canw2 - window.Math.floor(99 * scaleby)) + window.Math.floor(100 * scaleby)) - vMm;
        vWv.pos.y = playagainbutt.pos.y;
        var mVvwv = window.Math.min(scaleby, 1);
        window.document.getElementById("trevda").style.top = window.Math.floor((canh2 - 125) + (140 * mVvwv)) + "px";
        window.document.getElementById("trevda").style.transform = ("scale(" + mVvwv) + ")";
        window.document.getElementById("trevda").style.left = window.Math.floor(canw2 - (325 * mVvwv)) + "px";
    };

    function draw() {
        if (MMVwV() === 0) return;
        ctx.clearRect(0, 0, canw, canh);
        Render.world();
        if (MNw > 0) {
            NNN = mwn(1 - (MNw / WwM));
            if (mwm === 1) NNN = 1 - window.Math.abs(NNN);
            NNN = 1 - NNN;
        }
        ctx.globalAlpha = 0.3 * NNN;
        ctx.fillStyle = "#000000";
        ctx.fillRect(0, 0, canw, canh);
        ctx.globalAlpha = 1;
        mNw.draw();
        vWv.draw();
        nmNnw();
        Render.alertServer();
        AudioManager.scheduler();
        if (waitAds > 0) {
            waitAds = window.Math.max(0, waitAds - delta);
            CanvasUtils.drawImageHd(WAITADS[window.Math.floor(waitAds / 1000)], (playagainbutt.pos.x / scaleby) + 61.5, (playagainbutt.pos.y / scaleby) + 17.75, 0, 0, 0, 1);
        } else playagainbutt.draw();
    };

    function MMVwV() {
        if (WWN === 1) {
            update();
            if (MNw < 0) {
                WWN = 0;
                playagainbutt.setState(GUI.__BUTTON_OUT__);
                vWv.setState(GUI.__BUTTON_OUT__);
                MVv.run();
                return 0;
            }
            MNw -= delta;
        } else if (mwm === 1) {
            update();
            if (MNw < 0) {
                mwm = 0;
                if (World.PLAYER.admin !== 1) Home.trevdaStyle.display = "inline-block";
                window.document.getElementById("bod").style.backgroundColor = "#46664d";
                MmNNN();
            }
            MNw -= delta;
        }
        return 1;
    };

    function VNn(event) {
        Mouse.updateAll(event, Mouse.__MOUSE_DOWN__);
        var vnm = 0;
        if (playagainbutt.trigger() === 1) {
            vnm = 1;
        }
        if (vWv.trigger() === 1) {
            vnm = 1;
        }
    };

    function vNm(event) {
        Mouse.updateAll(event, Mouse.__MOUSE_UP__);
        var vnm = 0;
        if (playagainbutt.trigger() === 1) {
            vnm = 1;
            if (waitAds <= 0) {
                Home.joinServer();
                AudioUtils.playFx(AudioUtils._fx.play, 1, 0);
            }
            return;
        }
        if (vWv.trigger() === 1) {
            vnm = 1;
            if (((Client.state & Client.State.__PENDING__) === 0) && ((Client.state & Client.State.__CONNECTED__) === 0)) {
                quit(Home);
                AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                return;
            }
        }
    };

    function wVv(event) {
        Mouse.updateAll(event, Mouse.__MOUSE_MOVE__);
        var vnm = 0;
        if (playagainbutt.trigger() === 1) {
            vnm = 1;
        }
        if (vWv.trigger() === 1) {
            vnm = 1;
        }
    };

    function WwW(event) {
        if (event.touches.length > 0) {
            Mouse.touchToMouseEvent(NWV, event, event.touches[0]);
            VNn(NWV);
        }
    };

    function nMN(event) {
        vNm(NWV);
    };

    function Www(event) {
        if (event.touches.length > 0) {
            Mouse.touchToMouseEvent(NWV, event, event.touches[0]);
            vNm(NWV);
        }
    };

    function vnv(event) {
        if (event.touches.length > 0) {
            Mouse.touchToMouseEvent(NWV, event, event.touches[0]);
            wVv(NWV);
        }
    };

    function MmNNN() {
        if (isTouchScreen === 0) window.addEventListener('mousedown', VNn, false);
        if (isTouchScreen === 0) window.addEventListener('mouseup', vNm, false);
        if (isTouchScreen === 0) window.addEventListener('mousemove', wVv, false);
        if (isTouchScreen === 1) window.addEventListener('touchstart', WwW, false);
        if (isTouchScreen === 1) window.addEventListener('touchend', nMN, false);
        if (isTouchScreen === 1) window.addEventListener('touchcancel', Www, false);
        if (isTouchScreen === 1) window.addEventListener('touchmove', vnv, false);
    };

    function VVwMW() {
        if (isTouchScreen === 0) window.removeEventListener('mousedown', VNn, false);
        if (isTouchScreen === 0) window.removeEventListener('mouseup', vNm, false);
        if (isTouchScreen === 0) window.removeEventListener('mousemove', wVv, false);
        if (isTouchScreen === 1) window.removeEventListener('touchstart', WwW, false);
        if (isTouchScreen === 1) window.removeEventListener('touchend', nMN, false);
        if (isTouchScreen === 1) window.removeEventListener('touchcancel', Www, false);
        if (isTouchScreen === 1) window.removeEventListener('touchmove', vnv, false);
    };
    return {
        quit: quit,
        init: init,
        run: run,
        update: update,
        draw: draw
    };
})();
var Rank = (function() {
    function onError(Mnn) {};

    function quitGame() {
        quit(Game);
    };

    function onOpen() {
        quitGame();
    };
    var NNN = 0;
    var vWvVM = -1;
    var VmvNV = null;
    var vnvvM = {
        W: null
    };
    var mvNVM = -1;
    var mmvMV = {
        W: null
    };
    var NmwnM = null;
    var vvWmM = -1;
    var VMnMw = null;
    var vMMnW = {
        W: null
    };

    function nmNnw() {
        var WX = mNw.pos.x;
        var WY = mNw.pos.y;
        var wVw = WX / scaleby;
        var VVm = WY / scaleby;
        if ((NmwnM === null) || (mvNVM !== World.playerAlive)) {
            mvNVM = World.playerAlive;
            NmwnM = GUI.renderText("#" + window.Math.max(mvNVM, 1), "'Viga', sans-serif", "#FFFFFF", 60, 140, window.undefined, 16, 25, window.undefined, window.undefined, window.undefined, window.undefined, "#000000", 12);
            mmvMV.W = NmwnM;
            mmvMV.W.isLoaded = 1;
        }
        CanvasUtils.drawImageHd(mmvMV, wVw + 207, VVm + 93, 0, 0, 0, 1);
        if ((VmvNV === null) || (vWvVM !== World.PLAYER.timePlayed)) {
            vWvVM = World.PLAYER.timePlayed;
            var vMWwM = window.Math.floor((window.Date.now() - World.PLAYER.timePlayed) / 1000);
            var wWvWM = window.Math.floor(vMWwM / 60);
            var NNvMn = vMWwM % 60;
            VmvNV = GUI.renderText((((((wWvWM < 10) ? "0" : "") + wWvWM) + ":") + ((NNvMn < 10) ? "0" : "")) + NNvMn, "'Viga', sans-serif", "#FFFFFF", 38, 400, window.undefined, 16, 25, window.undefined, window.undefined, window.undefined, window.undefined, "#000000", 12);
            vnvvM.W = VmvNV;
            vnvvM.W.isLoaded = 1;
        }
        CanvasUtils.drawImageHd(vnvvM, wVw + 110, VVm + 100, 0, 0, 0, 1);
        if ((VMnMw === null) || (vvWmM !== World.PLAYER.kill)) {
            vvWmM = World.PLAYER.kill;
            VMnMw = GUI.renderText(vvWmM + "", "'Viga', sans-serif", "#FFFFFF", 38, 400, window.undefined, 16, 25, window.undefined, window.undefined, window.undefined, window.undefined, "#000000", 12);
            vMMnW.W = VMnMw;
            vMMnW.W.isLoaded = 1;
        }
        CanvasUtils.drawImageHd(vMMnW, wVw + 309, VVm + 100, 0, 0, 0, 1);
    };
    var waitAds = 0;
    var mNw;
    var playagainbutt;
    var vWv;

    function init() {
        mNw = GUI.createBackground(414, 207, "img/scoreboard-br.png");
        playagainbutt = GUI.createButton(123, 35, ["img/play-again-button-out.png", "img/play-again-button-in.png", "img/play-again-button-click.png"]);
        vWv = GUI.createButton(198, 35, ["img/back-main-page-button-out.png", "img/back-main-page-button-in.png", "img/back-main-page-button-click.png"]);
    };
    var MVv;
    var NWV = new Mouse.LocalMouseEvent;
    var nNw = new Keyboard.LocalKeyboardEvent;
    var VWm = 500;
    var WWN = 0;
    var VNvnM = function(mMn) {
        return MathUtils.Ease.speedLimit(mMn, MathUtils.Ease.inQuad, 0.05);
    };
    var Nmv = 500;
    var mwm = 0;
    var WVWWm = function(mMn) {
        return MathUtils.Ease.speedLimit(mMn, MathUtils.Ease.outQuad, 0.05);
    };
    var WwM = 0;
    var MNw = 0;
    var mwn = window.undefined;

    function run() {
        Client.onError = onError;
        Client.onOpen = onOpen;
        World.PLAYER.isBuilding = 0;
        World.PLAYER.id = 0;
        Render.setDetection(0);
        Render.stopPoisonEffect();
        waitAds = 5000;
        window["YMPB"]["refresh"]();
        CanvasUtils.setRenderer(Rank);
        MNw = Nmv;
        WwM = Nmv;
        mwn = WVWWm;
        mwm = 1;
        update();
    };

    function quit(wMN) {
        Home.trevdaStyle.display = "none";
        MVv = wMN;
        VVwMW();
        MNw = VWm;
        WwM = VWm;
        mwn = VNvnM;
        WWN = 1;
    };

    function update() {
        var vMm = 0;
        var wwv = 0;
        if (MNw > 0) {
            wwv = canh;
            var transition = mwn(1 - (MNw / WwM));
            if (transition === 1) MNw = 0;
            if (mwm === 1) transition = 1 - window.Math.abs(transition);
            vMm *= transition;
            wwv *= transition;
        }
        mNw.pos.x = (canw2 - window.Math.floor(207 * scaleby)) - vMm;
        mNw.pos.y = window.Math.max(0, (canh2 - window.Math.floor(103 * scaleby)) + window.Math.floor(-135 * scaleby)) - wwv;
        playagainbutt.pos.x = ((canw2 - window.Math.floor(61 * scaleby)) + window.Math.floor(-100 * scaleby)) - vMm;
        playagainbutt.pos.y = window.Math.max(0, (canh2 - window.Math.floor(17 * scaleby)) + window.Math.floor(-70 * scaleby)) - wwv;
        vWv.pos.x = ((canw2 - window.Math.floor(99 * scaleby)) + window.Math.floor(70 * scaleby)) - vMm;
        vWv.pos.y = playagainbutt.pos.y;
        var mVvwv = scaleby;
        window.document.getElementById("trevda").style.top = window.Math.floor((canh2 - 125) + (130 * mVvwv)) + "px";
        window.document.getElementById("trevda").style.transform = ("scale(" + mVvwv) + ")";
    };

    function draw() {
        if (MMVwV() === 0) return;
        ctx.clearRect(0, 0, canw, canh);
        Render.world();
        if (MNw > 0) {
            NNN = mwn(1 - (MNw / WwM));
            if (mwm === 1) NNN = 1 - window.Math.abs(NNN);
            NNN = 1 - NNN;
        }
        ctx.globalAlpha = 0.3 * NNN;
        ctx.fillStyle = "#000000";
        ctx.fillRect(0, 0, canw, canh);
        ctx.globalAlpha = 1;
        mNw.draw();
        vWv.draw();
        nmNnw();
        Render.alertServer();
        AudioManager.scheduler();
        if (waitAds > 0) {
            waitAds = window.Math.max(0, waitAds - delta);
            CanvasUtils.drawImageHd(WAITADS[window.Math.floor(waitAds / 1000)], (playagainbutt.pos.x / scaleby) + 61.5, (playagainbutt.pos.y / scaleby) + 17.75, 0, 0, 0, 1);
        } else playagainbutt.draw();
    };

    function MMVwV() {
        if (WWN === 1) {
            update();
            if (MNw < 0) {
                WWN = 0;
                playagainbutt.setState(GUI.__BUTTON_OUT__);
                vWv.setState(GUI.__BUTTON_OUT__);
                MVv.run();
                return 0;
            }
            MNw -= delta;
        } else if (mwm === 1) {
            update();
            if (MNw < 0) {
                mwm = 0;
                Home.trevdaStyle.display = "inline-block";
                window.document.getElementById("bod").style.backgroundColor = "#46664d";
                MmNNN();
            }
            MNw -= delta;
        }
        return 1;
    };

    function VNn(event) {
        Mouse.updateAll(event, Mouse.__MOUSE_DOWN__);
        var vnm = 0;
        if (playagainbutt.trigger() === 1) {
            vnm = 1;
        }
        if (vWv.trigger() === 1) {
            vnm = 1;
        }
    };

    function vNm(event) {
        Mouse.updateAll(event, Mouse.__MOUSE_UP__);
        var vnm = 0;
        if (playagainbutt.trigger() === 1) {
            vnm = 1;
            if (waitAds <= 0) {
                Home.joinServer();
                AudioUtils.playFx(AudioUtils._fx.play, 1, 0);
            }
            return;
        }
        if (vWv.trigger() === 1) {
            vnm = 1;
            if (((Client.state & Client.State.__PENDING__) === 0) && ((Client.state & Client.State.__CONNECTED__) === 0)) {
                quit(Home);
                AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                return;
            }
        }
    };

    function wVv(event) {
        Mouse.updateAll(event, Mouse.__MOUSE_MOVE__);
        var vnm = 0;
        if (playagainbutt.trigger() === 1) {
            vnm = 1;
        }
        if (vWv.trigger() === 1) {
            vnm = 1;
        }
    };

    function WwW(event) {
        if (event.touches.length > 0) {
            Mouse.touchToMouseEvent(NWV, event, event.touches[0]);
            VNn(NWV);
        }
    };

    function nMN(event) {
        vNm(NWV);
    };

    function Www(event) {
        if (event.touches.length > 0) {
            Mouse.touchToMouseEvent(NWV, event, event.touches[0]);
            vNm(NWV);
        }
    };

    function vnv(event) {
        if (event.touches.length > 0) {
            Mouse.touchToMouseEvent(NWV, event, event.touches[0]);
            wVv(NWV);
        }
    };

    function MmNNN() {
        if (isTouchScreen === 0) window.addEventListener('mousedown', VNn, false);
        if (isTouchScreen === 0) window.addEventListener('mouseup', vNm, false);
        if (isTouchScreen === 0) window.addEventListener('mousemove', wVv, false);
        if (isTouchScreen === 1) window.addEventListener('touchstart', WwW, false);
        if (isTouchScreen === 1) window.addEventListener('touchend', nMN, false);
        if (isTouchScreen === 1) window.addEventListener('touchcancel', Www, false);
        if (isTouchScreen === 1) window.addEventListener('touchmove', vnv, false);
    };

    function VVwMW() {
        if (isTouchScreen === 0) window.removeEventListener('mousedown', VNn, false);
        if (isTouchScreen === 0) window.removeEventListener('mouseup', vNm, false);
        if (isTouchScreen === 0) window.removeEventListener('mousemove', wVv, false);
        if (isTouchScreen === 1) window.removeEventListener('touchstart', WwW, false);
        if (isTouchScreen === 1) window.removeEventListener('touchend', nMN, false);
        if (isTouchScreen === 1) window.removeEventListener('touchcancel', Www, false);
        if (isTouchScreen === 1) window.removeEventListener('touchmove', vnv, false);
    };
    return {
        quit: quit,
        init: init,
        run: run,
        update: update,
        draw: draw
    };
})();

function exportmapfunc() {
    if (Nnw <= 0) Nnw = 3000;
    else if (Nnw <= 500) Nnw = 3000 - Nnw;
    else if (Nnw <= 2500) Nnw = 2500;
    var NvV = "";
    NvV += wMNww(__ENTITIE_BUILD_DOWN__);
    NvV += wMNww(__ENTITIE_BUILD_TOP__);
    NvV += wMNww(__ENTITIE_BUILD_GROUND2__);
    NvV += wMNww(__ENTITIE_BUILD_GROUND__);
    var vMV = window.document.createElement('textarea');
    vMV["value"] = NvV;
    window.document["body"]["appendChild"](vMV);
    vMV["select"]();
    window.document["execCommand"]('copy');
    window.document["body"]["removeChild"](vMV);
};

var Nnw = 0;

function wMNww(vV) {
    var NvV = "";
    var buildings = Entitie.units[vV];
    var wWv = Entitie.border[vV];
    var wVN = wWv.border;
    for (i = 0; i < wVN; i++) {
        var player = buildings[wWv.cycle[i]];
        var IID = items[player.extra >> 7];
        NvV += ("!b=" + IID.id) + ":";
        if (IID.subtype !== 0) NvV += player.subtype + ":";
        NvV += (((player.j + ":") + player.i) + ":") + ((player.extra >> 5) & 3);
    }
    return NvV;
};

var Editor = (function() {
    var NmW = 0;
    var isMapOpen = 0;
    var isSettingsOpen = 0;
    var MNnnv = 0;
    var emptyinvslot = CanvasUtils.loadImage("img/inv-empty.png");
    var WwvNM = [emptyinvslot, emptyinvslot, emptyinvslot];
    var Wnw = [];
    var NWw = 0;

    function MVWMn() {
        World.PLAYER.id = 1;
        World.playerNumber = 2;
        World.gameMode = 0;
        World.PLAYER.skillPoint = 0;
        World.PLAYER.gridPrev[i] = 0;
        World.PLAYER.isBuilding = 1;
        World.PLAYER.teamJoin = 0;
        World.PLAYER.lastAreas = [
            [-1, -1],
            [-1, -1],
            [-1, -1],
            [-1, -1],
            [-1, -1],
            [-1, -1],
            [-1, -1],
            [-1, -1],
            [-1, -1],
            [-1, -1],
            [-1, -1],
            [-1, -1]
        ];
        World.gauges.rad.value = World.gauges.rad._max;
        World.gauges.rad.vww = -1;
        World.allocatePlayers([0, window.document.getElementById("nicknameInput").value]);
        World.initDayCycle(0, 0);
        Render.reset(window.undefined, 0, 0.07);
        Render.scale = 0;
        Entitie.removeAll();
        World.PLAYER.buildRotate = 0;
        World.PLAYER.blueprint = 0;
        vmV = 0;
        mnnMn(1, __ENTITIE_PLAYER__, 550, 550, 21 << 8, 0);
    };

    function MVVMv(NWNVm) {
        nVN();
        NmW = 1;
        if (NWNVm === 1) isCraftOpen = 1;
        else if (NWNVm === 2) isChestOpen = 1;
    };

    function nVN() {
        NmW = 0;
        closebutt.setState(GUI.__BUTTON_OUT__);
        isMapOpen = 0;
        isSettingsOpen = 0;
        isCraftOpen = 0;
        isChestOpen = 0;
        isTeamOpen = 0;
        World.releaseBuilding();
    };
    var nmMMm = 0;
    var closebutt = GUI.createButton(43, 43, ["img/close-box-out.png", "img/close-box-in.png", "img/close-box-click.png"]);
    var highpartout = [CanvasUtils.loadImage("img/high-particules-out.png"), CanvasUtils.loadImage("img/high-particules-in.png"), CanvasUtils.loadImage("img/high-particules-click.png")];
    var wVwnm = GUI.createButton(54, 42, null, highpartout);
    var vWmmV = [CanvasUtils.loadImage("img/low-particules-out.png"), CanvasUtils.loadImage("img/low-particules-in.png"), CanvasUtils.loadImage("img/low-particules-click.png")];
    var VnWMV = GUI.createButton(54, 42, null, vWmmV);
    var vVvNM = [CanvasUtils.loadImage("img/no-particules-out.png"), CanvasUtils.loadImage("img/no-particules-in.png"), CanvasUtils.loadImage("img/no-particules-click.png")];
    var wwMwv = GUI.createButton(54, 42, null, vVvNM);
    var VVVMw = [CanvasUtils.loadImage("img/high-resolution-out.png"), CanvasUtils.loadImage("img/high-resolution-in.png"), CanvasUtils.loadImage("img/high-resolution-click.png")];
    var wWNnw = GUI.createButton(54, 42, null, VVVMw);
    var wmnmv = [CanvasUtils.loadImage("img/medium-resolution-out.png"), CanvasUtils.loadImage("img/medium-resolution-in.png"), CanvasUtils.loadImage("img/medium-resolution-click.png")];
    var nvwMN = GUI.createButton(54, 42, null, wmnmv);
    var vmVnn = [CanvasUtils.loadImage("img/low-resolution-out.png"), CanvasUtils.loadImage("img/low-resolution-in.png"), CanvasUtils.loadImage("img/low-resolution-click.png")];
    var MNVVn = GUI.createButton(54, 42, null, vmVnn);
    var NwVwn = [CanvasUtils.loadImage("img/azerty-button-out.png"), CanvasUtils.loadImage("img/azerty-button-in.png"), CanvasUtils.loadImage("img/azerty-button-click.png")];
    var VmvmN = GUI.createButton(81, 33, null, NwVwn);
    var NMnMN = [CanvasUtils.loadImage("img/qwerty-button-out.png"), CanvasUtils.loadImage("img/qwerty-button-in.png"), CanvasUtils.loadImage("img/qwerty-button-click.png")];
    var WMVVn = GUI.createButton(87, 33, null, NMnMN);
    var soundonbutt = [CanvasUtils.loadImage("img/sound-on-out.png"), CanvasUtils.loadImage("img/sound-on-in.png"), CanvasUtils.loadImage("img/sound-on-click.png")];
    var soundoffbutt = [CanvasUtils.loadImage("img/sound-off-out.png"), CanvasUtils.loadImage("img/sound-off-in.png"), CanvasUtils.loadImage("img/sound-off-click.png")];
    var wvNNV = GUI.createButton(51, 36, null, soundonbutt);
    var WVnnn = GUI.createButton(51, 36, null, soundoffbutt);
    var NmVWV = GUI.createButton(51, 36, null, soundonbutt);
    var vVMWm = GUI.createButton(51, 36, null, soundoffbutt);
    var mWM = 0;
    var MWVNw = 0;
    var NVNwm = 0;
    var MMMvM = 0;
    var vmWNW = 0;
    var NnVMv = 0;
    var WNmmw = 0;
    var nvnNv = 0;
    var vmV = 0;

    function mnnMn(pid, vV, WX, WY, extra, Mnn) {
        var MW = Entitie.get(pid, vmV, vmV, vV);
        setEntitie(MW, pid, vmV, vmV, vV, WX, WY, WX, WY, extra, 0, Mnn);
        vmV++;
    };

    function wwMmV(MWwVN) {
        MVWMn();
        MWwVN = MWwVN.split("!b=");
        MWwVN.shift();
        for (var i = 0; i < MWwVN.length; i++) {
            var building = MWwVN[i].split(":");
            if (building.length > 4) Vnvmv(building[0], building[1], building[3], building[2], building[4]);
            else Vnvmv(building[0], 0, building[2], building[1], building[3]);
        }
    };

    function Vnvmv(NNWVv, subtype, i, j, Rot) {
        NNWVv = window.Number(NNWVv) >>> 0;
        subtype = window.Number(subtype) >>> 0;
        i = window.Number(i) >>> 0;
        j = window.Number(j) >>> 0;
        Rot = window.Number(Rot) >>> 0;
        if (((Rot > 3) || (i >= MapManager.height)) || (j >= MapManager.height)) return;
        var building = items[NNWVv];
        if (((building === window.undefined) || (building.subtype === window.undefined)) || ((building.subtype > 0) && (building.building.length <= subtype))) return;
        var Rot = (building.wall === 1) ? 0 : Rot;
        var WX = (building.xCenter[Rot] + 50) + (100 * j);
        var WY = (building.yCenter[Rot] + 50) + (100 * i);
        var vV = 0;
        switch ((building.subtype === 0) ? building.zid : building.subtype[subtype].zid) {
            case 0:
                vV = __ENTITIE_BUILD_DOWN__;
                break;
            case 1:
                vV = __ENTITIE_BUILD_TOP__;
                break;
            case 2:
                vV = __ENTITIE_BUILD_GROUND2__;
                break;
            default:
                vV = __ENTITIE_BUILD_GROUND__;
                break;
        }
        nWMWn(1, vV, WX, WY, Rot, 1 + ((building.subtype === 0) ? 0 : (subtype << 5)), building.id);
    };

    function nWMWn(pid, vV, WX, WY, Rot, Mnn, subtype) {
        var MW = Entitie.get(pid, vmV, vmV, vV);
        setEntitie(MW, pid, vmV, vmV, vV, WX, WY, WX, WY, (subtype << 7) + (Rot << 5), 0, Mnn);
        var update = ENTITIES[vV].update;
        if (update !== window.undefined) update(MW, WX, WY);
        vmV++;
    };

    function wMNww(vV) {
        var NvV = "";
        var buildings = Entitie.units[vV];
        var wWv = Entitie.border[vV];
        var wVN = wWv.border;
        for (i = 0; i < wVN; i++) {
            var player = buildings[wWv.cycle[i]];
            var IID = items[player.extra >> 7];
            NvV += ("!b=" + IID.id) + ":";
            if (IID.subtype !== 0) NvV += player.subtype + ":";
            NvV += (((player.j + ":") + player.i) + ":") + ((player.extra >> 5) & 3);
        }
        return NvV;
    };

    function nwmMw(vV, WX, WY) {
        var buildings = Entitie.units[vV];
        var wWv = Entitie.border[vV];
        var wVN = wWv.border;
        for (i = 0; i < wVN; i++) {
            var building = buildings[wWv.cycle[i]];
            if ((((building.x >= WX) && (building.x <= (WX + 100))) && (building.y >= WY)) && (building.y <= (WY + 100))) {
                Entitie.remove(building.pid, building.id, building.uid, vV, building.extra);
                return;
            }
        }
    };
    

    function vnMVv() {
        if ((Mouse.state === Mouse.__MOUSE_DOWN__) && (World.PLAYER.click === 0)) {
            if (World.PLAYER.isBuilding === 1) {
                World.PLAYER.click = -1;
                if (World.PLAYER.canBuild === 1) {
                    if ((((World.PLAYER.jBuild !== -1) && (World.PLAYER.iBuild !== -1)) && (World.PLAYER.jBuild !== MapManager.width)) && (World.PLAYER.iBuild !== MapManager.height)) Vnvmv(World.PLAYER.blueprint, World.PLAYER.furniture, World.PLAYER.iBuild, World.PLAYER.jBuild, World.PLAYER.buildRotate);
                } else {
                    var WX = 100 * World.PLAYER.jBuild;
                    var WY = 100 * World.PLAYER.iBuild;
                    nwmMw(__ENTITIE_BUILD_DOWN__, WX, WY);
                    nwmMw(__ENTITIE_BUILD_TOP__, WX, WY);
                    nwmMw(__ENTITIE_BUILD_GROUND2__, WX, WY);
                    nwmMw(__ENTITIE_BUILD_GROUND__, WX, WY);
                }
            }
        } else if (Mouse.state === Mouse.__MOUSE_UP__) {
            if (World.PLAYER.isBuilding === 1) {
                nmMMm = 0;
                World.PLAYER.click = 0;
            }
        }
    };
    var NnMMn = window.Math.sqrt(2) / 2;

    function nNvvV() {
        var move = 0;
        if (Keyboard.isLeft() === 1) move |= 1;
        if (Keyboard.isRight() === 1) move |= 2;
        if (Keyboard.isBottom() === 1) move |= 4;
        if (Keyboard.isTop() === 1) move |= 8;
        if (move > 0) {
            var pid = World.players[1].locatePlayer;
            if (pid === -1) return;
            var PLAYER = Entitie.units[__ENTITIE_PLAYER__][pid];
            WvvVn = (((move & 3) && (move & 12)) ? NnMMn : 1) * ((Keyboard.isShift() === 0) ? (delta * 1.5) : (delta * 11));
            if (move & 1) PLAYER.rx = PLAYER.x - WvvVn;
            else if (move & 2) PLAYER.rx = PLAYER.x + WvvVn;
            if (move & 8) PLAYER.ry = PLAYER.y - WvvVn;
            else if (move & 4) PLAYER.ry = PLAYER.y + WvvVn;
            PLAYER.rx = window.Math.max(0, window.Math.min(PLAYER.rx, MapManager.width * 100));
            PLAYER.ry = window.Math.max(0, window.Math.min(PLAYER.ry, MapManager.height * 100));
            PLAYER.nx = PLAYER.rx;
            PLAYER.ny = PLAYER.ry;
        }
    };

    function wWNmN() {
        var WX = mapbuildingbutton.pos.x - (5 * scaleby);
        var WY = mapbuildingbutton.pos.y + (74 * scaleby);
        var MVM = 45 * scaleby;
        for (var i = 0; i < NWw; i++) {
            var wm = Wnw[i];
            wm.pos.x = WX + ((i % 8) * MVM);
            wm.pos.y = WY + (window.Math.floor(i / 8) * MVM);
            wm.draw();
        }
    };

    function exportmapfunc() {
        if (Nnw <= 0) Nnw = 3000;
        else if (Nnw <= 500) Nnw = 3000 - Nnw;
        else if (Nnw <= 2500) Nnw = 2500;
        var NvV = "";
        NvV += wMNww(__ENTITIE_BUILD_DOWN__);
        NvV += wMNww(__ENTITIE_BUILD_TOP__);
        NvV += wMNww(__ENTITIE_BUILD_GROUND2__);
        NvV += wMNww(__ENTITIE_BUILD_GROUND__);
        var vMV = window.document.createElement('textarea');
        vMV["value"] = NvV;
        window.document["body"]["appendChild"](vMV);
        vMV["select"]();
        window.document["execCommand"]('copy');
        window.document["body"]["removeChild"](vMV);
    };

    function markposition() {
        if (Nnw > 0) {
            Nnw -= delta;
            if (Nnw > 2500) ctx.globalAlpha = MathUtils.Ease.inOutQuad((3000 - Nnw) / 500);
            else if (Nnw < 500) ctx.globalAlpha = MathUtils.Ease.inOutQuad(Nnw / 500);
            ctx.drawImage(VWWvn, copypastebutton.pos.x - (85 * scaleby), copypastebutton.pos.y - (40 * scaleby), VWWvn.wh * scaleby, VWWvn.h2 * scaleby);
            ctx.globalAlpha = 1;
        }
        if (NVVNW[World.PLAYER._j] === window.undefined) NVVNW[World.PLAYER._j] = [];
        if (NVVNW[World.PLAYER._j][World.PLAYER._i] === window.undefined) NVVNW[World.PLAYER._j][World.PLAYER._i] = GUI.renderText(((("(" + World.PLAYER._j) + ",") + World.PLAYER._i) + ")", "'Viga', sans-serif", "#FFFFFF", 52, 455, "#000000", 22, 22, window.undefined, window.undefined, 0.4, window.undefined, "#000000", 15.6);
        var W = NVVNW[World.PLAYER._j][World.PLAYER._i];
        ctx.drawImage(W, 5 * scaleby, zoombutton.pos.y - (42 * scaleby), W.wh * scaleby, W.h2 * scaleby);
    };

    function markposition() {
        if (Nnw > 0) {
            Nnw -= delta;
            if (Nnw > 2500) ctx.globalAlpha = MathUtils.Ease.inOutQuad((3000 - Nnw) / 500);
            else if (Nnw < 500) ctx.globalAlpha = MathUtils.Ease.inOutQuad(Nnw / 500);
            ctx.drawImage(VWWvn, copypastebutton.pos.x - (85 * scaleby), copypastebutton.pos.y - (40 * scaleby), VWWvn.wh * scaleby, VWWvn.h2 * scaleby);
            ctx.globalAlpha = 1;
        }
        if (NVVNW[World.PLAYER._j] === window.undefined) NVVNW[World.PLAYER._j] = [];
        if (NVVNW[World.PLAYER._j][World.PLAYER._i] === window.undefined) NVVNW[World.PLAYER._j][World.PLAYER._i] = GUI.renderText(((("(" + World.PLAYER._j) + ",") + World.PLAYER._i) + ")", "'Viga', sans-serif", "#FFFFFF", 52, 455, "#000000", 22, 22, window.undefined, window.undefined, 0.4, window.undefined, "#000000", 15.6);
        var W = NVVNW[World.PLAYER._j][World.PLAYER._i];
        ctx.drawImage(W, 5 * scaleby, zoombutton.pos.y - (42 * scaleby), W.wh * scaleby, W.h2 * scaleby);
    };
    var VWWvn = null;
    var VWWvn = null;
    var Nnw = 0;
    var NVVNW = [];
    var vVnNn = 0;
    var settingbox;
    var bordermap;
    var minimap;
    var fullscreenimg;
    var settingsimg;
    var minimapbutt;
    var logicbutton;
    var mapexplobutton;
    var maproadbutton;
    var mapfurniturebutton;
    var mapbuildingbutton;
    var zoombutton;
    var unzoombutton;
    var mapdeletebutton;
    var importbutton;
    var copypastebutton;
    var homebutton;
    var zoombutton;
    var unzoombutton;

    function init() {
        VWWvn = GUI.renderText("Copied to clipboard", "'Viga', sans-serif", "#FFFFFF", 40, 350, "#000000", 18, 18, window.undefined, window.undefined, 0.6);
        for (i = 0; i < 64; i++) Wnw.push(GUI.createButton(40, 40, null, WwvNM));
        settingbox = GUI.createBackground(269, 267, "img/settings-box.png");
        bordermap = GUI.createBackground(412, 412, "img/borderBigMinimap2.png");
        minimap = GUI.createBackground(128, 128, "img/minimap.png");
        fullscreenimg = GUI.createButton(40, 40, ["img/full-screen-out.png", "img/full-screen-in.png", "img/full-screen-click.png"]);
        settingsimg = GUI.createButton(40, 40, ["img/settings-out.png", "img/settings-in.png", "img/settings-click.png"]);
        minimapbutt = GUI.createButton(40, 40, ["img/minimap-button-out.png", "img/minimap-button-in.png", "img/minimap-button-click.png"]);
        logicbutton = GUI.createButton(67, 67, ["img/logic-button-out.png", "img/logic-button-in.png", "img/logic-button-click.png"]);
        mapexplobutton = GUI.createButton(67, 67, ["img/map-explosive-button-out.png", "img/map-explosive-button-in.png", "img/map-explosive-button-click.png"]);
        maproadbutton = GUI.createButton(67, 67, ["img/map-road-button-out.png", "img/map-road-button-in.png", "img/map-road-button-click.png"]);
        mapfurniturebutton = GUI.createButton(67, 67, ["img/map-furniture-button-out.png", "img/map-furniture-button-in.png", "img/map-furniture-button-click.png"]);
        mapbuildingbutton = GUI.createButton(67, 67, ["img/map-building-button-out.png", "img/map-building-button-in.png", "img/map-building-button-click.png"]);
        zoombutton = GUI.createButton(46.5, 46.5, ["img/zoom-button-out.png", "img/zoom-button-in.png", "img/zoom-button-click.png"]);
        unzoombutton = GUI.createButton(46.5, 46.5, ["img/unzoom-button-out.png", "img/unzoom-button-in.png", "img/unzoom-button-click.png"]);
        mapdeletebutton = GUI.createButton(40, 40, ["img/map-delete-button-out.png", "img/map-delete-button-in.png", "img/map-delete-button-click.png"]);
        importbutton = GUI.createButton(46.5, 46.5, ["img/import-button-out.png", "img/import-button-in.png", "img/import-button-click.png"]);
        copypastebutton = GUI.createButton(46.5, 46.5, ["img/copy-paste-button-out.png", "img/copy-paste-button-in.png", "img/copy-paste-button-click.png"]);
        homebutton = GUI.createButton(60, 60, ["img/home-button-out.png", "img/home-button-in.png", "img/home-button-click.png"]);
    };
    var MVv;
    var NWV = new Mouse.LocalMouseEvent;
    var nNw = new Keyboard.LocalKeyboardEvent;
    var VWm = 1000;
    var WWN = 0;
    var VNvnM = MathUtils.Ease.inQuad;
    var Nmv = 1000;
    var mwm = 0;
    var WVWWm = MathUtils.Ease.outQuad;
    var WwM = 0;
    var MNw = 0;
    var mwn = window.undefined;

    function run() {
        window.document.getElementById("bod").style.backgroundColor = "#46664D";
        nmMMm = 0;
        AudioManager.startGame();
        if (vVnNn === 0) {
            vVnNn = 1;
            var vnvwV = items[IID.__ROAD__].subtype;
            for (var i = 0; i < vnvwV.length; i++) {
                var IID = vnvwV[i];
                IID.img = {
                    src: [IID.building.src, "img/useless.png", "img/useless.png"],
                    W: [{
                        isLoaded: 0
                    }, {
                        isLoaded: 0
                    }, {
                        isLoaded: 0
                    }]
                };
            }
            var vnvwV = items[IID.MMnVW].subtype;
            for (var i = 0; i < vnvwV.length; i++) {
                var IID = vnvwV[i];
                IID.img = {
                    src: [IID.building.src, "img/useless.png", "img/useless.png"],
                    W: [{
                        isLoaded: 0
                    }, {
                        isLoaded: 0
                    }, {
                        isLoaded: 0
                    }]
                };
            }
        }
        MVWMn();
        CanvasUtils.setRenderer(Editor);
        MNw = Nmv;
        WwM = Nmv;
        mwn = WVWWm;
        mwm = 1;
        update();
    };

    function quit(wMN) {
        nVN();
        AudioManager.quitGame();
        MVv = wMN;
        VVwMW();
        MNw = VWm;
        WwM = VWm;
        mwn = VNvnM;
        WWN = 1;
    };

    function update() {
        var vMm = 0;
        var wwv = 0;
        if (MNw > 0) {
            wwv = canh;
            var transition = mwn(1 - (MNw / WwM));
            if (transition === 1) MNw = 0;
            if (mwm === 1) transition = 1 - window.Math.abs(transition);
            vMm *= transition;
            wwv *= transition;
        }
        settingbox.pos.x = (canw2 - window.Math.floor(134 * scaleby)) + vMm;
        settingbox.pos.y = window.Math.max(0, canh2 - window.Math.floor(133 * scaleby)) + wwv;
        bordermap.pos.x = (canw2 - window.Math.floor(206 * scaleby)) + vMm;
        bordermap.pos.y = window.Math.max(0, canh2 - window.Math.floor(206 * scaleby)) + wwv;
        minimap.pos.x = window.Math.floor(5 * scaleby) - vMm;
        minimap.pos.y = window.Math.floor(5 * scaleby) - wwv;
        fullscreenimg.pos.x = minimap.pos.x + window.Math.floor(126 * scaleby);
        fullscreenimg.pos.y = minimap.pos.y;
        settingsimg.pos.x = fullscreenimg.pos.x;
        settingsimg.pos.y = fullscreenimg.pos.y + window.Math.floor(44.5 * scaleby);
        minimapbutt.pos.x = settingsimg.pos.x;
        minimapbutt.pos.y = settingsimg.pos.y + window.Math.floor(44.5 * scaleby);
        logicbutton.pos.x = ((canw - window.Math.floor(67 * scaleby)) + window.Math.floor(-5 * scaleby)) - vMm;
        logicbutton.pos.y = window.Math.floor(5 * scaleby) - wwv;
        mapexplobutton.pos.x = logicbutton.pos.x + window.Math.floor(-70 * scaleby);
        mapexplobutton.pos.y = window.Math.floor(5 * scaleby) - wwv;
        maproadbutton.pos.x = mapexplobutton.pos.x + window.Math.floor(-70 * scaleby);
        maproadbutton.pos.y = window.Math.floor(5 * scaleby) - wwv;
        mapfurniturebutton.pos.x = maproadbutton.pos.x + window.Math.floor(-70 * scaleby);
        mapfurniturebutton.pos.y = window.Math.floor(5 * scaleby) - wwv;
        mapbuildingbutton.pos.x = mapfurniturebutton.pos.x + window.Math.floor(-70 * scaleby);
        mapbuildingbutton.pos.y = window.Math.floor(5 * scaleby) - wwv;
        zoombutton.pos.x = window.Math.floor(5 * scaleby);
        zoombutton.pos.y = (canh - window.Math.floor(46.5 * scaleby)) + window.Math.floor(-5 * scaleby);
        unzoombutton.pos.x = zoombutton.pos.x + window.Math.floor(50 * scaleby);
        unzoombutton.pos.y = (canh - window.Math.floor(46.5 * scaleby)) + window.Math.floor(-5 * scaleby);
        mapdeletebutton.pos.x = minimap.pos.x + window.Math.floor(89 * scaleby);
        mapdeletebutton.pos.y = minimap.pos.y + window.Math.floor(126 * scaleby);
        importbutton.pos.x = (canw - window.Math.floor(46.5 * scaleby)) + window.Math.floor(-5 * scaleby);
        importbutton.pos.y = (canh - window.Math.floor(46.5 * scaleby)) + window.Math.floor(-5 * scaleby);
        copypastebutton.pos.x = importbutton.pos.x + window.Math.floor(-50 * scaleby);
        copypastebutton.pos.y = (canh - window.Math.floor(46.5 * scaleby)) + window.Math.floor(-5 * scaleby);
        homebutton.pos.x = minimap.pos.x;
        homebutton.pos.y = minimap.pos.y + window.Math.floor(126 * scaleby);
    };

    function draw() {
        if (MMVwV() === 0) return;
        vnMVv();
        nNvvV();
        ctx.clearRect(0, 0, canw, canh);
        World.updatePosition();
        Render.world();
        Render.minimap(minimap.pos.x, minimap.pos.y);
        minimap.draw();
        fullscreenimg.draw();
        settingsimg.draw();
        minimapbutt.draw();
        logicbutton.draw();
        mapexplobutton.draw();
        maproadbutton.draw();
        mapfurniturebutton.draw();
        mapbuildingbutton.draw();
        zoombutton.draw();
        unzoombutton.draw();
        mapdeletebutton.draw();
        importbutton.draw();
        copypastebutton.draw();
        homebutton.draw();
        markposition();
        wWNmN();
        if (NmW === 1) {
            if (isMapOpen === 1) Render.bigminimap(bordermap, closebutt);
            else if (isSettingsOpen === 1) Render.config(settingbox, wWNnw, nvwMN, MNVVn, VmvmN, WMVVn, wvNNV, WVnnn, NmVWV, vVMWm, closebutt, wVwnm, VnWMV, wwMwv);
        } else if (isTouchScreen === 1) {
            if ((((Keyboard.isLeft() + Keyboard.isRight()) + Keyboard.isTop()) + Keyboard.isBottom()) >= 1) {
                ctx.globalAlpha = 0.3;
                var WX = canw2ns - (canw4ns * 1.5);
                var WY = canh2ns + (canw4ns / 4);
                CanvasUtils.circle(ctx, WX, WY, 60);
                CanvasUtils.drawPath(ctx, "#000000");
                CanvasUtils.circle(ctx, WX + ((window.Math.cos(MWVNw) * NVNwm) * scaleby), WY + ((window.Math.sin(MWVNw) * NVNwm) * scaleby), 30);
                CanvasUtils.drawPath(ctx, "#FFFFFF");
                ctx.globalAlpha = 1;
            }
            if (vmWNW === 1) {
                ctx.globalAlpha = 0.3;
                var WX = canw2ns + (canw4ns * 1.5);
                var WY = canh2ns + (canw4ns / 4);
                CanvasUtils.circle(ctx, WX, WY, 60);
                CanvasUtils.drawPath(ctx, "#000000");
                CanvasUtils.circle(ctx, WX + ((window.Math.cos(Mouse.angle) * 25) * scaleby), WY + ((window.Math.sin(Mouse.angle) * 25) * scaleby), 30);
                CanvasUtils.drawPath(ctx, "#FFFFFF");
                ctx.globalAlpha = 1;
            }
        }
        AudioManager.scheduler();
    };

    function MMVwV() {
        if (WWN === 1) {
            update();
            if (MNw < 0) {
                WWN = 0;
                fullscreenimg.setState(GUI.__BUTTON_OUT__);
                settingsimg.setState(GUI.__BUTTON_OUT__);
                minimapbutt.setState(GUI.__BUTTON_OUT__);
                logicbutton.setState(GUI.__BUTTON_OUT__);
                mapexplobutton.setState(GUI.__BUTTON_OUT__);
                maproadbutton.setState(GUI.__BUTTON_OUT__);
                mapfurniturebutton.setState(GUI.__BUTTON_OUT__);
                mapbuildingbutton.setState(GUI.__BUTTON_OUT__);
                zoombutton.setState(GUI.__BUTTON_OUT__);
                unzoombutton.setState(GUI.__BUTTON_OUT__);
                mapdeletebutton.setState(GUI.__BUTTON_OUT__);
                importbutton.setState(GUI.__BUTTON_OUT__);
                copypastebutton.setState(GUI.__BUTTON_OUT__);
                homebutton.setState(GUI.__BUTTON_OUT__);
                MVv.run();
                return 0;
            }
            MNw -= delta;
        } else if (mwm === 1) {
            update();
            if (MNw < 0) {
                mwm = 0;
                MmNNN();
            }
            MNw -= delta;
        }
        return 1;
    };


    function VNn(event) {
        Mouse.updateAll(event, Mouse.__MOUSE_DOWN__);
        var vnm = 0;
        if (fullscreenimg.trigger() === 1) {
            vnm = 1;
        }
        if (settingsimg.trigger() === 1) {
            vnm = 1;
        }
        if (minimapbutt.trigger() === 1) {
            vnm = 1;
        }
        if (logicbutton.trigger() === 1) {
            vnm = 1;
        }
        if (mapexplobutton.trigger() === 1) {
            vnm = 1;
        }
        if (maproadbutton.trigger() === 1) {
            vnm = 1;
        }
        if (mapfurniturebutton.trigger() === 1) {
            vnm = 1;
        }
        if (mapbuildingbutton.trigger() === 1) {
            vnm = 1;
        }
        if (zoombutton.trigger() === 1) {
            vnm = 1;
        }
        if (unzoombutton.trigger() === 1) {
            vnm = 1;
        }
        if (mapdeletebutton.trigger() === 1) {
            vnm = 1;
        }
        if (importbutton.trigger() === 1) {
            vnm = 1;
        }
        if (homebutton.trigger() === 1) {
            vnm = 1;
        }
        if (NmW === 1) {
            closebutt.trigger();
            if (isSettingsOpen === 1) {
                VmvmN.trigger();
                WMVVn.trigger();
                wWNnw.trigger();
                nvwMN.trigger();
                MNVVn.trigger();
                wvNNV.trigger();
                WVnnn.trigger();
                NmVWV.trigger();
                vVMWm.trigger();
                VnWMV.trigger();
                wVwnm.trigger();
                wwMwv.trigger();
            }
        } else {
            for (var i = 0; i < NWw; i++) {
                if (Wnw[i].trigger() === 1) vnm = 1;
            }
        }
        if ((vnm === 0) && (NmW === 0)) {
            nmMMm = 1;
            if (World.PLAYER.click === -1) World.PLAYER.click = 0;
        } else {
            if (World.PLAYER.click === 0) World.PLAYER.click = -1;
        }
    };

    function vNm(event) {
        Mouse.updateAll(event, Mouse.__MOUSE_UP__);
        var vnm = 0;
        if (fullscreenimg.trigger() === 1) {
            vnm = 1;
            if (MNnnv === 0) {
                MNnnv = 1;
                CanvasUtils.enableFullscreen();
                if (World.day === 0) canvas.style.backgroundColor = "#3D5942";
                else canvas.style.backgroundColor = "#0B2129";
                AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
            } else {
                MNnnv = 0;
                CanvasUtils.disableFullscreen();
                AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
            }
        }
        if (settingsimg.trigger() === 1) {
            vnm = 1;
            if (isSettingsOpen === 0) {
                nVN();
                NmW = 1;
                isSettingsOpen = 1;
                AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                return;
            } else {
                nVN();
                AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                return;
            }
        }
        if (minimapbutt.trigger() === 1) {
            vnm = 1;
            if (isMapOpen === 0) {
                nVN();
                NmW = 1;
                isMapOpen = 1;
                AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                return;
            } else {
                nVN();
                AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                return;
            }
        }
        if (logicbutton.trigger() === 1) {
            vnm = 1;
            NWw = 0;
            for (var i = 1; i < items.length; i++) {
                var IID = items[i];
                if (IID.behavior === BEHAVIOR.__LOGIC__) {
                    Wnw[NWw].setImages(IID.img.src, IID.img.W);
                    Wnw[NWw].vmM = IID.id;
                    NWw++;
                }
            }
            AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
        }
        if (mapexplobutton.trigger() === 1) {
            vnm = 1;
            NWw = 0;
            for (var i = 1; i < items.length; i++) {
                var IID = items[i];
                if ((((IID.id === IID.landmine) || (IID.id === IID.c4bomb)) || (IID.id === IID.woodespike)) || (IID.id === IID.dynamite)) {
                    Wnw[NWw].setImages(IID.img.src, IID.img.W);
                    Wnw[NWw].vmM = IID.id;
                    NWw++;
                }
            }
            AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
        }
        if (maproadbutton.trigger() === 1) {
            vnm = 1;
            NWw = 0;
            var vnvwV = items[IID.__ROAD__].subtype;
            for (var i = 0; i < vnvwV.length; i++) {
                var IID = vnvwV[i];
                Wnw[NWw].setImages(IID.img.src, IID.img.W);
                Wnw[NWw].vmM = IID.__ROAD__;
                Wnw[NWw].nVWnM = i;
                NWw++;
            }
            AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
        }
        if (mapfurniturebutton.trigger() === 1) {
            vnm = 1;
            NWw = 0;
            var vnvwV = items[IID.MMnVW].subtype;
            for (var i = 0; i < vnvwV.length; i++) {
                var IID = vnvwV[i];
                Wnw[NWw].setImages(IID.img.src, IID.img.W);
                Wnw[NWw].vmM = IID.MMnVW;
                Wnw[NWw].nVWnM = i;
                NWw++;
            }
            AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
        }
        if (mapbuildingbutton.trigger() === 1) {
            vnm = 1;
            NWw = 0;
            for (var i = 1; i < items.length; i++) {
                var IID = items[i];
                if (((((IID.wall === 1) || (IID.lowWall === 1)) || (IID.door === 1)) || (IID.chest === 1)) || (IID.fridge === 1)) {
                    Wnw[NWw].setImages(IID.img.src, IID.img.W);
                    Wnw[NWw].vmM = IID.id;
                    NWw++;
                }
            }
            AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
        }

        if (zoombutton.trigger() === 1) {
            vnm = 1;
            if (Render.scale < 1.5) {
                Render.scale += 0.1;
                AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                unzoombutton.show();
                if (Render.scale >= 1.5) zoombutton.hide();
            }
        }
        if (unzoombutton.trigger() === 1) {
            vnm = 1;
            if (Render.scale > -0.95) {
                if (Render.scale < 0) Render.scale -= 0.05;
                else Render.scale -= 0.1;
                AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                zoombutton.show();
                if (Render.scale <= -0.95) unzoombutton.hide();
            }
        }


        if (mapdeletebutton.trigger() === 1) {
            vnm = 1;
            MVWMn();
            AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
        }
        if (importbutton.trigger() === 1) {
            vnm = 1;
            AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
            var MWwVN = window["prompt"]("Please enter your code here", "");
            AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
            if ((MWwVN != null) && (MWwVN != "")) wwMmV(MWwVN);
        }
        if (copypastebutton.trigger() === 1) {
            vnm = 1;
            AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
            exportmapfunc();
        }
        if (homebutton.trigger() === 1) {
            vnm = 1;
            Editor.quit(Home);
            AudioUtils.playFx(AudioUtils._fx.play, 1, 0);
        }
        if (NmW === 1) {
            if (closebutt.trigger() === 1) {
                nVN();
                AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                return;
            }
            if (isSettingsOpen === 1) {
                WMVVn.setState(GUI.__BUTTON_OUT__);
                VmvmN.setState(GUI.__BUTTON_OUT__);
                wWNnw.setState(GUI.__BUTTON_OUT__);
                nvwMN.setState(GUI.__BUTTON_OUT__);
                MNVVn.setState(GUI.__BUTTON_OUT__);
                wvNNV.setState(GUI.__BUTTON_OUT__);
                WVnnn.setState(GUI.__BUTTON_OUT__);
                NmVWV.setState(GUI.__BUTTON_OUT__);
                vVMWm.setState(GUI.__BUTTON_OUT__);
                wVwnm.setState(GUI.__BUTTON_OUT__);
                VnWMV.setState(GUI.__BUTTON_OUT__);
                wwMwv.setState(GUI.__BUTTON_OUT__);
                if (VmvmN.trigger() === 1) {
                    Keyboard.setAzerty();
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (WMVVn.trigger() === 1) {
                    Keyboard.setQwert();
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (wWNnw.trigger() === 1) {
                    CanvasUtils.setResolution(1);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (nvwMN.trigger() === 1) {
                    CanvasUtils.setResolution(2);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (MNVVn.trigger() === 1) {
                    CanvasUtils.setResolution(3);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (wvNNV.trigger() === 1) {
                    AudioUtils.setAudio(1);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (WVnnn.trigger() === 1) {
                    AudioUtils.setAudio(0);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (NmVWV.trigger() === 1) {
                    AudioUtils.setFx(1);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (vVMWm.trigger() === 1) {
                    AudioUtils.setFx(0);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (VnWMV.trigger() === 1) {
                    Render.setParticles(1);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (wVwnm.trigger() === 1) {
                    Render.setParticles(2);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                } else if (wwMwv.trigger() === 1) {
                    Render.setParticles(0);
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    return;
                }
                var MMMnn = settingbox.pos;
                if ((((Mouse.sx < MMMnn.x) || (Mouse.sx > (MMMnn.x + (234 * scaleby)))) || (Mouse.sy < MMMnn.y)) || (Mouse.sy > (MMMnn.y + (232 * scaleby)))) {
                    nVN();
                    AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                    return;
                }
            } else if (isMapOpen === 1) {
                var mNMnn = bordermap.pos;
                if ((((Mouse.sx < mNMnn.x) || (Mouse.sx > (mNMnn.x + (412 * scaleby)))) || (Mouse.sy < mNMnn.y)) || (Mouse.sy > (mNMnn.y + (412 * scaleby)))) {
                    nVN();
                    AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
                    return;
                }
            }
        } else {
            for (var i = 0; i < NWw; i++) {
                if (Wnw[i].trigger() === 1) {
                    AudioUtils.playFx(AudioUtils._fx.button, 1, 0);
                    World.PLAYER.blueprint = Wnw[i].vmM;
                    World.PLAYER.furniture = Wnw[i].nVWnM;
                    if (World.PLAYER.blueprint === IID.__ROAD__) World.PLAYER.buildRotate = 0;
                }
            }
        }
    };




    function wVv(event) {
        Mouse.updateAll(event, Mouse.__MOUSE_MOVE__);
        var vnm = 0;
        if (fullscreenimg.trigger() === 1) {
            vnm = 1;
        }
        if (settingsimg.trigger() === 1) {
            vnm = 1;
        }
        if (minimapbutt.trigger() === 1) {
            vnm = 1;
        }
        if (logicbutton.trigger() === 1) {
            vnm = 1;
        }
        if (mapexplobutton.trigger() === 1) {
            vnm = 1;
        }
        if (maproadbutton.trigger() === 1) {
            vnm = 1;
        }
        if (mapfurniturebutton.trigger() === 1) {
            vnm = 1;
        }
        if (mapbuildingbutton.trigger() === 1) {
            vnm = 1;
        }
        if (zoombutton.trigger() === 1) {
            vnm = 1;
        }
        if (unzoombutton.trigger() === 1) {
            vnm = 1;
        }
        if (mapdeletebutton.trigger() === 1) {
            vnm = 1;
        }
        if (importbutton.trigger() === 1) {
            vnm = 1;
        }
        if (copypastebutton.trigger() === 1) {
            vnm = 1;
        }
        if (homebutton.trigger() === 1) {
            vnm = 1;
        }
        if (NmW === 1) {
            closebutt.trigger();
            if (isSettingsOpen === 1) {
                VmvmN.trigger();
                WMVVn.trigger();
                wWNnw.trigger();
                nvwMN.trigger();
                MNVVn.trigger();
                wvNNV.trigger();
                WVnnn.trigger();
                NmVWV.trigger();
                vVMWm.trigger();
                VnWMV.trigger();
                wVwnm.trigger();
                wwMwv.trigger();
            }
        } else {
            for (var i = 0; i < NWw; i++) Wnw[i].trigger();
        }
    };

    function NmN(event) {
        Keyboard.keyup(event);
        if (event.keyCode === 77) {
            if (isMapOpen === 0) {
                nVN();
                NmW = 1;
                isMapOpen = 1;
                AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
            } else {
                nVN();
                AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
            }
        } else if ((event.keyCode === 27) && (NmW === 1)) {
            AudioUtils.playFx(AudioUtils._fx.open, 1, 0);
            nVN();
        } else if (event.keyCode === 82) {
            if ((World.PLAYER.isBuilding === 1) && (World.PLAYER.blueprint !== IID.__ROAD__)) World.PLAYER.buildRotate = (World.PLAYER.buildRotate + 1) % 4;
        }
    };

    function vnW(event) {
        Keyboard.keydown(event);
        if ((((event.keyCode === 37) || (event.keyCode === 38)) || (event.keyCode === 39)) || (event.keyCode === 40)) {
            event.preventDefault();
            return false;
        }
    };

    function WwW(event) {
        var NVN = 0;
        for (var wVV = 0; wVV < event.touches.length; wVV++) {
            Mouse.touchToMouseEvent(NWV, event, event.touches[wVV]);
            if (NmW === 0) {
                var sx = window.Math.floor(NWV.clientX * CanvasUtils.options.ratioX);
                var sy = window.Math.floor(NWV.clientY * CanvasUtils.options.ratioY);
                if (sy < (canh - (70 * scaleby))) {
                    var WMm = canw4 * 1.5;
                    var nmV = canw4 / 4;
                    if (sx < canw2) {
                        var MVM = 30 * scaleby;
                        MWVNw = Math2d.angle(canw2 - WMm, canh2 + nmV, sx, sy);
                        NVNwm = window.Math.min(Math2d.dist(sx, sy, canw2 - WMm, canh2 + nmV), 25);
                        if (sx < ((canw2 - WMm) - MVM)) {
                            mWM |= 1;
                            nNw.charCode = 37;
                            nNw.keyCode = 37;
                            vnW(nNw);
                        } else if (sx > ((canw2 - WMm) + MVM)) {
                            mWM |= 2;
                            nNw.charCode = 39;
                            nNw.keyCode = 39;
                            vnW(nNw);
                        }
                        if (sy < ((canh2 + nmV) - MVM)) {
                            mWM |= 4;
                            nNw.charCode = 38;
                            nNw.keyCode = 38;
                            vnW(nNw);
                        } else if (sy > ((canh2 + nmV) + MVM)) {
                            mWM |= 8;
                            nNw.charCode = 40;
                            nNw.keyCode = 40;
                            vnW(nNw);
                        }
                    } else if ((sx < (canw - (40 * scaleby))) || (sy > (40 * scaleby))) {
                        NVN = 1;
                        NWV.clientX -= WMm / CanvasUtils.options.ratioX;
                        NWV.clientY -= nmV / CanvasUtils.options.ratioX;
                        if (World.PLAYER.isBuilding === 1) {
                            var vVMmn = window.Date.now();
                            if ((vVMmn - MMMvM) < 1000) {
                                vmWNW = 1;
                                NnVMv = NWV.clientX;
                                WNmmw = NWV.clientY;
                                VNn(NWV);
                            }
                            MMMvM = vVMmn;
                        } else {
                            vmWNW = 1;
                            NnVMv = NWV.clientX;
                            WNmmw = NWV.clientY;
                            VNn(NWV);
                        }
                    }
                    continue;
                }
            }
            if ((NVN === 0) && (mWM === 0)) {
                VNn(NWV);
                NVN = 1;
            }
        }
    };

    function nMN(event) {};

    function Www(event) {
        var sx = window.Math.floor(event.changedTouches[0].clientX * CanvasUtils.options.ratioX);
        var sy = window.Math.floor(event.changedTouches[0].clientY * CanvasUtils.options.ratioY);
        if (nvnNv === 1) nvnNv = 0;
        else if (NmW === 1) vNm(NWV);
        else if ((vmWNW === 1) && (sx >= canw2)) {
            vmWNW = 0;
            NWV.clientX = NnVMv;
            NWV.clientY = WNmmw;
            vNm(NWV);
            return;
        } else if (((World.PLAYER.drag.begin === 0) && (sx < canw2)) && (sy < (canh - (70 * scaleby)))) {
            if ((sx < (240 * scaleby)) && (sy < (160 * scaleby))) vNm(NWV);
        } else vNm(NWV);
        if (mWM !== 0) {
            if (mWM & 1) {
                nNw.charCode = 37;
                NmN(nNw);
            }
            if (mWM & 2) {
                nNw.charCode = 39;
                NmN(nNw);
            }
            if (mWM & 4) {
                nNw.charCode = 38;
                NmN(nNw);
            }
            if (mWM & 8) {
                nNw.charCode = 40;
                NmN(nNw);
            }
            mWM = 0;
        }
    };

    function vnv(event) {
        var NVN = 0;
        var mWVWv = 0;
        for (var wVV = 0; wVV < event.touches.length; wVV++) {
            Mouse.touchToMouseEvent(NWV, event, event.touches[wVV]);
            if ((World.PLAYER.drag.begin === 0) && (NmW === 0)) {
                var sx = window.Math.floor(NWV.clientX * CanvasUtils.options.ratioX);
                var sy = window.Math.floor(NWV.clientY * CanvasUtils.options.ratioY);
                if (sy < (canh - (70 * scaleby))) {
                    var WMm = canw4 * 1.5;
                    var nmV = canw4 / 4;
                    if (sx < canw2) {
                        mWVWv = 1;
                        var VNM = 0;
                        var MVM = 30 * scaleby;
                        MWVNw = Math2d.angle(canw2 - WMm, canh2 + nmV, sx, sy);
                        NVNwm = window.Math.min(Math2d.dist(sx, sy, canw2 - WMm, canh2 + nmV), 25);
                        if (sx < ((canw2 - WMm) - MVM)) VNM |= 1;
                        else if (sx > ((canw2 - WMm) + MVM)) VNM |= 2;
                        if (sy < ((canh2 + nmV) + -MVM)) VNM |= 4;
                        else if (sy > ((canh2 + nmV) + MVM)) VNM |= 8;
                        if (((VNM & 1) === 1) && ((mWM & 1) !== 1)) {
                            nNw.charCode = 37;
                            vnW(nNw);
                        } else if (((VNM & 1) !== 1) && ((mWM & 1) === 1)) {
                            nNw.charCode = 37;
                            NmN(nNw);
                        }
                        if (((VNM & 2) === 2) && ((mWM & 2) !== 2)) {
                            nNw.charCode = 39;
                            vnW(nNw);
                        } else if (((VNM & 2) !== 2) && ((mWM & 2) === 2)) {
                            nNw.charCode = 39;
                            NmN(nNw);
                        }
                        if (((VNM & 4) === 4) && ((mWM & 4) !== 4)) {
                            nNw.charCode = 38;
                            vnW(nNw);
                        } else if (((VNM & 4) !== 4) && ((mWM & 4) === 4)) {
                            nNw.charCode = 38;
                            NmN(nNw);
                        }
                        if (((VNM & 8) === 8) && ((mWM & 8) !== 8)) {
                            nNw.charCode = 40;
                            vnW(nNw);
                        } else if (((VNM & 8) !== 8) && ((mWM & 8) === 8)) {
                            nNw.charCode = 40;
                            NmN(nNw);
                        }
                        mWM = VNM;
                        continue;
                    } else if ((sx < (canw - (40 * scaleby))) || (sy > (40 * scaleby))) {
                        NVN = 1;
                        NWV.clientX -= WMm / CanvasUtils.options.ratioX;
                        NWV.clientY -= nmV / CanvasUtils.options.ratioX;
                        NnVMv = NWV.clientX;
                        WNmmw = NWV.clientY;
                        wVv(NWV);
                    }
                }
            }
            if ((NVN === 0) && (mWM === 0)) {
                wVv(NWV);
                NVN = 1;
            }
        }
        if ((mWVWv === 0) && (mWM !== 0)) {
            if (mWM & 1) {
                nNw.charCode = 37;
                NmN(nNw);
            }
            if (mWM & 2) {
                nNw.charCode = 39;
                NmN(nNw);
            }
            if (mWM & 4) {
                nNw.charCode = 38;
                NmN(nNw);
            }
            if (mWM & 8) {
                nNw.charCode = 40;
                NmN(nNw);
            }
            mWM = 0;
        }
    };

    function MmNNN() {
        if (isTouchScreen === 0) window.addEventListener('mousedown', VNn, false);
        if (isTouchScreen === 0) window.addEventListener('mouseup', vNm, false);
        if (isTouchScreen === 0) window.addEventListener('mousemove', wVv, false);
        if (isTouchScreen === 0) window.addEventListener('keyup', NmN, false);
        if (isTouchScreen === 0) window.addEventListener('keydown', vnW, false);
        if (isTouchScreen === 1) window.addEventListener('touchstart', WwW, false);
        if (isTouchScreen === 1) window.addEventListener('touchend', nMN, false);
        if (isTouchScreen === 1) window.addEventListener('touchcancel', Www, false);
        if (isTouchScreen === 1) window.addEventListener('touchmove', vnv, false);
    };

    function VVwMW() {
        if (isTouchScreen === 0) window.removeEventListener('mousedown', VNn, false);
        if (isTouchScreen === 0) window.removeEventListener('mouseup', vNm, false);
        if (isTouchScreen === 0) window.removeEventListener('mousemove', wVv, false);
        if (isTouchScreen === 0) window.removeEventListener('keyup', NmN, false);
        if (isTouchScreen === 0) window.removeEventListener('keydown', vnW, false);
        if (isTouchScreen === 1) window.removeEventListener('touchstart', WwW, false);
        if (isTouchScreen === 1) window.removeEventListener('touchend', nMN, false);
        if (isTouchScreen === 1) window.removeEventListener('touchcancel', Www, false);
        if (isTouchScreen === 1) window.removeEventListener('touchmove', vnv, false);
    };
    return {
        quit: quit,
        init: init,
        run: run,
        update: update,
        draw: draw
    };
})();


var __COUNTER__ = 1;
var wMM = {};
wMM.MMvVn = __COUNTER__++;
wMM.vwWVn = __COUNTER__++;
wMM.VWwWM = __COUNTER__++;
wMM.Vwmwn = __COUNTER__++;
wMM.wNWmV = __COUNTER__++;
wMM.vnvMn = __COUNTER__++;
wMM.MwwMM = __COUNTER__++;
wMM.wvMWm = __COUNTER__++;
wMM.NWnVN = __COUNTER__++;
wMM.vWWNm = __COUNTER__++;
wMM.VnWMW = __COUNTER__++;
wMM.nmWVN = __COUNTER__++;
wMM.MvVmM = __COUNTER__++;
wMM.WmvMn = __COUNTER__++;
wMM.VWVNW = __COUNTER__++;
var NVwvn = [{}, {
    id: wMM.MMvVn,
    src: "img/road-T0B0L0R1.png",
    W: {
        isLoaded: 0
    },
    minimap: {
        x: 0,
        y: 0,
        h: 28,
        w: 28
    },
    grid: [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ],
    alt: [wMM.MMvVn]
}, {
    id: wMM.vwWVn,
    src: "img/road-T0B0L1R0.png",
    W: {
        isLoaded: 0
    },
    minimap: {
        x: 28,
        y: 0,
        h: 28,
        w: 28
    },
    grid: [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ],
    alt: [wMM.vVNmn, wMM.VvNnM]
}, {
    id: wMM.VWwWM,
    src: "img/road-T0B0L1R1.png",
    W: {
        isLoaded: 0
    },
    minimap: {
        x: 56,
        y: 0,
        h: 28,
        w: 28
    },
    grid: [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ],
    alt: [wMM.wNMVw, wMM.VNVvm, wMM.mWvMm, wMM.MNvnM, wMM.VvnnVWm, wMM.NmwnW, wMM.mvMWN, wMM.NVwVw]
}, {
    id: wMM.Vwmwn,
    src: "img/road-T0B1L0R0.png",
    W: {
        isLoaded: 0
    },
    minimap: {
        x: 84,
        y: 0,
        h: 28,
        w: 28
    },
    grid: [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ],
    alt: [wMM.vwmNN, wMM.nmWNV]
}, {
    id: wMM.wNWmV,
    src: "img/road-T0B1L0R1.png",
    W: {
        isLoaded: 0
    },
    minimap: {
        x: 56,
        y: 28,
        h: 28,
        w: 28
    },
    grid: [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]
}, {
    id: wMM.vnvMn,
    src: "img/road-T0B1L1R0.png",
    W: {
        isLoaded: 0
    },
    minimap: {
        x: 0,
        y: 56,
        h: 28,
        w: 28
    },
    grid: [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]
}, {
    id: wMM.MwwMM,
    src: "img/road-T0B1L1R1.png",
    W: {
        isLoaded: 0
    },
    minimap: {
        x: 112,
        y: 0,
        h: 28,
        w: 28
    },
    grid: [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]
}, {
    id: wMM.wvMWm,
    src: "img/road-T1B0L0R0.png",
    W: {
        isLoaded: 0
    },
    minimap: {
        x: 28,
        y: 28,
        h: 28,
        w: 28
    },
    grid: [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]
}, {
    id: wMM.NWnVN,
    src: "img/road-T1B0L0R1.png",
    W: {
        isLoaded: 0
    },
    minimap: {
        x: 56,
        y: 56,
        h: 28,
        w: 28
    },
    grid: [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]
}, {
    id: wMM.vWWNm,
    src: "img/road-T1B0L1R0.png",
    W: {
        isLoaded: 0
    },
    minimap: {
        x: 84,
        y: 56,
        h: 28,
        w: 28
    },
    grid: [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]
}, {
    id: wMM.VnWMW,
    src: "img/road-T1B0L1R1.png",
    W: {
        isLoaded: 0
    },
    minimap: {
        x: 84,
        y: 28,
        h: 28,
        w: 28
    },
    grid: [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]
}, {
    id: wMM.nmWVN,
    src: "img/road-T1B1L0R0.png",
    W: {
        isLoaded: 0
    },
    minimap: {
        x: 112,
        y: 56,
        h: 28,
        w: 28
    },
    grid: [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]
}, {
    id: wMM.MvVmM,
    src: "img/road-T1B1L0R1.png",
    W: {
        isLoaded: 0
    },
    minimap: {
        x: 112,
        y: 28,
        h: 28,
        w: 28
    },
    grid: [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]
}, {
    id: wMM.WmvMn,
    src: "img/road-T1B1L1R0.png",
    W: {
        isLoaded: 0
    },
    minimap: {
        x: 0,
        y: 28,
        h: 28,
        w: 28
    },
    grid: [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]
}, {
    id: wMM.VWVNW,
    src: "img/road-T1B1L1R1.png",
    W: {
        isLoaded: 0
    },
    minimap: {
        x: 28,
        y: 56,
        h: 28,
        w: 28
    },
    grid: [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ],
    alt: [wMM.wmMVw, wMM.vnWNW]
}];
try {
    if (exports !== window.undefined) {
        exports.wMM = wMM;
        exports.NVwvn = NVwvn;
    }
} catch (error) {}

    var Render = (function() {
        var __TILE_SIZE__ = 100;      
        var __TILE_SIZE2__ = __TILE_SIZE__ / 2; 
        var __TILE_SCALE__ = 1;
        var NVmMW = 13;
        var WnWvv = 9;
        var WwmVw = 100;
        var WMNWw = 0.025; 
        var NMmmm = 0; 
        var VmNmN = 0.01;
        var NmMvvvN = 0.008;
        var NMv = 0;
        var WMwnW = 0;
        var mmVNm = 0;
        var wWw = 0;
        var NnvWw = 3;
        var nwMnv = 0;
        var vnvWWnW = 0;
        var vvVMV = 0;
        var VnvWV = 0;
        var vvNWNnN = 450;
        var vWw = 410;
        var wvNVM = vWw;
        var wVNMN = 412 / 8;
        var NnWnv = 0;
        var bordermapbig = "img/borderBigMinimap2.png";
        var maparrowicon = "img/arrow-minimap.png";
        var maparrowicon2 = "img/arrow-minimap2.png";
        var houseicon = "img/house-icon.png";
        var cityicon = "img/city-icon.png";
        var emptyinventoryicon = "img/inv-empty.png";
        var looticon = "img/loot.png";
        var lootmobileicon = "img/loot-isTouchScreen.png";
        var loot2icon = "img/loot2.png";
        var timericon = "img/timer.png";
        var craftgrid = "img/craft-grid.png";
        var timerarrow = "img/timer-arrow.png";
        var timerlights = "img/timer-lights.png";
        var hintrotate = "img/hint-rotate.png";
        var useicon = "img/day-unusable.png";
        var MMVnVmV = "img/day-unusable.png";
        var dayclock = "img/day-clock.png";
        var nightclock = "img/night-clock.png";
        var clockhand = "img/clock-hand.png";
        var clockhandrad = "img/clock-hand-radiation.png";
        var dayclockhand = "img/day-clock-hand.png";
        var craftgauge = "img/craft-gauge.png";
        var strokebonus = "img/stroke-bonus.png";
        var wrongtool = "img/wrong-tool.png";
        var handtool = "img/hand-tool.png";
        var arrowcraft = "img/arrow-craft.png";
        var unlockskill = "img/unlock-skills.png";
        var serverfull = "img/server-full.png";
        var serverold = "img/server-old.png";
        var clientold = "img/client-old.png";
        var serverwrong = "img/server-wrong.png";
        var invbox = "img/invitation-box.png";
        var timebox = "img/time-box.png";
        var rankbox = "img/rank-box.png";
        var toxicalert = "img/toxic-alert.png";
        var radalert = "img/radiation-alert.png";
        var Mvvwv = 500;
        var mVmWm = 256;
        var NNmnW = mVmWm * 2;
        var mMmvV = 500;
        var WWn = window.Math.floor(mVmWm / 2);
        var nWWwM = window.Math.floor(WWn / 2);
        var NVvVm = "img/alert";
        var Vwwmw = 699;
        var nvnwM = 738;
        var lightgreen = "#70BD56";
        var orange = "#e58833";
        var lightblue = "#55B7BC";
        var yellow = "#d7c83a";
        var white = "#FFFFFF";
        var Mvnwm = 3000;
        var mmWWw = 500;
        var WWMnN = 2500;
        var WNVNM = window.Math.PI * 2;
        var Mwwnm = 165 * (window.Math.PI / 180);
        var PIby2 = window.Math.PI / 2;
        var mWvNn = window.Math.PI / World.__DAY__;
        var key_a = 1;
        var key_d = 2;
        var key_w = 4;
        var key_s = 8;
        var MMn = 16;
        var nNn = 32;
        var Nvn = 64;
        var nwM = 128;
        var mMwmm = 0;
        var NVW = 1;
        var mWn = 2;
        var WMN = 4;
        var wwm = 8;
        var MwnMm = 0;
        var NNvnn = 1;
        var MnVmm = 2;
        var WnmmN = 3;
        var vNw = [
            [],
            [],
            [],
            []
        ];
        vNw[MwnMm][mMwmm] = 0;
        vNw[MwnMm][NVW] = 3;
        vNw[MwnMm][mWn] = 6;
        vNw[MwnMm][WMN | wwm] = 9;
        vNw[MwnMm][WMN] = 4;
        vNw[MwnMm][wwm] = 5;
        vNw[MwnMm][NVW | WMN] = 27;
        vNw[MwnMm][NVW | wwm] = 20;
        vNw[MwnMm][mWn | WMN] = 7;
        vNw[MwnMm][mWn | wwm] = 28;
        vNw[MwnMm][(NVW | WMN) | wwm] = 24;
        vNw[MwnMm][(mWn | WMN) | wwm] = 29;
        vNw[MnVmm][mMwmm] = 0;
        vNw[MnVmm][NVW] = 3;
        vNw[MnVmm][mWn] = 6;
        vNw[MnVmm][WMN | wwm] = 9;
        vNw[MnVmm][WMN] = 4;
        vNw[MnVmm][wwm] = 5;
        vNw[MnVmm][NVW | WMN] = 27;
        vNw[MnVmm][NVW | wwm] = 20;
        vNw[MnVmm][mWn | WMN] = 7;
        vNw[MnVmm][mWn | wwm] = 28;
        vNw[MnVmm][(NVW | WMN) | wwm] = 24;
        vNw[MnVmm][(mWn | WMN) | wwm] = 29;
        vNw[NNvnn][mMwmm] = 11;
        vNw[NNvnn][NVW] = 12;
        vNw[NNvnn][mWn] = 17;
        vNw[NNvnn][WMN | wwm] = 10;
        vNw[NNvnn][WMN] = 19;
        vNw[NNvnn][wwm] = 18;
        vNw[NNvnn][NVW | WMN] = 34;
        vNw[NNvnn][NVW | wwm] = 22;
        vNw[NNvnn][mWn | WMN] = 23;
        vNw[NNvnn][mWn | wwm] = 33;
        vNw[NNvnn][(NVW | WMN) | wwm] = 35;
        vNw[NNvnn][(mWn | WMN) | wwm] = 32;
        vNw[WnmmN][mMwmm] = 11;
        vNw[WnmmN][NVW] = 15;
        vNw[WnmmN][mWn] = 14;
        vNw[WnmmN][WMN | wwm] = 10;
        vNw[WnmmN][WMN] = 19;
        vNw[WnmmN][wwm] = 18;
        vNw[WnmmN][NVW | WMN] = 37;
        vNw[WnmmN][NVW | wwm] = 16;
        vNw[WnmmN][mWn | WMN] = 23;
        vNw[WnmmN][mWn | wwm] = 38;
        vNw[WnmmN][(NVW | WMN) | wwm] = 36;
        vNw[WnmmN][(mWn | WMN) | wwm] = 39;
        var WMV = [];
        WMV[0] = 0;
        WMV[key_a] = 3;
        WMV[key_d] = 4;
        WMV[key_w] = 2;
        WMV[key_s] = 1;
        WMV[key_a | key_w] = 17;
        WMV[key_a | key_d] = 5;
        WMV[key_a | key_s] = 18;
        WMV[key_d | key_w] = 16;
        WMV[key_d | key_s] = 19;
        WMV[key_w | key_s] = 6;
        WMV[(key_a | key_w) | key_s] = 10;
        WMV[(key_a | key_w) | key_d] = 9;
        WMV[(key_s | key_w) | key_d] = 11;
        WMV[(key_a | key_s) | key_d] = 8;
        WMV[((key_a | key_w) | key_d) | key_s] = 7;
        WMV[(key_s | key_d) | MMn] = 12;
        WMV[(key_s | key_a) | nNn] = 13;
        WMV[(key_w | key_a) | nwM] = 14;
        WMV[(key_w | key_d) | Nvn] = 15;
        WMV[((key_w | key_s) | key_d) | MMn] = 20;
        WMV[(((key_w | key_s) | key_d) | key_a) | MMn] = 21;
        WMV[((key_a | key_s) | key_d) | MMn] = 22;
        WMV[(((key_w | key_s) | key_d) | key_a) | Nvn] = 23;
        WMV[((key_a | key_w) | key_d) | Nvn] = 24;
        WMV[((key_w | key_s) | key_d) | Nvn] = 25;
        WMV[((key_w | key_s) | key_a) | nwM] = 26;
        WMV[(((key_w | key_s) | key_d) | key_a) | nwM] = 27;
        WMV[((key_w | key_d) | key_a) | nwM] = 28;
        WMV[((key_s | key_d) | key_a) | nNn] = 29;
        WMV[(((key_w | key_s) | key_d) | key_a) | nNn] = 30;
        WMV[((key_w | key_s) | key_a) | nNn] = 31;
        WMV[((((((key_w | key_s) | key_d) | key_a) | nNn) | MMn) | nwM) | Nvn] = 32;
        WMV[((((key_w | key_s) | key_d) | key_a) | nNn) | nwM] = 33;
        WMV[((((key_w | key_s) | key_d) | key_a) | nNn) | MMn] = 34;
        WMV[((((key_w | key_s) | key_d) | key_a) | nNn) | Nvn] = 35;
        WMV[((((key_w | key_s) | key_d) | key_a) | MMn) | nwM] = 36;
        WMV[((((key_w | key_s) | key_d) | key_a) | Nvn) | MMn] = 37;
        WMV[((((key_w | key_s) | key_d) | key_a) | Nvn) | nwM] = 38;
        WMV[(((key_w | key_s) | key_d) | Nvn) | MMn] = 39;
        WMV[(((key_w | key_s) | key_a) | nwM) | nNn] = 40;
        WMV[(((key_d | key_s) | key_a) | MMn) | nNn] = 41;
        WMV[(((key_d | key_w) | key_a) | Nvn) | nwM] = 42;
        WMV[(((((key_w | key_s) | key_d) | key_a) | nNn) | nwM) | Nvn] = 43;
        WMV[(((((key_w | key_s) | key_d) | key_a) | MMn) | nwM) | Nvn] = 44;
        WMV[(((((key_w | key_s) | key_d) | key_a) | nNn) | MMn) | Nvn] = 45;
        WMV[(((((key_w | key_s) | key_d) | key_a) | nNn) | MMn) | nwM] = 46;
        var vMNWw = 0;
        var wVmnN = 1;
        var nWNMn = 2;
        var wnNWM = 600;
        var i, j;
        var vertst = 0;
        var horist = 0;
        var NmM = 0;
        var WWV = 0;
        var NVVWM = 0;
        var WVNMV = 0;
        var vvWnv = 0;
        var Nvmmn = 0;
        var vwMWM = VmNmN;
        var WvmnV = 0;
        var wWWNM = 0;
        var vMnmV = [];
        for (i = 0; i < 20; i++) vMnmV[i] = {
            isLoaded: 0
        };
        var NwMVW = nWNMn;
        var vMnnw = [];
        var matrix = [];
        var wWmnn = NVmMW;
        var VmvVW = WnWvv;
        var NwVwM = NVmMW * __TILE_SIZE__;
        var wNwMv = WnWvv * __TILE_SIZE__;
        var NmWnM = [];
        var nNMVM = {
            isLoaded: 0
        };
        var hintRotate = {
            isLoaded: 0
        };
        var wnW = {
            move: 0,
            effect: 0,
            src: arrowcraft,
            W: {
                isLoaded: 0
            }
        };
        var wvV = {
            move: 0,
            effect: 0,
            src: unlockskill,
            W: {
                isLoaded: 0
            }
        };
        var timeleft = {
            src: timebox,
            W: {
                isLoaded: 0
            }
        };
        var WvWnV = {
            src: rankbox,
            W: {
                isLoaded: 0
            }
        };
        var WWmMW = {
            src: toxicalert,
            W: {
                isLoaded: 0
            }
        };
        var MvvNN = 0;
        var VmWNN = {
            src: radalert,
            W: {
                isLoaded: 0
            }
        };
        var WNmVW = 0;
        var econtainericon = {
            src: "img/e-furniture.png",
            W: {
                isLoaded: 0
            }
        };
        var vMnmm = CanvasUtils.loadImage("img/toxic-area2.png");
        var VmnwN = CanvasUtils.loadImage("img/toxic-area3.png");
        var wVVVn = [];
        var playerAlive = [];
        var wmvVw = {
            isLoaded: 0
        };
        var arv = {
            isLoaded: 0
        };
        var nMWVv = {
            isLoaded: 0
        };
        var VWvVN = {
            isLoaded: 0
        };
        var NNmMN = [0, 0, 0, 0];
        var WwmVM = NMmmm;
        var WvnvV = [];
        var pplonscr = 0;
        var useTimer = {
            isLoaded: 0
        };
        var arrow = {
            isLoaded: 0
        };
        var lights = {
            isLoaded: 0
        };
        var WMWvN = mMmvV;
        var wWNmv = {
            isLoaded: 0
        };
        var craftGauge = {
            isLoaded: 0
        };
        var vvNWN = {
            src: strokebonus,
            W: {
                isLoaded: 0
            }
        };
        var VnwNw = 0;
        var wrongTool = {
            src: wrongtool,
            W: {
                isLoaded: 0
            }
        };
        var vwnWv = {
            src: handtool,
            W: {
                isLoaded: 0
            }
        };
        var vnVmM = 12000;
        var wMVMm = 12000;
        var wVMNN = [];
        for (i = 0; i < 10; i++) {
            wVMNN[i] = [];
            for (j = 0; j < 3; j++) wVMNN[i][j] = {
                isLoaded: 0
            };
        };
        var effect = [];
        for (i = 0; i < 8; i++) {
            effect[i] = [];
            for (j = 0; j < 2; j++) effect[i][j] = {
                isLoaded: 0
            };
        }
        var arrowiconmap2 = {
            src: maparrowicon,
            W: {
                isLoaded: 0
            }
        };
        var arrowiconmap = {
            src: maparrowicon2,
            W: {
                isLoaded: 0
            }
        };
        var minimap = {
            isLoaded: 0
        };
        var houseiconmap = {
            src: houseicon,
            W: {
                isLoaded: 0
            }
        };
        var cityiconmap = {
            src: cityicon,
            W: {
                isLoaded: 0
            }
        };
        var WmVNn = {
            src: nightclock,
            W: {
                isLoaded: 0
            }
        };
        var nvvVW = {
            src: dayclock,
            W: {
                isLoaded: 0
            }
        };
        var nMmvV = {
            src: clockhand,
            W: {
                isLoaded: 0
            }
        };
        var VWmVV = {
            src: dayclockhand,
            W: {
                isLoaded: 0
            }
        };
        var wmmvv = {
            src: clockhandrad,
            W: {
                isLoaded: 0
            }
        };
        var MnNnW = {
            src: serverfull,
            W: {
                isLoaded: 0
            }
        };
        var VVvnW = {
            src: serverold,
            W: {
                isLoaded: 0
            }
        };
        var WWwmW = {
            src: clientold,
            W: {
                isLoaded: 0
            }
        };
        var nWvvv = {
            src: serverwrong,
            W: {
                isLoaded: 0
            }
        };
        var teambox = {
            isLoaded: 0
        };
        var wwvmV = [];
        for (i = 0; i < 20; i++) wwvmV.push({
            isLoaded: 0
        });
        var canvasZ = window.document.createElement('canvas');
        var context2dZ = canvasZ.getContext('2d');
        canvasZ.width = vWw;
        canvasZ.height = wvNVM;
        canvasZ.isLoaded = 1;
        canvasZ.wh = canvasZ.width / 2;
        canvasZ.h2 = canvasZ.height / 2;
        var MWNMV = {
            W: canvasZ
        };
        var canvasD = window.document.createElement('canvas');
        var context2dD = canvasD.getContext('2d');
        canvasD.width = vWw;
        canvasD.height = wvNVM;
        canvasD.isLoaded = 1;
        canvasD.wh = canvasZ.width / 2;
        canvasD.h2 = canvasZ.height / 2;
        var MMvWn = {
            W: canvasD
        };
        var mWWwn = 0;

        function _BattleRoyale() {
            if (World.PLAYER.toxicStep === 8) {
                context2dZ.clearRect(0, 0, vWw, wvNVM);
                context2dD.clearRect(0, 0, vWw, wvNVM);
                for (var i = 0; i < 8; i++) {
                    for (var j = 0; j < 8; j++) {
                        var wVvnN = World.PLAYER.toxicMap[i][j];
                        if (wVvnN === 7) context2dZ.drawImage(vMnmm, 2 + (j * wVNMN), (i * wVNMN) + 1, vMnmm.wh, vMnmm.h2);
                        else context2dZ.drawImage(VmnwN, 2 + (j * wVNMN), (i * wVNMN) + 1, vMnmm.wh, vMnmm.h2);
                    }
                }
            } else {
                context2dZ.drawImage(canvasD, 0, 0);
                context2dD.clearRect(0, 0, vWw, wvNVM);
                for (var nMm = 0; nMm < 12; nMm++) {
                    var area = World.PLAYER.lastAreas[nMm];
                    var i = area[0];
                    var j = area[1];
                    if (i === -1) continue;
                    context2dD.drawImage(vMnmm, 2 + (j * wVNMN), (i * wVNMN) + 1, vMnmm.wh, vMnmm.h2);
                }
            };
        };
        var canvasF = window.document.createElement('canvas');
        var context2dF = canvasF.getContext('2d');
        canvasF.width = Vwwmw;
        canvasF.height = nvnwM;
        WMnvM = [];
        for (var i = 0; i < 9; i++) WMnvM[i] = 0;
        var frameId = 0;
        for (i = 0; i < WnWvv; i++) {
            vMnnw[i] = [];
            for (var j = 0; j < NVmMW; j++) vMnnw[i][j] = 0;
        }
        var canvasG = window.document.createElement("canvas");
        var context2dG = canvasG.getContext("2d");
        canvasG.width = 280;
        canvasG.height = 148;
        var mwwNm = -1;
        var wmvMm = [];
        var nmMMW = [];
        var skillPoint = window.document.createElement("canvas");
        var context2H = skillPoint.getContext("2d");
        skillPoint.width = 280;
        skillPoint.height = 50;
        var wmmVm = -1;
        var canvasJ = window.document.createElement("canvas");
        var context2J = canvasJ.getContext("2d");
        canvasJ.width = 420;
        canvasJ.height = 148;
        var MMNWW = -1;

        function MmmnN() {
            this.mVN = 0;
            this.MMNVm = 0;
            this.drawFloor = 0;
            this.NMn = 0;
            this.wall = 0;
            this.frameId = 0;
            this.nNNwM = 0;
            this.pid = 0;
            this.wMV = 0;
            this.category = 0;
            this.i = 0;
            this.b = [];
            this.rotate = 0;
            for (var i = 0; i < 3; i++) this.b.push({
                type: 0,
                cycle: 0
            });
        };

        function wmNMv(player, Rot) {
            if ((player.hurt > 0) || (player.removed !== 0)) return 0;
            var i = player.i;
            var j = player.j;
            var vV = player.extra >> 7;
            var Wn = 0;
            switch (Rot) {
                case 0:
                    if ((i + 1) < wWw) {
                        var VMV = matrix[i + 1][j];
                        if ((VMV.mVN === frameId) && (VMV.wall === vV)) {
                            if (VMV.rotate === 1) Wn += NVW;
                            else if (VMV.rotate === 3) Wn += mWn;
                        }
                    }
                    if ((j - 1) >= 0) {
                        var VMV = matrix[i][j - 1];
                        if (((VMV.mVN === frameId) && (VMV.wall === vV)) && ((VMV.rotate === 3) || (VMV.rotate === 0))) Wn += WMN;
                    }
                    if ((j + 1) < NMv) {
                        var VMV = matrix[i][j + 1];
                        if (((VMV.mVN === frameId) && (VMV.wall === vV)) && ((VMV.rotate === 1) || (VMV.rotate === 0))) Wn += wwm;
                    }
                    break;
                case 1:
                    if ((j - 1) >= 0) {
                        var VMV = matrix[i][j - 1];
                        if ((VMV.mVN === frameId) && (VMV.wall === vV)) {
                            if (VMV.rotate === 0) Wn += mWn;
                            else if (VMV.rotate === 2) Wn += NVW;
                        }
                    }
                    if ((i - 1) >= 0) {
                        var VMV = matrix[i - 1][j];
                        if (((VMV.mVN === frameId) && (VMV.wall === vV)) && ((VMV.rotate === 0) || (VMV.rotate === 1))) Wn += WMN;
                    }
                    if ((i + 1) < wWw) {
                        var VMV = matrix[i + 1][j];
                        if (((VMV.mVN === frameId) && (VMV.wall === vV)) && ((VMV.rotate === 2) || (VMV.rotate === 1))) Wn += wwm;
                    }
                    break;
                case 2:
                    if ((i - 1) >= 0) {
                        var VMV = matrix[i - 1][j];
                        if ((VMV.mVN === frameId) && (VMV.wall === vV)) {
                            if (VMV.rotate === 1) Wn += mWn;
                            else if (VMV.rotate === 3) Wn += NVW;
                        }
                    }
                    if ((j - 1) >= 0) {
                        var VMV = matrix[i][j - 1];
                        if (((VMV.mVN === frameId) && (VMV.wall === vV)) && ((VMV.rotate === 3) || (VMV.rotate === 2))) Wn += wwm;
                    }
                    if ((j + 1) < NMv) {
                        var VMV = matrix[i][j + 1];
                        if (((VMV.mVN === frameId) && (VMV.wall === vV)) && ((VMV.rotate === 1) || (VMV.rotate === 2))) Wn += WMN;
                    }
                    break;
                case 3:
                    if ((j + 1) < NMv) {
                        var VMV = matrix[i][j + 1];
                        if ((VMV.mVN === frameId) && (VMV.wall === vV)) {
                            if (VMV.rotate === 0) Wn += NVW;
                            else if (VMV.rotate === 2) Wn += mWn;
                        }
                    }
                    if ((i - 1) >= 0) {
                        var VMV = matrix[i - 1][j];
                        if (((VMV.mVN === frameId) && (VMV.wall === vV)) && ((VMV.rotate === 0) || (VMV.rotate === 3))) Wn += wwm;
                    }
                    if ((i + 1) < wWw) {
                        var VMV = matrix[i + 1][j];
                        if (((VMV.mVN === frameId) && (VMV.wall === vV)) && ((VMV.rotate === 2) || (VMV.rotate === 3))) Wn += WMN;
                    }
                    break;
            }
            return vNw[Rot][Wn];
        };

        function Wwmwm(player) {
            if ((player.hurt > 0) || (player.removed !== 0)) return 0; 
            var i = player.i;
            var j = player.j;
            var vV = player.extra >> 7;
            var Wn = 0;
            var N = 0,
                mMn = 0,
                M = 0,
                MNMWN = 0;
            if ((i - 1) >= 0) {
                var VMV = matrix[i - 1][j];
                if (VMV.MMNVm === frameId) {
                    mMn = 1;
                    Wn += key_w;
                }
            }
            if ((i + 1) < wWw) {
                var VMV = matrix[i + 1][j];
                if (VMV.MMNVm === frameId) {
                    Wn += key_s;
                    M = 1;
                }
            }
            if ((j - 1) >= 0) {
                var VMV = matrix[i][j - 1];
                if (VMV.MMNVm === frameId) {
                    Wn += key_a;
                    MNMWN = 1;
                }
            }
            if ((j + 1) < NMv) {
                var VMV = matrix[i][j + 1];
                if (VMV.MMNVm === frameId) {
                    Wn += key_d;
                    N = 1;
                }
            }
            if ((N + mMn) === 2) {
                var VMV = matrix[i - 1][j + 1];
                if (VMV.MMNVm === frameId) Wn += Nvn;
            }
            if ((MNMWN + mMn) === 2) {
                var VMV = matrix[i - 1][j - 1];
                if (VMV.MMNVm === frameId) Wn += nwM;
            }
            if ((M + N) === 2) {
                var VMV = matrix[i + 1][j + 1];
                if (VMV.MMNVm === frameId) Wn += MMn;
            }
            if ((M + MNMWN) === 2) {
                var VMV = matrix[i + 1][j - 1];
                if (VMV.MMNVm === frameId) Wn += nNn;
            }
            console.log(player.i);
            return WMV[Wn];
        };

        function WwmwN(player) {
            if ((player.hurt > 0) || (player.removed !== 0)) return 0;
            var i = player.i;
            var j = player.j;
            var wall = items[player.extra >> 7];
            var vV = wall.idWall;
            var Wn = 0;
            var N = 0,
                mMn = 0,
                M = 0,
                MNMWN = 0;
            if ((i - 1) >= 0) {
                var VMV = matrix[i - 1][j];
                if ((VMV.mVN === frameId) && (VMV.wall === vV)) {
                    mMn = 1;
                    Wn += key_w;
                }
            }
            if ((i + 1) < wWw) {
                var VMV = matrix[i + 1][j];
                if ((VMV.mVN === frameId) && (VMV.wall === vV)) {
                    Wn += key_s;
                    M = 1;
                }
            }
            if ((j - 1) >= 0) {
                var VMV = matrix[i][j - 1];
                if ((VMV.mVN === frameId) && (VMV.wall === vV)) {
                    Wn += key_a;
                    MNMWN = 1;
                }
            }
            if ((j + 1) < NMv) {
                var VMV = matrix[i][j + 1];
                if ((VMV.mVN === frameId) && (VMV.wall === vV)) {
                    Wn += key_d;
                    N = 1;
                }
            }
            if ((N + mMn) === 2) {
                var VMV = matrix[i - 1][j + 1];
                if ((VMV.mVN === frameId) && (VMV.wall === vV)) Wn += Nvn;
            }
            if ((MNMWN + mMn) === 2) {
                var VMV = matrix[i - 1][j - 1];
                if ((VMV.mVN === frameId) && (VMV.wall === vV)) Wn += nwM;
            }
            if ((M + N) === 2) {
                var VMV = matrix[i + 1][j + 1];
                if ((VMV.mVN === frameId) && (VMV.wall === vV)) Wn += MMn;
            }
            if ((M + MNMWN) === 2) {
                var VMV = matrix[i + 1][j - 1];
                if ((VMV.mVN === frameId) && (VMV.wall === vV)) Wn += nNn;
            }
            var Wn = WMV[Wn];
            matrix[i][j].drawFloor = wall.drawFloor[Wn];
            return Wn;
        };

        function smallwallsfusion(player) {
            var vV = player.extra >> 7;
            if (((items[vV].lowWall !== 1) || (player.hurt > 0)) || (player.broke > 0)) return;
            var VMV = matrix[player.i][player.j];
            VMV.mVN = frameId;
            VMV.wall = vV;
            VMV.rotate = (player.extra >> 5) & 3;
        };

        function bigwallsfusion(player) {
            var vV = player.extra >> 7;
            if (((items[vV].wall !== 1) || (player.hurt > 0)) || (player.broke > 0)) return;
            var VMV = matrix[player.i][player.j];
            VMV.mVN = frameId;
            VMV.wall = items[vV].idWall;
            if (World.PLAYER._j === player.j) {
                var dist = window.Math.max(1, window.Math.abs(World.PLAYER._i - player.i));
                if (World.PLAYER._i < player.i) NNmMN[0] = WwmVM / dist;
                else NNmMN[1] = WwmVM / dist;
            } else if (World.PLAYER._i === player.i) {
                var dist = window.Math.max(1, window.Math.abs(World.PLAYER._j - player.j));
                if (World.PLAYER._j < player.j) NNmMN[2] = WwmVM / dist;
                else NNmMN[3] = WwmVM / dist;
            }
        };

        function floorsfusion(player) {
            var vV = player.extra >> 7;
            if (((items[vV].wall !== 1) || (player.hurt > 0)) || (player.broke > 0)) return;
            var VMV = matrix[player.i][player.j];
            VMV.MMNVm = frameId;
        };

        function MmnMv(player, cycle) {
            var i = player.i;
            var j = player.j;
            var VMV = matrix[i][j];
            if (VMV.frameId === frameId) {
                if (VMV.i < 3) {
                    var M = VMV.b[VMV.i];
                    VMV.i += 1;
                    M.type = player.type;
                    M.cycle = cycle;
                }
            } else {
                VMV.frameId = frameId;
                var M = VMV.b[0];
                VMV.i = 1;
                M.type = player.type;
                M.cycle = cycle;
            }
        };

        function _Reset(wVNwM, MMnVM, VmNwV) {
            bodOnResize = window.document.getElementById("bod").onresize;
            if (World.gameMode === World.__BR__) {
                context2dZ.clearRect(0, 0, vWw, vWw);
                context2dD.clearRect(0, 0, vWw, vWw);
                MvvNN = 0;
            }
            WNmVW = 0;
            Render.explosionShake = 0;
            Render.shake = 0;
            if (wVNwM !== window.undefined) WMWvN = 0;
            else WMWvN = mMmvV;
            if (VmNwV !== window.undefined) vwMWM = VmNwV;
            else vwMWM = VmNmN;
            if (MMnVM !== window.undefined) WwmVM = MMnVM;
            else WwmVM = NMmmm;
            NmM = 0;
            WWV = 0;
            World.PLAYER.x = 0;
            World.PLAYER.y = 0;
            World.PLAYER._i = 0;
            World.PLAYER._j = 0;
            wnW.effect = 0;
            wnW.move = 0;
            wvV.effect = 0;
            wvV.move = 0;
            VwmMm.id = -1;
            VwmMm.uid = -1;
            var vW = localStorage2.getItem("particles");
            if (vW !== null) NwMVW = window.Number(vW);
            teamName = "";
            nNmVw = null;
            MapManager.width = 150;
            MapManager.height = 150;
            Render.__TRANSFORM__ = (MapManager.width * 100) / 255;
            NMv = MapManager.width;
            wWw = MapManager.height;
            WMwnW = __TILE_SIZE__ * NMv;
            mmVNm = __TILE_SIZE__ * wWw;
            nwMnv = 824 / WMwnW;
            vvVMV = 824 - mVmWm;
            VnvWV = vvVMV + WWn;
            NnWnv = WMwnW / 8;
            World.setSizeWorld(NMv, wWw);
            for (var i = 0; i < wWw; i++) {
                matrix[i] = [];
                for (var j = 0; j < NMv; j++) matrix[i][j] = new MmmnN;
            }
            var len = Entitie.units[0].length;
            for (i = 0; i < len; i++) WvnvV[i] = null;
        };


        function _buttonInv(wm, invtr, WX, WY, inventoryItemNumber, inventoryAmmoNumber) {
            wm.pos.x = WX;
            wm.pos.y = WY;
            wm.draw();
            var IID = items[invtr[0]];
            var amount = invtr[1];
            if (amount > 1) {
                if (inventoryItemNumber[amount] === window.undefined) {
                    inventoryItemNumber[amount] = {
                        W: GUI.renderText("x" + amount, "'Black Han Sans', sans-serif", "#ffffff", 30, 250, window.undefined, 15, 12, window.undefined, window.undefined, window.undefined, window.undefined, "#000000", 12)
                    };
                    inventoryItemNumber[amount].W.isLoaded = 1;
                }
                CanvasUtils.drawImageHd(inventoryItemNumber[amount], (WX / scaleby) + 53, (WY / scaleby) + 55, -0.5, 0, 0, 1);
            }
            if ((IID.bullet !== window.undefined) && (IID.mMVwm === window.undefined)) {
                var amount = invtr[3];
                if (inventoryAmmoNumber[amount] === window.undefined) {
                    inventoryAmmoNumber[amount] = {
                        W: GUI.renderText("x" + amount, "'Black Han Sans', sans-serif", "#FFFF00", 30, 250, window.undefined, 15, 12, window.undefined, window.undefined, window.undefined, window.undefined, "#000000", 12)
                    };
                    inventoryAmmoNumber[amount].W.isLoaded = 1;
                }
                CanvasUtils.drawImageHd(inventoryAmmoNumber[amount], (WX / scaleby) + 53, (WY / scaleby) + 55, -0.5, 0, 0, 1);
            }
            if (IID.perish !== window.undefined) {
                var VWNwv = window.Math.floor(invtr[3] / 12.8);
                var W = wwvmV[VWNwv];
                if (W.isLoaded !== 1) {
                    wwvmV[VWNwv] = CanvasUtils.loadImage(("img/rotten" + VWNwv) + ".png", W);
                } else ctx.drawImage(W, WX + (0.5 * scaleby), WY, (scaleby * W.width) / 2, (scaleby * W.height) / 2);
            }
        };

        function NMMwN(Wn, WX, WY) {
            if (wmvMm[Wn] === window.undefined) {
                wmvMm[Wn] = window.document.createElement("canvas");
                nmMMW[Wn] = wmvMm[Wn].getContext("2d");
                var mWwVV = wmvMm[Wn];
                var Nvmwn = nmMMW[Wn];
                mWwVV.width = 400;
                mWwVV.height = 148;
                Nvmwn.clearRect(0, 0, 400, 148);
                CanvasUtils.roundRect(Nvmwn, 0, 0, 400, 148, 10);
                Nvmwn.fillStyle = "#000000";
                Nvmwn.globalAlpha = 0.5;
                Nvmwn.fill();
                Nvmwn.globalAlpha = 1;
                itemstatsfunc(nmMMW[Wn], Wn);
            }
            var SX = scaleby * 74;
            ctx.drawImage(wmvMm[Wn], WX, WY, scaleby * 190, SX);
        };

        function _Inventory(inventoryItemNumber, inventoryAmmoNumber, MmV, bagbutt) {
            //if (World.PLAYER.ghoul !== 0) return;
            var inventory = Game.inventory;
            if (nNMVM.isLoaded !== 1) {
                nNMVM = CanvasUtils.loadImage(emptyinventoryicon, nNMVM);
                return;
            } 
            var invtr = World.PLAYER.inventory;
            var len = invtr.length;
            var SY = (nNMVM.width * scaleby) / 2;
            var SX = (nNMVM.height * scaleby) / 2;
            var _x = window.Math.max(300 * scaleby, (canw - (SY * len)) / 2);
            var _y = (canh - SX) - (5 * scaleby);
            var WX = _x;
            var WY = _y;
            var MVM = (5 * scaleby) + SY;
            if (len > 10) {
                bagbutt.pos.x = canw - (69 * scaleby);
                bagbutt.pos.y = canh - (68 * scaleby);
                bagbutt.draw();
                if (bagbutt.open === 0) len = 10;
            }
            for (var i = 0; i < len; i++) {
                var wm = inventory[i];
                if (invtr[i][0] === 0) {
                    wm.pos.x = WX;
                    wm.pos.y = WY;
                    ctx.drawImage(nNMVM, WX, WY, SY, SX);
                } else _buttonInv(wm, invtr[i], WX, WY, inventoryItemNumber, inventoryAmmoNumber);
                if (i === 9) {
                    WX = bagbutt.pos.x - (5 * scaleby);
                    WY = bagbutt.pos.y - MVM;
                } else if (i === 12) {
                    WX -= MVM;
                    WY = bagbutt.pos.y - MVM;
                } else if (i > 9) WY -= MVM;
                else WX += MVM;
            }
            var drag = World.PLAYER.drag;
            if (((drag.begin === 1) && (Mouse.state === Mouse.__MOUSE_DOWN__)) && (Math2d.dist(drag.x, drag.y, Mouse.x, Mouse.y) > (4 * scaleby))) {
                var IID = invtr[drag.id][0];
                if (IID > 0) {
                    var W = items[IID].img.W[0];
                    if (W.isLoaded === 0) W = INVENTORY2[IID].img.W[0];
                    ctx.globalAlpha = 0.7;
                    var SY = 68 * scaleby;
                    ctx.drawImage(W, (Mouse.x * scaleby) - (SY / 2), (Mouse.y * scaleby) - (SY / 2), SY, SY);
                    ctx.globalAlpha = 1;
                }
            } else if ((MmV !== -1) && (invtr[MmV][0] !== 0)) {
                if (MmV < 10) NMMwN(invtr[MmV][0], _x + (MVM * MmV), _y - (79 * scaleby));
                else if (MmV < 13) NMMwN(invtr[MmV][0], bagbutt.pos.x - (200 * scaleby), bagbutt.pos.y + (MVM * (-1 + ((10 - MmV) % 3))));
                else NMMwN(invtr[MmV][0], (bagbutt.pos.x - (200 * scaleby)) - MVM, bagbutt.pos.y + (MVM * (-1 + ((10 - MmV) % 3))));
            }
        };

        function _GaugesAfter(WX, WY) {
            var level = World.PLAYER.level;
            if (NmWnM[level] === window.undefined) {
                NmWnM[level] = {
                    W: GUI.renderText("" + level, "'Black Han Sans', sans-serif", "#ffffff", 44, 250, window.undefined, 18, 15, window.undefined, window.undefined, window.undefined, window.undefined, "#000000", 15)
                };
                NmWnM[level].W.isLoaded = 1;
            }
            CanvasUtils.drawImageHd(NmWnM[level], (WX / scaleby) + 234, (WY / scaleby) + 79, 0, 0, 0, 1);
            var rad = World.gauges.rad;
            var vW = 1 - (rad.current / rad._max);
            CanvasUtils.drawImageHd(wmmvv, 38 + (WX / scaleby), 37 + (WY / scaleby), window.Math.PI * vW, 0, 0, 1);
        };

        function _Gauges(WX, WY) {
            var life = World.gauges.life;
            var vW = life.current / life._max;
            CanvasUtils.fillRect(ctx, (WX / scaleby) + 14, (WY / scaleby) + 71, vW * 189, 16, lightgreen);
            var food = World.gauges.food;
            var vW = food.current / food._max;
            CanvasUtils.fillRect(ctx, (WX / scaleby) + 13, (WY / scaleby) + 162, 54, -vW * 63, orange);
            var cold = World.gauges.cold;
            var vW = cold.current / cold._max;
            CanvasUtils.fillRect(ctx, (WX / scaleby) + 81, (WY / scaleby) + 162, 54, -vW * 63, lightblue);
            var stamina = World.gauges.stamina;
            var vW = stamina.current / stamina._max;
            CanvasUtils.fillRect(ctx, (WX / scaleby) + 150, (WY / scaleby) + 162, 54, -vW * 63, yellow);
            var xp = World.gauges.xp;
            var vW = xp.current / xp._max;
            CanvasUtils.fillRect(ctx, (WX / scaleby) + 226, (WY / scaleby) + 172, 16, -vW * 77, white);
            var wVnVV = World.updateHour();
            var W;
            var wnvmV;
            if (wVnVV >= 10000000) {
                if (WmVNn.isLoaded !== 1) {
                    WmVNn = CanvasUtils.loadImage(nightclock, WmVNn);
                    return;
                }
                wVnVV -= 10000000;
                W = WmVNn;
                wnvmV = nMmvV;
            } else {
                if (nvvVW.isLoaded !== 1) {
                    nvvVW = CanvasUtils.loadImage(dayclock, nvvVW);
                    return;
                }
                W = nvvVW;
                wnvmV = VWmVV;
            }
            var SY = (scaleby * W.width) / 2;
            var SX = (scaleby * W.height) / 2;
            ctx.drawImage(W, WX + (100 * scaleby), WY + (14 * scaleby), SY, SX);
            CanvasUtils.drawImageHd(wnvmV, 144.5 + (WX / scaleby), (WY / scaleby) + 56, wVnVV * mWvNn, 0, 0, 1);
        };


        function _Leaderboard(WX, WY) {
            var leaderboard = World.leaderboard;
            var players = World.players;
            var nWnWm = -1;
            if (World.newLeaderboard === 1) {
                nWnWm = 1;
                World.newLeaderboard = 0;
                context2dF.clearRect(0, 0, Vwwmw, nvnwM);
                for (var i = 0;
                    (i < leaderboard.length) && (leaderboard[i] !== 0); i++) {
                    var PLAYER = players[leaderboard[i]];
                    if (World.PLAYER.id === leaderboard[i]) nWnWm = 0;
                    if (PLAYER.nickname === 0) break;
                    if (PLAYER.leaderboardLabel === null) {
                        if (PLAYER.id === World.PLAYER.id) PLAYER.leaderboardLabel = GUI.renderText(PLAYER.nickname, "'Viga', sans-serif", "#D6C823", 40, 350, window.undefined, 0, 12);
                        else PLAYER.leaderboardLabel = GUI.renderText(PLAYER.nickname, "'Viga', sans-serif", "#ffffff", 40, 350, window.undefined, 0, 12);
                    }
                    if (PLAYER.scoreLabel === null) {
                        if (PLAYER.id === World.PLAYER.id) PLAYER.scoreLabel = GUI.renderText(PLAYER.scoreSimplified, "'Viga', sans-serif", "#D6C823", 40, 150, window.undefined, 5, 12);
                        else PLAYER.scoreLabel = GUI.renderText(PLAYER.scoreSimplified, "'Viga', sans-serif", "#ffffff", 40, 150, window.undefined, 5, 12);
                    }
                    if ((PLAYER.leaderboardLabel.width !== 0) && (PLAYER.leaderboardLabel.height !== 0)) context2dF.drawImage(PLAYER.leaderboardLabel, 90, 114 + (i * 50), PLAYER.leaderboardLabel.width, PLAYER.leaderboardLabel.height);
                    context2dF.drawImage(PLAYER.scoreLabel, 484, 114 + (i * 50), PLAYER.scoreLabel.width, PLAYER.scoreLabel.height);
                    var W = KARMA[PLAYER.KARMA].W;
                    if (W.isLoaded === 1) context2dF.drawImage(W, 612, 114 + (i * 50), W.width, W.height);
                }
                World.PLAYER.inLeaderboard = nWnWm;
                if (nWnWm === 1) {
                    var W = KARMA[World.PLAYER.KARMA].W;
                    if (W.isLoaded === 1) context2dF.drawImage(W, 375, 645, W.width * 1.5, W.height * 1.5);
                }
            }
            var score = World.PLAYER.exp;
            if ((nWnWm === 1) || ((World.PLAYER.inLeaderboard === 1) && (score !== World.PLAYER.lastScore))) {
                var PLAYER = players[World.PLAYER.id];
                context2dF.clearRect(480, 657, 112, 60);
                if (score !== World.PLAYER.lastScore) {
                    World.PLAYER.lastScore = score;
                    PLAYER.scoreLabel = GUI.renderText(MathUtils.simplifyNumber(score), "'Viga', sans-serif", "#ffffff", 40, 150, window.undefined, 5, 12);
                }
                context2dF.drawImage(PLAYER.scoreLabel, 484, 662, PLAYER.scoreLabel.width, PLAYER.scoreLabel.height);
            }
            ctx.drawImage(canvasF, WX, WY, (Vwwmw / 3) * scaleby, (nvnwM / 3) * scaleby);
        };


        function _BigMinimap(vWvWN, closebutt) {        
            var SY = vWw * scaleby;
            var SX = wvNVM * scaleby;
            var WX = canw2 - (SY / 2);
            var WY = window.Math.max(canh2 - (SX / 2), 0);
            var wVw = WX / scaleby;
            var VVm = WY / scaleby;
            var mvMnV = vWw / WMwnW;
            var _buttonInv = wvNVM / mmVNm;
            closebutt.pos.x = window.Math.floor((WX + SY) + (0 * scaleby));
            closebutt.pos.y = window.Math.floor(WY + (0 * scaleby));
            vWvWN.draw();



            var cities = World.PLAYER.cities;
            var len = cities.length / 2;
            if (len > 0) {
                _y = window.Math.floor((WY / scaleby) + window.Math.min(window.Math.max(10, cities[0] * _buttonInv), 400));
                _x = window.Math.floor((WX / scaleby) + window.Math.min(window.Math.max(10, cities[1] * mvMnV), 400));
                CanvasUtils.drawImageHd(cityiconmap, _x, _y, 0, 0, 0, 1);
                for (var i = 1; i < len; i++) {
                    _y = window.Math.floor((WY / scaleby) + window.Math.min(window.Math.max(10, cities[i * 2] * _buttonInv), 400));
                    _x = window.Math.floor((WX / scaleby) + window.Math.min(window.Math.max(10, cities[1 + (i * 2)] * mvMnV), 400));
                    CanvasUtils.drawImageHd(houseiconmap, _x, _y, 0, 0, 0, 1);
                }
            }

            if (World.gameMode === World.__BR__) {
                var wwwmm = wVw + (vWw / 2);
                var vnvWw = VVm + (wvNVM / 2);
                CanvasUtils.drawImageHd(MWNMV, wwwmm, vnvWw, 0, 0, 0, 2);
                ctx.globalAlpha = (mWWwn > 600) ? MathUtils.Ease.inOutQuad((1200 - mWWwn) / 600) : MathUtils.Ease.inOutQuad(mWWwn / 600);
                CanvasUtils.drawImageHd(MMvWn, wwwmm, vnvWw, 0, 0, 0, 2);
                ctx.globalAlpha = 1;
            }
            
            closebutt.draw();

            if ((World.PLAYER.team !== -1) || (World.PLAYER.ghoul !== 0) && (World.playerAlive < 6)) {
                var players = Entitie.units[__ENTITIE_PLAYER__];
                for (var i = 0; i < World.PLAYER.teamLength; i++) {
                    var nmmvN = World.PLAYER.teamPos[i];
                    if (nmmvN.old < 0) continue;
                    var PLAYER = World.players[nmmvN.id];
                    var _x = window.Math.floor(wVw + window.Math.min(window.Math.max(10, PLAYER.rx * mvMnV), 400));
                    var _y = window.Math.floor(VVm + window.Math.min(window.Math.max(10, PLAYER.ry * mvMnV), 400));
                    var angle;
                    if (frameId === (PLAYER.frameId + 1)) angle = players[PLAYER.locatePlayer].angle;
                    else angle = PLAYER.x % WNVNM;
                    CanvasUtils.drawImageHd(arrowiconmap, _x, _y, angle, 0, 0, 1);
                }
            }

            var _x = window.Math.floor((WX / scaleby) + window.Math.min(window.Math.max(10, NmM * mvMnV), 400));
            var _y = window.Math.floor((WY / scaleby) + window.Math.min(window.Math.max(10, WWV * _buttonInv), 400));
            CanvasUtils.drawImageHd(arrowiconmap2, _x, _y, Mouse.angle, 0, 0, 1);

            if (World.PLAYER.badKarmaDelay > 0) {
                var PLAYER = World.players[World.PLAYER.badKarma];
                CanvasUtils.drawImageHd(KARMA[PLAYER.KARMA], window.Math.floor(wVw + window.Math.min(window.Math.max(10, PLAYER.rx * mvMnV), 400)), window.Math.floor(VVm + window.Math.min(window.Math.max(10, PLAYER.ry * mvMnV), 400)), 0, 0, 0, 1.25);
            }
            

        };



        function _AlertServer() {
            if (Home.alertDelay > 0) {
                if (Home.alertDelay > 2500) ctx.globalAlpha = MathUtils.Ease.inOutQuad((3000 - Home.alertDelay) / 500);
                else if (Home.alertDelay > 500) ctx.globalAlpha = 1;
                else ctx.globalAlpha = MathUtils.Ease.inOutQuad(Home.alertDelay / 500);
                if (Home.alertId === 0) CanvasUtils.drawImageHd(WWwmW, canw2ns, WWwmW.W.h2 / 2, 0, 0, 0, 1);
                else if (Home.alertId === 1) CanvasUtils.drawImageHd(VVvnW, canw2ns, VVvnW.W.h2 / 2, 0, 0, 0, 1);
                else if (Home.alertId === 2) CanvasUtils.drawImageHd(MnNnW, canw2ns, MnNnW.W.h2 / 2, 0, 0, 0, 1);
                else if (Home.alertId === 3) CanvasUtils.drawImageHd(nWvvv, canw2ns, nWvvv.W.h2 / 2, 0, 0, 0, 1);
                ctx.globalAlpha = 1;
                Home.alertDelay -= delta;
            }
        };

        function nmwmn(WX, WY) {
            if (teambox.isLoaded !== 1) {
                teambox = CanvasUtils.loadImage(invbox, teambox);
                return;
            }
            Game.nVNMM.pos.x = WX + (241 * scaleby);
            Game.nVNMM.pos.y = WY + (6 * scaleby);
            Game.nWvnm.pos.x = WX + (290 * scaleby);
            Game.nWvnm.pos.y = WY + (6 * scaleby);
            if ((World.PLAYER.teamJoin !== 0) || (World.PLAYER.teamEffect > 0)) {
                if (World.PLAYER.teamJoin !== 0) {
                    if (World.PLAYER.teamEffect < 333) {
                        ctx.globalAlpha = World.PLAYER.teamEffect / 333;
                        World.PLAYER.teamEffect += delta;
                    }
                } else {
                    ctx.globalAlpha = World.PLAYER.teamEffect / 333;
                    World.PLAYER.teamEffect = window.Math.max(0, World.PLAYER.teamEffect - delta);
                }
                var PLAYER = World.players[World.PLAYER.teamJoin];
                if (PLAYER.nicknameLabel === null) PLAYER.nicknameLabel = GUI.renderText(PLAYER.nickname, "'Viga', sans-serif", "#FFFFFF", 38, 400, window.undefined, 16, 25, window.undefined, window.undefined, window.undefined, window.undefined, "#000000", 12);
                ctx.drawImage(teambox, WX, WY, scaleby * teambox.wh, scaleby * teambox.h2);
                if ((PLAYER.nicknameLabel.width !== 0) && (PLAYER.nicknameLabel.height !== 0)) ctx.drawImage(PLAYER.nicknameLabel, WX + (20 * scaleby), WY + (6 * scaleby), PLAYER.nicknameLabel.wh * scaleby, PLAYER.nicknameLabel.h2 * scaleby);
                Game.nVNMM.draw();
                Game.nWvnm.draw();
                if (World.PLAYER.teamEffect < 333) ctx.globalAlpha = 1;
            }
        };

        function timeleftfunc(WX, WY, wNWnn) {
            World.PLAYER.nextAreas -= delta;
            var nnW = window.Math.max(0, window.Math.floor(World.PLAYER.nextAreas / 1000));
            if (nnW < 3000) {
                CanvasUtils.drawImageHd(timeleft, (WX / scaleby) + 51, (WY / scaleby) + 145, 0, 0, 0, 1);
                if (wVVVn[nnW] === window.undefined) {
                    if ((wNWnn === 1) && (wVVVn[nnW + 1] !== window.undefined)) wVVVn[nnW + 1] = window.undefined;
                    var wWvWM = window.Math.floor(nnW / 60);
                    var NNvMn = nnW % 60;
                    wVVVn[nnW] = {
                        W: GUI.renderText((((((wWvWM < 10) ? "0" : "") + wWvWM) + ":") + ((NNvMn < 10) ? "0" : "")) + NNvMn, "'Viga', sans-serif", "#FF0000", 38, 100, window.undefined, 16, 25, window.undefined, window.undefined, window.undefined, window.undefined, "#000000", 12)
                    };
                    wVVVn[nnW].W.isLoaded = 1;
                }
                CanvasUtils.drawImageHd(wVVVn[nnW], (WX / scaleby) + 60, (WY / scaleby) + 145, 0, 0, 0, 1);
            }
        };

        function vmnWW(WX, WY) {
            CanvasUtils.drawImageHd(WvWnV, ((WX / scaleby) + canwns) - 63, 25 + (WY / scaleby), 0, 0, 0, 1);
            if (playerAlive[World.playerAlive] === window.undefined) {
                playerAlive[World.playerAlive] = {
                    W: GUI.renderText("#" + World.playerAlive, "'Viga', sans-serif", "#FFFFFF", 60, 140)
                };
                playerAlive[World.playerAlive].W.isLoaded = 1;
            }
            CanvasUtils.drawImageHd(playerAlive[World.playerAlive], ((WX / scaleby) + canwns) - 50, 25 + (WY / scaleby), 0, 0, 0, 1);
        };

        function _Minimap(WX, WY) {
            nmwmn(WX + (250 * scaleby), WY);
            if (minimap.isLoaded !== 1) {
                minimap = CanvasUtils.loadImage(bordermapbig, minimap);
                return;
            }

            var mnmvW = nwMnv * NmM;
            var vNwWN = nwMnv * WWV;
            var sx = window.Math.min(window.Math.max(0, mnmvW - WWn), vvVMV);
            var sy = window.Math.min(window.Math.max(0, vNwWN - WWn), vvVMV);
            var SY = WWn * scaleby;
            ctx.drawImage(minimap, sx, sy, mVmWm, mVmWm, WX, WY, SY, SY);
            
            if (World.gameMode === World.__GHOUL__) {
                if (World.PLAYER.ghoul !== 0) vmnWW(-255, WY);
                else timeleftfunc(WX + 50, WY, 1);
            }


            if (World.gameMode === World.__BR__) {
                var wVvnN = World.PLAYER.toxicMap[window.Math.floor(WWV / NnWnv)][window.Math.floor(NmM / NnWnv)];
                if (((wVvnN !== 0) && (wVvnN < World.PLAYER.toxicStep)) && (World.PLAYER.toxicStep !== 8)) {
                    MvvNN = window.Math.min(1000, MvvNN + delta);
                    ctx.globalAlpha = MathUtils.Ease.inQuad(MvvNN / 500);
                    CanvasUtils.drawImageHd(WWmMW, canw2ns, 58, 0, 0, 0, 1);
                    ctx.globalAlpha = 1;
                } else if (MvvNN > 0) {
                    MvvNN = window.Math.max(0, MvvNN - delta);
                    ctx.globalAlpha = MathUtils.Ease.inQuad(MvvNN / 500);
                    CanvasUtils.drawImageHd(WWmMW, canw2ns, 58, 0, 0, 0, 1);
                    ctx.globalAlpha = 1;
                }
                ctx.drawImage(MWNMV.W, sx / 2, sy / 2, WWn, WWn, WX, WY, SY, SY);
                ctx.globalAlpha = (mWWwn > 600) ? MathUtils.Ease.inOutQuad((1200 - mWWwn) / 600) : MathUtils.Ease.inOutQuad(mWWwn / 600);
                mWWwn = (mWWwn + delta) % 1200;
                ctx.drawImage(MMvWn.W, sx / 2, sy / 2, WWn, WWn, WX, WY, SY, SY);
                ctx.globalAlpha = 1;
                vmnWW(0, WY);
                timeleftfunc(WX, WY, 0);
            } else if (World.PLAYER.ghoul === 0) {
                if (World.gauges.rad.vww === 1) {
                    WNmVW = window.Math.min(1000, WNmVW + delta);
                    ctx.globalAlpha = MathUtils.Ease.inQuad(WNmVW / 500);
                    CanvasUtils.drawImageHd(VmWNN, canw2ns, 58, 0, 0, 0, 1);
                    ctx.globalAlpha = 1;
                } else if (WNmVW > 0) {
                    WNmVW = window.Math.max(0, WNmVW - delta);
                    ctx.globalAlpha = MathUtils.Ease.inQuad(WNmVW / 500);
                    CanvasUtils.drawImageHd(VmWNN, canw2ns, 58, 0, 0, 0, 1);
                    ctx.globalAlpha = 1;
                }
            }



            if (sx >= vvVMV) mnmvW = window.Math.min(((mnmvW - VnvWV) / 2) + nWWwM, WWn - 8);
            else if (mnmvW < WWn) mnmvW = window.Math.max(15, mnmvW / 2);
            else mnmvW = nWWwM;
            if (sy >= vvVMV) vNwWN = window.Math.min(((vNwWN - VnvWV) / 2) + nWWwM, WWn - 8);
            else if (vNwWN < WWn) vNwWN = window.Math.max(15, vNwWN / 2);
            else vNwWN = nWWwM;
            var wVw = WX / scaleby;
            var VVm = WY / scaleby;



            if ((World.PLAYER.team !== -1) || ((World.PLAYER.ghoul !== 0) && (World.playerAlive < 6))) {
                var players = Entitie.units[__ENTITIE_PLAYER__];
                for (var i = 0; i < World.PLAYER.teamLength; i++) {
                    var nmmvN = World.PLAYER.teamPos[i];
                    if (nmmvN.old < 0) continue;
                    var PLAYER = World.players[nmmvN.id];
                    var angle;
                    if (frameId === (PLAYER.frameId + 1)) {
                        var WMv = players[PLAYER.locatePlayer];
                        if (Math2d.fastDist(PLAYER.rx, PLAYER.ry, WMv.x, WMv.y) < 1000) {
                            PLAYER.rx = WMv.x;
                            PLAYER.ry = WMv.y;
                        }
                        PLAYER.x = WMv.x;
                        PLAYER.y = WMv.y;
                        angle = WMv.angle;
                    } else var angle = PLAYER.x % WNVNM;
                    var _x = wVw + window.Math.max(15, window.Math.min(WWn - 15, (mnmvW - 3) + ((PLAYER.rx - NmM) * nwMnv)));
                    var _y = VVm + window.Math.max(15, window.Math.min(WWn - 15, (vNwWN - 3) + ((PLAYER.ry - WWV) * nwMnv)));
                    CanvasUtils.drawImageHd(arrowiconmap, _x, _y, angle, 0, 0, 1);
                }
            }


            if (World.PLAYER.badKarmaDelay > 0) {
                var PLAYER = World.players[World.PLAYER.badKarma];
                if (frameId === (PLAYER.frameId + 1)) {
                    var players = Entitie.units[__ENTITIE_PLAYER__];
                    var WMv = players[PLAYER.locatePlayer];
                    if (Math2d.fastDist(PLAYER.rx, PLAYER.ry, WMv.x, WMv.y) < 1000) {
                        PLAYER.rx = WMv.x;
                        PLAYER.ry = WMv.y;
                    }
                    PLAYER.x = WMv.x;
                    PLAYER.y = WMv.y;
                }
                CanvasUtils.drawImageHd(KARMA[PLAYER.KARMA], wVw + window.Math.max(15, window.Math.min(WWn - 15, (mnmvW - 3) + ((PLAYER.rx - NmM) * nwMnv))), VVm + window.Math.max(15, window.Math.min(WWn - 15, (vNwWN - 3) + ((PLAYER.ry - WWV) * nwMnv))), 0, 0, 0, 1.25);
            }

            var _x = wVw + (mnmvW - 3);
            var _y = VVm + (vNwWN - 3);
            CanvasUtils.drawImageHd(arrowiconmap2, _x, _y, Mouse.angle, 0, 0, 1);
            if ((World.PLAYER.ghoul === 0) && ((World.PLAYER.skillPoint > 0) || (wnW.effect > 0))) {
                var move = (wnW.move + delta) % 1000;
                wnW.move = move;
                if (wnW.move < 500) WX += 260 + (15 * MathUtils.Ease.inOutQuad(move / 500));
                else WX += 260 + (15 * MathUtils.Ease.inOutQuad((1000 - move) / 500));
                ctx.globalAlpha = MathUtils.Ease.inQuad(wnW.effect);
                CanvasUtils.drawImageHd(wnW, WX, WY + 31, 0, 0, 0, 1);
                ctx.globalAlpha = 1;
                if ((World.PLAYER.skillPoint <= 0) || (Game.MvN() === 1)) wnW.effect = window.Math.max(0, wnW.effect - (delta / 500));
                else if (wnW.effect < 1) wnW.effect = window.Math.min(1, wnW.effect + (delta / 500));
            }
        };

        
        var teamName = "";
        var nNmVw = null;

        function _Team(closebutt, VWwmm, mMnVm, wwVMn, NnvmN, mvNMv, WvvvV, deleteTeam) {
            var WX = 0;
            var WY = 0;
            if (World.PLAYER.team === -1) {
                var teamNameValid = 1;
                if (Game.teamName.length === 0) teamNameValid = 0;
                else {
                    for (var i = 0; i < World.teams.length; i++) {
                        if (World.teams[i].name === Game.teamName) {
                            teamNameValid = 0;
                            break;
                        }
                    }
                }
                World.PLAYER.teamNameValid = teamNameValid;
                WX = VWwmm.pos.x;
                WY = VWwmm.pos.y;
                VWwmm.draw();
                closebutt.pos.x = WX + (513 * scaleby);
                closebutt.pos.y = WY + (2 * scaleby);
                if (teamName !== Game.teamName) {
                    teamName = Game.teamName;
                    nNmVw = GUI.renderText(teamName, "'Viga', sans-serif", "#FFFFFF", 30, 400);
                }
                if ((nNmVw !== null) && (teamName.length !== 0)) {
                    CanvasUtils.fillRect(ctx, (WX / scaleby) + 39, (WY / scaleby) + 14, 122, 16.5, "#000000");
                    ctx.drawImage(nNmVw, WX + (35 * scaleby), WY + (14.5 * scaleby), nNmVw.wh * scaleby, nNmVw.h2 * scaleby);
                }
                NnvmN.pos.x = WX + (172 * scaleby);
                NnvmN.pos.y = WY + (6 * scaleby);
                if ((teamNameValid === 0) || ((window.Date.now() - World.PLAYER.teamCreateDelay) < 30500)) {
                    NnvmN.setState(GUI.__BUTTON_OUT__);
                    ctx.globalAlpha = 0.5;
                    NnvmN.draw();
                    ctx.globalAlpha = 1;
                } else NnvmN.draw();
                var j = 0;
                for (var i = 0; i < 18; i++) {
                    var team = World.teams[i];
                    if (team.leader === 0) continue;
                    if (team.label === null) team.label = GUI.renderText(team.name, "'Viga', sans-serif", "#FFFFFF", 30, 400);
                    ctx.drawImage(team.label, WX + ((20 + ((j % 3) * 163)) * scaleby), WY + ((58.5 + (window.Math.floor(j / 3) * 36)) * scaleby), team.label.wh * scaleby, team.label.h2 * scaleby);
                    var wm = Game.join[j];
                    wm.pos.x = WX + ((84 + ((j % 3) * 163)) * scaleby);
                    wm.pos.y = WY + ((48 + (window.Math.floor(j / 3) * 36)) * scaleby);
                    if ((window.Date.now() - World.PLAYER.teamDelay) < 10500) {
                        wm.setState(GUI.__BUTTON_OUT__);
                        ctx.globalAlpha = 0.5;
                        wm.draw();
                        ctx.globalAlpha = 1;
                    } else wm.draw();
                    j++;
                }
            } else {
                WX = mMnVm.pos.x;
                WY = mMnVm.pos.y;
                var team = World.teams[World.PLAYER.team];
                if (team.label === null) team.label = GUI.renderText(team.name, "'Viga', sans-serif", "#FFFFFF", 30, 400);
                ctx.drawImage(team.label, WX + (144 * scaleby), WY + (13 * scaleby), team.label.wh * scaleby, team.label.h2 * scaleby);
                mMnVm.draw();
                closebutt.pos.x = WX + (512 * scaleby);
                closebutt.pos.y = WY + (34.5 * scaleby);
                if (World.PLAYER.teamLeader === 1) {
                    if (World.PLAYER.teamLocked === 0) {
                        mvNMv.pos.x = WX + (259 * scaleby);
                        mvNMv.pos.y = WY + (5 * scaleby);
                        mvNMv.draw();
                    } else {
                        WvvvV.pos.x = WX + (259 * scaleby);
                        WvvvV.pos.y = WY + (5 * scaleby);
                        WvvvV.draw();
                    }
                    deleteTeam.pos.x = WX + (311.5 * scaleby);
                    deleteTeam.pos.y = WY + (5 * scaleby);
                    deleteTeam.draw();
                    var j = 0;
                    for (var i = 0; i < World.players.length; i++) {
                        var PLAYER = World.players[i];
                        if ((team.uid !== PLAYER.teamUid) || (PLAYER.team !== team.id)) continue;
                        if (PLAYER.nicknameLabel === null) PLAYER.nicknameLabel = GUI.renderText(PLAYER.nickname, "'Viga', sans-serif", "#FFFFFF", 38, 400, window.undefined, 16, 25, window.undefined, window.undefined, window.undefined, window.undefined, "#000000", 12);
                        if ((PLAYER.nicknameLabel.width !== 0) && (PLAYER.nicknameLabel.height !== 0)) ctx.drawImage(PLAYER.nicknameLabel, WX + ((26 + ((j % 3) * 166.5)) * scaleby), WY + ((53 + (window.Math.floor(j / 3) * 29.5)) * scaleby), (PLAYER.nicknameLabel.wh * scaleby) / 2.2, (PLAYER.nicknameLabel.h2 * scaleby) / 2.2);
                        var wm = Game.kick[j];
                        wm.pos.x = WX + ((132 + ((j % 3) * 166.5)) * scaleby);
                        wm.pos.y = WY + ((48.5 + (window.Math.floor(j / 3) * 29.5)) * scaleby);
                        if (((window.Date.now() - World.PLAYER.teamDelay) < 10500) || (PLAYER.id === World.PLAYER.id)) {
                            wm.setState(GUI.__BUTTON_OUT__);
                            ctx.globalAlpha = 0.5;
                            wm.draw();
                            ctx.globalAlpha = 1;
                        } else wm.draw();
                        j++;
                    }
                } else {
                    wwVMn.pos.x = WX + (311.5 * scaleby);
                    wwVMn.pos.y = WY + (5 * scaleby);
                    wwVMn.draw();
                    var j = 0;
                    for (var i = 0; i < World.players.length; i++) {
                        var PLAYER = World.players[i];
                        if ((team.uid !== PLAYER.teamUid) || (PLAYER.team !== team.id)) continue;
                        if (PLAYER.nicknameLabel === null) PLAYER.nicknameLabel = GUI.renderText(PLAYER.nickname, "'Viga', sans-serif", "#FFFFFF", 38, 400, window.undefined, 16, 25, window.undefined, window.undefined, window.undefined, window.undefined, "#000000", 12);
                        if ((PLAYER.nicknameLabel.width !== 0) && (PLAYER.nicknameLabel.height !== 0)) ctx.drawImage(PLAYER.nicknameLabel, WX + ((26 + ((j % 3) * 166.5)) * scaleby), WY + ((53 + (window.Math.floor(j / 3) * 29.5)) * scaleby), (PLAYER.nicknameLabel.wh * scaleby) / 2.2, (PLAYER.nicknameLabel.h2 * scaleby) / 2.2);
                        j++;
                    }
                }
            }
            closebutt.draw();
        };

        function _Chest(chestbox, closebutt, inventoryItemNumber, inventoryAmmoNumber) {
            chestbox.draw();
            var WX = chestbox.pos.x;
            var WY = chestbox.pos.y;

            closebutt.pos.x = WX + (161 * scaleby);
            closebutt.pos.y = WY + (0 * scaleby);
            closebutt.draw();

            var chest = World.PLAYER.chest;
            var _x;
            var _y = WY + (14 * scaleby);
            var wm = Game.chest;

            for (var i = 0; i < 4; i++) {
                if ((i % 2) === 0) {
                    _x = WX + (12.5 * scaleby);
                    if (i === 2) _y += 71 * scaleby;
                } else _x += 72 * scaleby;
                if (chest[i][0] === 0) continue;
                _buttonInv(wm[i], chest[i], _x, _y, inventoryItemNumber, inventoryAmmoNumber);
            }
        };

        function vMwNm() {
            var mmMnV = vertst;
            if (mmMnV > 0) CanvasUtils.fillRect(ctx, 0, 0, mmMnV, canhns, GROUND);
            else mmMnV = 0;
            var wvnWn = horist;
            if (wvnWn > 0) CanvasUtils.fillRect(ctx, mmMnV, 0, canwns - mmMnV, wvnWn, GROUND);
            else wvnWn = 0;
            var Mwwnn = (-vertst + canwns) - WMwnW;
            if (Mwwnn > 0) CanvasUtils.fillRect(ctx, canwns - Mwwnn, wvnWn, Mwwnn, canhns - wvnWn, GROUND);
            else Mwwnn = 0;
            var nNnMV = (-horist + canhns) - mmVNm;
            if (nNnMV > 0) CanvasUtils.fillRect(ctx, mmMnV, canhns - nNnMV, (canwns - mmMnV) - Mwwnn, nNnMV, GROUND);
        };

        function itemstatsfunc(wmvMm, Wn) {
            var WvW = items[Wn];
            var NW = WvW.detail;
            var _name = GUI.renderText(NW.name, "'Viga', sans-serif", "#D3BB43", 30, 400);
            wmvMm.drawImage(_name, 20, 20);
            _name = GUI.renderText(NW.description, "'Viga', sans-serif", "#FFFFFF", 16, 400);
            wmvMm.drawImage(_name, 20, 68);
            if (WvW.idWeapon === 21) {
                if (WvW.damageBuilding > 0) {
                    _name = GUI.renderText((("Damage: " + WvW.damage) + "/") + WvW.damageBuilding, "'Viga', sans-serif", "#D3BB43", 24, 400);
                    wmvMm.drawImage(_name, 20, 101);
                } else {
                    _name = GUI.renderText("Life: " + WvW.life, "'Viga', sans-serif", "#D3BB43", 24, 400);
                    wmvMm.drawImage(_name, 20, 101);
                }
            } else if ((WvW.idWeapon !== window.undefined) && (WvW.idWeapon !== 0)) {
                var NvV = "";
                var weapon = ENTITIES[__ENTITIE_PLAYER__].weapons[WvW.idWeapon];
                if (weapon.damage !== window.undefined) {
                    NvV = "Damage: " + ((weapon.damageCac === window.undefined) ? weapon.damage : weapon.damageCac);
                } else {
                    if (weapon.food !== 0) NvV += ("Food: " + weapon.food) + " ";
                    if (weapon.heal < 0) NvV += ("Damage: " + weapon.heal) + " ";
                    else if (weapon.heal > 0) NvV += ("Heal: " + weapon.heal) + " ";
                    if (weapon.energy !== 0) NvV += "Energy: " + weapon.energy;
                }
                _name = GUI.renderText(NvV, "'Viga', sans-serif", "#D3BB43", 24, 400);
                wmvMm.drawImage(_name, 20, 101);
            } else if (WvW.idClothe !== window.undefined) {} else {
                _name = GUI.renderText("Cannot be equipped", "'Viga', sans-serif", "#FFFFFF", 17, 400);
                wmvMm.drawImage(_name, 20, 108);
            }
        };

        function _Craft(craftbox, closebutt, wnV, NwnNV, VvvwN, nvmnM, craftList, preview, inventoryItemNumber, inventoryAmmoNumber, VWNWV, WmWwW, WwMvM, NWmNn) {
            craftbox.draw();
            var WX = craftbox.pos.x;
            var WY = craftbox.pos.y;
            var wVw = WX / scaleby;
            var VVm = WY / scaleby;
            closebutt.pos.x = WX + (594 * scaleby);
            closebutt.pos.y = WY + (0 * scaleby);
            closebutt.draw();
            var craftAvailable = World.PLAYER.craftAvailable;
            var recipeAvailable = World.PLAYER.recipeAvailable;
            var category = World.PLAYER.craftCategory;
            var area = World.PLAYER.craftArea;
            for (var i = 0; i < wnV.length; i++) {
                var wm = wnV[i];
                if (i === category) wm.setState(GUI.__BUTTON_CLICK__);
                wm.pos.x = ((10 * scaleby) + WX) + ((i * 47) * scaleby);
                wm.pos.y = WY - (40 * scaleby);
                wm.draw();
            }
            var j = 0;
            for (i = 0; i < craftList.length; i++) {
                if ((i === area) && (World.PLAYER.isInBuilding === 1)) {} else if ((i !== World.PLAYER.buildingArea) && (i !== 0)) continue;
                var wm = craftList[i];
                if (i === area) wm.setState(GUI.__BUTTON_CLICK__);
                wm.pos.x = WX - (40 * scaleby);
                wm.pos.y = ((10 * scaleby) + WY) + ((j * 43) * scaleby);
                wm.draw();
                j++;
            }
            preview.pos.x = WX + (364 * scaleby);
            preview.pos.y = WY + (27 * scaleby);
            preview.draw();
            var craft = Game.craft;
            var len = World.PLAYER.craftLen;
            var SY = 49 * scaleby;
            var SX = 49 * scaleby;
            var MVM = 58 * scaleby;
            var mnMmm = 30 * scaleby;
            var NWNmV = 34 * scaleby;
            var breath = 1;
            if (VnwNw < 500) {
                breath += 0.08 * MathUtils.Ease.inQuad(VnwNw / 500);
                VnwNw += delta;
            } else {
                breath += 0.08 * MathUtils.Ease.outQuad(1 - ((VnwNw - 500) / 500));
                VnwNw += delta;
                if (VnwNw > 1000) VnwNw = 0;
            }
            breath = window.Math.max(1, window.Math.min(1.08, breath));
            for (i = 0; i < len; i++) {
                var wm = craft[i];
                wm.pos.x = (mnMmm + WX) + ((i % 5) * MVM);
                wm.pos.y = (NWNmV + WY) + (window.Math.floor(i / 5) * MVM);
                var MvmWv = craftAvailable[i];
                if (MvmWv === 0) {
                    ctx.globalAlpha = 0.45;
                    wm.draw();
                    ctx.globalAlpha = 1;
                } else if (MvmWv === 2) {
                    wm.setState(GUI.__BUTTON_IN__);
                    wm.draw();
                } else {
                    ctx.globalAlpha = 0.6;
                    CanvasUtils.drawImageHd(vvNWN, (wm.pos.x / scaleby) + 24.5, (wm.pos.y / scaleby) + 24.5, 0, 0, 0, breath);
                    ctx.globalAlpha = 1;
                    wm.draw();
                }
            }
            var Nnv = 0;
            if (World.PLAYER.craftCategory === -1) {
                if (World.PLAYER.isInBuilding === 1) {
                    NwnNV.pos.x = WX + (454 * scaleby);
                    NwnNV.pos.y = WY + (153 * scaleby);
                    if (((World.PLAYER.craftAvailable[World.PLAYER.craftIdSelected] === 1) && (World.PLAYER.building.len < 4)) && (World.PLAYER.building.fuel !== 0)) NwnNV.draw();
                    else {
                        ctx.globalAlpha = 0.5;
                        NwnNV.setState(GUI.__BUTTON_OUT__);
                        NwnNV.draw();
                        ctx.globalAlpha = 1;
                    }
                } else if (World.PLAYER.crafting === 0) {
                    NwnNV.pos.x = WX + (454 * scaleby);
                    NwnNV.pos.y = WY + (153 * scaleby);
                    if (World.PLAYER.craftAvailable[World.PLAYER.craftIdSelected] === 1) NwnNV.draw();
                    else {
                        ctx.globalAlpha = 0.5;
                        NwnNV.setState(GUI.__BUTTON_OUT__);
                        NwnNV.draw();
                        ctx.globalAlpha = 1;
                    }
                } else {
                    VvvwN.pos.x = WX + (454 * scaleby);
                    VvvwN.pos.y = WY + (153 * scaleby);
                    VvvwN.draw();
                }
                if (craftGauge.isLoaded !== 1) {
                    craftGauge = CanvasUtils.loadImage(craftgauge, craftGauge);
                    return;
                }

                if (World.PLAYER.isInBuilding === 1) {
                    if ((World.PLAYER.building.time !== 0) && (World.PLAYER.building.fuel !== 0)) {
                        Nnv = World.PLAYER.building.time - window.Date.now();
                        if (Nnv < 0) World.PLAYER.building.time = 0;
                        Nnv = MathUtils.Ease.inOutQuad(1 - (Nnv / World.PLAYER.building.timeMax));
                    }
                } else if (World.PLAYER.crafting !== 0) {
                    Nnv = World.PLAYER.crafting - window.Date.now();
                    if (Nnv < 0) World.PLAYER.crafting = 0;
                    Nnv = MathUtils.Ease.inOutQuad(1 - (Nnv / World.PLAYER.craftingMax));
                }

                Nnv = window.Math.min(1, window.Math.max(0, Nnv));
                SY = (scaleby * craftGauge.width) / 2;
                SX = (scaleby * craftGauge.height) / 2;
                var posx = WX + (356 * scaleby);
                var posy = WY + (206 * scaleby);
                ctx.fillStyle = "#A29742";
                MVM = 3 * scaleby;
                mnMmm = 2 * MVM;
                ctx.fillRect(window.Math.floor(posx + MVM), window.Math.floor(posy + MVM), window.Math.floor((SY - mnMmm) * Nnv), window.Math.floor(SX - mnMmm));
                ctx.drawImage(craftGauge, posx, posy, SY, SX);
                
            } else {
                var nwVvN = World.PLAYER.craftAvailable[World.PLAYER.craftIdSelected];
                nvmnM.pos.x = WX + (454 * scaleby);
                nvmnM.pos.y = WY + (153 * scaleby);
                if (nwVvN === 1) nvmnM.draw();
                else if (nwVvN === 0) {
                    ctx.globalAlpha = 0.5;
                    nvmnM.setState(GUI.__BUTTON_OUT__);
                    nvmnM.draw();
                    ctx.globalAlpha = 1;
                    if (World.PLAYER.craftSelected !== MMNWW) {
                        context2J.clearRect(0, 0, 420, 148);
                        MMNWW = World.PLAYER.craftSelected;
                        var NW = items[MMNWW].detail;
                        var MwNwV = 20;
                        if (NW.level > World.PLAYER.level) {
                            var Nvm = GUI.renderText(("Require level " + NW.level) + " or higher", "'Viga', sans-serif", "#D8BA3D", 30, 600);
                            context2J.drawImage(Nvm, 20, MwNwV);
                            MwNwV += 50;
                        }
                        if ((NW.previous !== -1) && (World.PLAYER.skillUnlocked[NW.previous] === window.undefined)) {
                            var Nvm = GUI.renderText(("Unlock " + items[NW.previous].detail.name) + " before", "'Viga', sans-serif", "#D8BA3D", 30, 600);
                            context2J.drawImage(Nvm, 20, MwNwV);
                            MwNwV += 50;
                        }
                        if (World.PLAYER.skillPoint < NW.price) {
                            var Nvm = GUI.renderText((("Cost " + NW.price) + " skill point") + ((NW.price !== 1) ? "s" : ""), "'Viga', sans-serif", "#D8BA3D", 30, 600);
                            context2J.drawImage(Nvm, 20, MwNwV);
                        }
                    }
                    ctx.drawImage(canvasJ, WX + (356 * scaleby), WY + (211 * scaleby), (scaleby * canvasJ.width) / 2, (scaleby * canvasJ.height) / 2);
                } else {
                    nvmnM.setState(GUI.__BUTTON_CLICK__);
                    nvmnM.draw();
                }
            }
            if (World.PLAYER.isInBuilding === 1) {
                var amount = World.PLAYER.building.fuel;
                if (amount >= 0) {
                    var wm;
                    if (((area === AREAS.smelter) || (area === AREAS.extractor)) || (area === AREAS.agitator)) wm = WmWwW;
                    else if (area === AREAS.teslabench) wm = WwMvM;
                    else wm = VWNWV;
                    wm.pos.x = WX + (532 * scaleby);
                    wm.pos.y = WY + (153 * scaleby);
                    if (World.PLAYER.building.fuel !== 255) wm.draw();
                    else {
                        ctx.globalAlpha = 0.5;
                        wm.setState(GUI.__BUTTON_OUT__);
                        wm.draw();
                        ctx.globalAlpha = 1;
                    }
                    if (inventoryAmmoNumber[amount] === window.undefined) {
                        inventoryAmmoNumber[amount] = {
                            W: GUI.renderText("x" + amount, "'Black Han Sans', sans-serif", "#FFFF00", 30, 250, window.undefined, 15, 12, window.undefined, window.undefined, window.undefined, window.undefined, "#000000", 12)
                        };
                        inventoryAmmoNumber[amount].W.isLoaded = 1;
                    }
                    CanvasUtils.drawImageHd(inventoryAmmoNumber[amount], (wm.pos.x / scaleby) + 42, (wm.pos.y / scaleby) + 42, -0.5, 0, 0, 0.9);
                }
                var queue = Game.queue;
                var WMnmM = World.PLAYER.building.pos;
                len = World.PLAYER.building.len;
                SY = 40 * scaleby;
                SX = 40 * scaleby;
                MVM = 62 * scaleby;
                mnMmm = 356 * scaleby;
                NWNmV = 237 * scaleby;
                for (var i = 0; i < len; i++) {
                    var wm = queue[i];
                    if (i === WMnmM) {
                        if (Nnv !== 0) {
                            ctx.globalAlpha = 0.6;
                            CanvasUtils.drawImageHd(vvNWN, (wm.pos.x / scaleby) + 20, (wm.pos.y / scaleby) + 20, 0, 0, 0, 0.85 * window.Math.max(0.01, window.Math.min(1, Nnv)));
                            ctx.globalAlpha = 1;
                        }
                    } else if (i < WMnmM) {
                        ctx.globalAlpha = 0.6;
                        CanvasUtils.drawImageHd(vvNWN, (wm.pos.x / scaleby) + 20, (wm.pos.y / scaleby) + 20, 0, 0, 0, breath * 0.85);
                        ctx.globalAlpha = 1;
                    }
                    wm.pos.x = (mnMmm + WX) + (i * MVM);
                    wm.pos.y = NWNmV + WY;
                    wm.draw();
                }
            }
            var tools = Game.tools;
            len = World.PLAYER.toolsLen;
            MVM = 45 * scaleby;
            mnMmm = 356 * scaleby;
            NWNmV = 151 * scaleby;
            for (var i = 0; i < len; i++) {
                var wm = tools[i];
                wm.pos.x = (mnMmm + WX) + (i * MVM);
                wm.pos.y = NWNmV + WY;
                wm.draw();
            }
            if (World.PLAYER.skillPoint !== wmmVm) {
                context2H.clearRect(0, 0, 280, 50);
                wmmVm = World.PLAYER.skillPoint;
                var Nvm = GUI.renderText("SKILL POINT: " + wmmVm, "'Viga', sans-serif", "#FFFFFF", 32, 400);
                context2H.drawImage(Nvm, 24, 12);
            }
            ctx.drawImage(skillPoint, WX + (455 * scaleby), WY + (378 * scaleby), (scaleby * skillPoint.width) / 2, (scaleby * skillPoint.height) / 2);
            if (World.PLAYER.craftSelected !== mwwNm) {
                context2dG.clearRect(0, 0, 280, 148);
                mwwNm = World.PLAYER.craftSelected;
                itemstatsfunc(context2dG, mwwNm);
            }
            ctx.drawImage(canvasG, WX + (439 * scaleby), WY + (24 * scaleby), (scaleby * canvasG.width) / 2, (scaleby * canvasG.height) / 2);
            if ((World.PLAYER.skillPoint > 0) || (wvV.effect > 0)) {
                var move = (wvV.move + delta) % 1000;
                wvV.move = move;
                var _y = WY / scaleby;
                if (wvV.move < 500) _y += -62 - (15 * MathUtils.Ease.inOutQuad(move / 500));
                else _y += -62 - (15 * MathUtils.Ease.inOutQuad((1000 - move) / 500));
                ctx.globalAlpha = MathUtils.Ease.inQuad(wvV.effect);
                CanvasUtils.drawImageHd(wvV, 266 + (craftbox.pos.x / scaleby), _y, 0, 0, 0, 1);
                ctx.globalAlpha = 1;
                if (World.PLAYER.skillPoint <= 0) wvV.effect = window.Math.max(0, wvV.effect - (delta / 500));
                else if (wvV.effect < 1) wvV.effect = window.Math.min(1, wvV.effect + (delta / 500));
            }
            var recipe = Game.recipe;
            len = World.PLAYER.recipeLen;
            SY = 40 * scaleby;
            SX = 40 * scaleby;
            MVM = 45 * scaleby;
            mnMmm = 356 * scaleby;
            NWNmV = 107 * scaleby;
            for (var i = 0; i < len; i++) {
                var wm = recipe[i];
                wm.pos.x = (mnMmm + WX) + (i * MVM);
                wm.pos.y = NWNmV + WY;
                var amount = window.Math.abs(recipeAvailable[i]);
                if (inventoryItemNumber[amount] === window.undefined) {
                    inventoryItemNumber[amount] = {
                        W: GUI.renderText("x" + amount, "'Black Han Sans', sans-serif", "#ffffff", 30, 250, window.undefined, 15, 12, window.undefined, window.undefined, window.undefined, window.undefined, "#000000", 12)
                    };
                    inventoryItemNumber[amount].W.isLoaded = 1;
                }
                if (recipeAvailable[i] < 0) {
                    ctx.globalAlpha = 0.45;
                    wm.draw();
                    CanvasUtils.drawImageHd(inventoryItemNumber[amount], (wm.pos.x / scaleby) + 30, (wm.pos.y / scaleby) + 32, -0.5, 0, 0, 0.9);
                    ctx.globalAlpha = 1;
                } else {
                    wm.draw();
                    CanvasUtils.drawImageHd(inventoryItemNumber[amount], (wm.pos.x / scaleby) + 30, (wm.pos.y / scaleby) + 32, -0.5, 0, 0, 0.9);
                }
                if ((NWmNn === i) && (World.PLAYER.recipeList[i] > 0)) NMMwN(World.PLAYER.recipeList[i], wm.pos.x, wm.pos.y + (45 * scaleby));
            }
        };

        function _Config(WWmVM, nmvnW, wMMmv, NNWVW, nMmMw, vNVNN, wvmWv, WmWnm, VNNMW, NVVwW, closebutt, WVVMw, vnNWN, MnvNV) {
            WWmVM.draw();
            var WX = WWmVM.pos.x;
            var WY = WWmVM.pos.y;
            closebutt.pos.x = WX + (265 * scaleby);
            closebutt.pos.y = WY + (0 * scaleby);
            closebutt.draw();
            nMmMw.pos.x = WX + (87 * scaleby);
            nMmMw.pos.y = WY + (15 * scaleby);
            if (Keyboard.isAzerty() === 1) nMmMw.setState(GUI.__BUTTON_CLICK__);
            nMmMw.draw();
            vNVNN.pos.x = WX + (173 * scaleby);
            vNVNN.pos.y = WY + (15 * scaleby);
            if (Keyboard.isQwerty() === 1) vNVNN.setState(GUI.__BUTTON_CLICK__);
            vNVNN.draw();
            NNWVW.pos.x = WX + (87 * scaleby);
            NNWVW.pos.y = WY + (62 * scaleby);
            if (CanvasUtils.options.forceResolution === 3) NNWVW.setState(GUI.__BUTTON_CLICK__);
            NNWVW.draw();
            wMMmv.pos.x = WX + (147 * scaleby);
            wMMmv.pos.y = WY + (62 * scaleby);
            if (CanvasUtils.options.forceResolution === 2) wMMmv.setState(GUI.__BUTTON_CLICK__);
            wMMmv.draw();
            nmvnW.pos.x = WX + (207 * scaleby);
            nmvnW.pos.y = WY + (62 * scaleby);
            if (CanvasUtils.options.forceResolution === 1) nmvnW.setState(GUI.__BUTTON_CLICK__);
            nmvnW.draw();
            wvmWv.pos.x = WX + (87 * scaleby);
            wvmWv.pos.y = WY + (117 * scaleby);
            if (AudioUtils.options.nNmMV === 1) wvmWv.setState(GUI.__BUTTON_CLICK__);
            wvmWv.draw();
            WmWnm.pos.x = WX + (147 * scaleby);
            WmWnm.pos.y = WY + (117 * scaleby);
            if (AudioUtils.options.nNmMV === 0) WmWnm.setState(GUI.__BUTTON_CLICK__);
            WmWnm.draw();
            VNNMW.pos.x = WX + (87 * scaleby);
            VNNMW.pos.y = WY + (167 * scaleby);
            if (AudioUtils.options.VWVWW === 1) VNNMW.setState(GUI.__BUTTON_CLICK__);
            VNNMW.draw();
            NVVwW.pos.x = WX + (147 * scaleby);
            NVVwW.pos.y = WY + (167 * scaleby);
            if (AudioUtils.options.VWVWW === 0) NVVwW.setState(GUI.__BUTTON_CLICK__);
            NVVwW.draw();
            MnvNV.pos.x = WX + (87 * scaleby);
            MnvNV.pos.y = WY + (217 * scaleby);
            if (NwMVW === 0) MnvNV.setState(GUI.__BUTTON_CLICK__);
            MnvNV.draw();
            vnNWN.pos.x = WX + (147 * scaleby);
            vnNWN.pos.y = WY + (217 * scaleby);
            if (NwMVW === 1) vnNWN.setState(GUI.__BUTTON_CLICK__);
            vnNWN.draw();
            WVVMw.pos.x = WX + (207 * scaleby);
            WVVMw.pos.y = WY + (217 * scaleby);
            if (NwMVW === 2) WVVMw.setState(GUI.__BUTTON_CLICK__);
            WVVMw.draw();
        };

        function VvVNw(player) {
            var PLAYER = World.players[player.pid];
            if (PLAYER.text.length > 0) {
                for (var i = 0;
                    (i < PLAYER.text.length) && (i < 2); i++) {
                    if (!PLAYER.label[i]) {
                        PLAYER.label[i] = GUI.renderText(PLAYER.text[i], "'Viga', sans-serif", "#ffffff", 32, 1000, "#000000", 33, 19, window.undefined, window.undefined, 0.55, 5);
                        PLAYER.textEffect[i] = 0;
                        PLAYER.textMove[i] = 0;
                    }
                    if (i === 1) PLAYER.textMove[0] = MathUtils.Ease.inOutQuad(PLAYER.textEase) * 28;
                }
                wwmww = delta / 1000;
                PLAYER.textEffect[0] += wwmww;
                if (PLAYER.text.length > 1) {
                    PLAYER.textEase = window.Math.min(PLAYER.textEase + wwmww, 1);
                    if ((PLAYER.textEffect[0] > 1) && (PLAYER.textEase > 0.5)) PLAYER.textEffect[1] += wwmww;
                }
                for (var i = 0;
                    (i < PLAYER.text.length) && (i < 2); i++) {
                    var effect = PLAYER.textEffect[i];
                    if (effect > 0) {
                        if (effect < 0.25) ctx.globalAlpha = effect * 4;
                        else if (effect > 4.75) ctx.globalAlpha = window.Math.max((5 - effect) * 5, 0);
                        else ctx.globalAlpha = 1;
                        var WY = 118;
                        var W = PLAYER.label[i];
                        ctx.drawImage(W, 0, 0, W.width, W.height, ((vertst + player.x) - (W.width / 4)) * scaleby, (((horist + player.y) - WY) - PLAYER.textMove[i]) * scaleby, (W.width / 2) * scaleby, (W.height / 2) * scaleby);
                        ctx.globalAlpha = 1;
                    }
                }
                if (PLAYER.textEffect[0] > 5) {
                    PLAYER.textEffect.shift();
                    PLAYER.text.shift();
                    PLAYER.textMove.shift();
                    PLAYER.label.shift();
                    PLAYER.textEase = 0;
                }
            }
        };


        function mVwvw(player) {
            var PLAYER = World.players[player.pid];
            if (((((player.extra & 255) === 16) && (World.PLAYER.admin !== 1)) && (player.pid !== World.PLAYER.id)) && (((PLAYER.team === -1) || (World.teams[PLAYER.team].uid !== PLAYER.teamUid)) || (World.PLAYER.team !== PLAYER.team))) return;
            if (PLAYER.nicknameLabel === null) PLAYER.nicknameLabel = GUI.renderText(PLAYER.nickname, "'Viga', sans-serif", "#FFFFFF", 38, 400, window.undefined, 16, 25, window.undefined, window.undefined, window.undefined, window.undefined, "#000000", 12);
            var W = PLAYER.nicknameLabel;
            var WY = 90;
            if (PLAYER.team === -1) ctx.drawImage(W, ((vertst + player.x) - (W.wh / 2)) * scaleby, ((horist + player.y) - WY) * scaleby, W.wh * scaleby, W.h2 * scaleby);
            else if (PLAYER.team !== -1) {
                var team = World.teams[PLAYER.team];
                if (team.uid === PLAYER.teamUid) {
                    if (team.WWMWm === null)
                    var isInClan = 0;
                    if (((player.pid === World.PLAYER.id) || (((World.PLAYER.team !== -1) && (World.PLAYER.team === World.players[player.pid].team)) && (World.players[player.pid].teamUid === World.teams[World.PLAYER.team].uid)))) { isInClan = 1;
                        team.WWMWm = GUI.renderText(("[" + team.name) + "]", "'Viga', sans-serif", "#000000", 38, 400, window.undefined, 16, 25, window.undefined, window.undefined, window.undefined, window.undefined, "#83F6A4", 12); //#699CBB
                    } else team.WWMWm = GUI.renderText(("[" + team.name) + "]", "'Viga', sans-serif", "#FFFFFF", 38, 400, window.undefined, 16, 25, window.undefined, window.undefined, window.undefined, window.undefined, "#000000", 12); //#699CBB
                    var wvMMv = team.WWMWm;
                    ctx.drawImage(wvMMv, ((((vertst + player.x) - (W.wh / 2)) - (wvMMv.wh / 2)) - 0.5) * scaleby, ((horist + player.y) - WY) * scaleby, wvMMv.wh * scaleby, wvMMv.h2 * scaleby);
                    if ((W.width !== 0) && (W.height !== 0)) ctx.drawImage(W, (((vertst + player.x) - (W.wh / 2)) + (wvMMv.wh / 2)) * scaleby, ((horist + player.y) - WY) * scaleby, W.wh * scaleby, W.h2 * scaleby);
                } else PLAYER.team = -1;
            }
        };

        

        function vmNmW(NMn, i, j, wVNVN, vWMwn, NVWwM, MWMvm) {
            var building = NVwvn[NMn.type];
            var W = building.W;
            if (W.isLoaded !== 1) {
                building.W = CanvasUtils.loadImage(building.src, building.W);
                return;
            }
            var nVNNn = NVWwM - NMn.i;
            var VwMWn = MWMvm - NMn.j;
            var nNmvn = (i + building.grid.length) - nVNNn;
            var VWMmV = (j + building.grid[0].length) - VwMWn;
            var nMNww = 0;
            var WvMwV = 0;
            for (var _i = i, mmWMW = 0; _i < nNmvn; _i++, mmWMW++) {
                if (_i >= VmvVW) {
                    nMNww = building.grid.length - mmWMW;
                    break;
                }
                for (var _j = j, mVvwm = 0; _j < VWMmV; _j++, mVvwm++) {
                    if (_j >= wWmnn) {
                        WvMwV = building.grid[0].length - mVvwm;
                        break;
                    } else vMnnw[_i][_j] = frameId;
                }
            }
            var WX = 0;
            var WY = 0;
            var SX = 0;
            var SY = 0;
            if ((nMNww !== 0) || (WvMwV !== 0)) {
                WX = (((NMn.j + VwMWn) * __TILE_SIZE__) + vertst) * scaleby;
                WY = (((NMn.i + nVNNn) * __TILE_SIZE__) + horist) * scaleby;
                nVNNn *= 32;
                VwMWn *= 32;
                SX = (W.height - (nMNww * 32)) + nVNNn;
                SY = (W.width - (WvMwV * 32)) + VwMWn;
            } else {
                WX = (((NMn.j + VwMWn) * __TILE_SIZE__) + vertst) * scaleby;
                WY = (((NMn.i + nVNNn) * __TILE_SIZE__) + horist) * scaleby;
                nVNNn *= 32;
                VwMWn *= 32;
                SX = W.height - nVNNn;
                SY = W.width - VwMWn;
            }
            ctx.drawImage(W, VwMWn, nVNNn, SY, SX, WX, WY, (SY * 3) * scaleby, (SX * 3) * scaleby);
        };

        function wNnvM() {
            WvmnV = CanvasUtils.lerp(WvmnV, (((Render.scale + NNmMN[0]) + NNmMN[1]) + NNmMN[2]) + NNmMN[3], vwMWM);
            wWWNM = scaleby;
            scaleby += WvmnV * scaleby;
            canwns = canw / scaleby;
            canhns = canh / scaleby;
        };

        function myplayerfocusinscreen() {
            var players = Entitie.units[__ENTITIE_PLAYER__];
            var border = Entitie.border[__ENTITIE_PLAYER__];
            var len = border.border;
            for (var i = 0; i < len; i++) {
                var PLAYER = players[border.cycle[i]];
                if (PLAYER.pid === World.PLAYER.id) {
                    if (Math2d.fastDist(World.PLAYER.x, World.PLAYER.y, PLAYER.x, PLAYER.y) < 1) WMWvN = window.Math.max(0, WMWvN - delta);
                    else WMWvN = mMmvV;
                    var wVn = ENTITIES[__ENTITIE_PLAYER__].clothes[PLAYER.extra & 255];
                    var gauges = World.gauges;
                    if (wVn.rad !== window.undefined) {
                        gauges.rad.mNNmw = wVn.rad;
                        gauges.cold.mNNmw = wVn.warm;
                    } else {
                        gauges.rad.mNNmw = 0;
                        gauges.cold.mNNmw = 0;
                    }
                    NmM = PLAYER.x;
                    WWV = PLAYER.y;
                    World.PLAYER.x = PLAYER.x;
                    World.PLAYER.y = PLAYER.y;
                    World.PLAYER._i = PLAYER.i;
                    World.PLAYER._j = PLAYER.j;
                    World.PLAYER.isBuilding = (ENTITIES[__ENTITIE_PLAYER__].weapons[(PLAYER.extra >> 8) & 255].type === 6) ? 1 : 0;
                    var vWwvm = window.Math.min(canh4ns, canw4ns);
                    if (Mouse.dist > vWwvm) vWwvm = WwmVw * window.Math.min((Mouse.dist - vWwvm) / vWwvm, 1);
                    else vWwvm = 0;
                    var WX = vWwvm * window.Math.cos(Mouse.angle);
                    var WY = vWwvm * window.Math.sin(Mouse.angle);
                    vvWnv = CanvasUtils.lerp(vvWnv, WX, WMNWw);
                    Nvmmn = CanvasUtils.lerp(Nvmmn, WY, WMNWw);
                    var nvVvv = 0;
                    var WvnMn = 0;
                    if (Render.shake > 0) {
                        Render.shake -= 1;
                        nvVvv += (window.Math.random() * 6) - 3;
                        WvnMn += (window.Math.random() * 6) - 3;
                    }
                    if (Render.explosionShake > 0) {
                        Render.explosionShake -= 1;
                        nvVvv += (window.Math.random() * 18) - 9;
                        WvnMn += (window.Math.random() * 18) - 9;
                    }
                    vertst = (((canw2 / scaleby) - PLAYER.x) - vvWnv) + nvVvv;
                    horist = (((canh2 / scaleby) - PLAYER.y) - Nvmmn) + WvnMn;
                    NVVWM = PLAYER.x + vvWnv;
                    WVNMV = PLAYER.y + Nvmmn;
                    rowx = ~~((Mouse.x*scaleby/scaleby +vvWnv - canw2/scaleby + NmM) / 100);
                    rowy = ~~((Mouse.y*scaleby/scaleby +Nvmmn - canh2/scaleby + WWV) / 100);
                    return;
                }
            }
        };

        function mNWNw() {
            for (var i = 0; i < World.PLAYER.gridPrev.length; i++) {
                if (World.PLAYER.gridPrev[i] !== 0) return 0;
            }
            return 1;
        };

        function wmVNW() {
            if (World.PLAYER.isBuilding === 1) {
                if ((World.PLAYER.grid > 0) && ((World.PLAYER.iGrid !== World.PLAYER._i) || (World.PLAYER.jGrid !== World.PLAYER._j))) {
                    for (var i = 0; i < World.PLAYER.gridPrev.length; i++) {
                        if (World.PLAYER.gridPrev[i] === 0) {
                            World.PLAYER.gridPrev[i] = World.PLAYER.grid;
                            World.PLAYER.iGridPrev[i] = World.PLAYER.iGrid;
                            World.PLAYER.jGridPrev[i] = World.PLAYER.jGrid;
                            break;
                        }
                    }
                    World.PLAYER.grid = 0;
                    World.PLAYER.iGrid = World.PLAYER._i;
                    World.PLAYER.jGrid = World.PLAYER._j;
                }
                World.PLAYER.grid = window.Math.min(Mvvwv, World.PLAYER.grid + delta);
                for (var i = 0; i < World.PLAYER.gridPrev.length; i++) World.PLAYER.gridPrev[i] = window.Math.max(0, World.PLAYER.gridPrev[i] - delta);
            } else if ((World.PLAYER.grid === 0) && (mNWNw() === 1)) return;
            else {
                World.PLAYER.grid = window.Math.max(0, World.PLAYER.grid - delta);
                for (var i = 0; i < World.PLAYER.gridPrev.length; i++) World.PLAYER.gridPrev[i] = window.Math.max(0, World.PLAYER.gridPrev[i] - delta);
            }
            if (wWNmv.isLoaded !== 1) {
                wWNmv = CanvasUtils.loadImage(craftgrid, wWNmv);
                return;
            }
            ctx.globalAlpha = World.PLAYER.grid / Mvvwv;
            var WY = scaleby * (((World.PLAYER.iGrid * __TILE_SIZE__) + horist) + __TILE_SIZE2__);
            var WX = scaleby * (((World.PLAYER.jGrid * __TILE_SIZE__) + vertst) + __TILE_SIZE2__);
            var SY = (scaleby * wWNmv.width) / 2;
            var SX = (scaleby * wWNmv.height) / 2;
            ctx.drawImage(wWNmv, WX - (SY / 2), WY - (SX / 2), SY, SX);
            ctx.globalAlpha = 1;
            for (var i = 0; i < World.PLAYER.gridPrev.length; i++) {
                if (World.PLAYER.gridPrev[i] > 0) {
                    ctx.globalAlpha = World.PLAYER.gridPrev[i] / Mvvwv;
                    var WY = scaleby * (((World.PLAYER.iGridPrev[i] * __TILE_SIZE__) + horist) + __TILE_SIZE2__);
                    var WX = scaleby * (((World.PLAYER.jGridPrev[i] * __TILE_SIZE__) + vertst) + __TILE_SIZE2__);
                    var SY = (scaleby * wWNmv.width) / 2;
                    var SX = (scaleby * wWNmv.height) / 2;
                    ctx.drawImage(wWNmv, WX - (SY / 2), WY - (SX / 2), SY, SX);
                    ctx.globalAlpha = 1;
                }
            }
        };

        function wmMwV() {
            var wVNVN = window.Math.min(MapManager.height - VmvVW, window.Math.max(0, (((WnWvv - VmvVW) / 2) + window.Math.floor((WVNMV / __TILE_SIZE__) - (VmvVW / 2))) + 1));
            var vWMwn = window.Math.min(MapManager.width - wWmnn, window.Math.max(0, (((NVmMW - wWmnn) / 2) + window.Math.floor((NVVWM / __TILE_SIZE__) - (wWmnn / 2))) + 1));
            var SX = wVNVN + VmvVW;
            var SY = vWMwn + wWmnn;
            for (var i = wVNVN; i < SX; i++) {
                for (var j = vWMwn; j < SY; j++) {
                    var player = MapManager.nWmMn[i][j];
                }
            }
        };

        function vWMWW(player) {
            var PLAYER = World.players[player.pid];
            if ((PLAYER !== window.undefined) && (PLAYER.notification.length > 0)) {
                if (PLAYER.notificationDelay >= Mvnwm) PLAYER.notificationDelay = 0;
                var delay = PLAYER.notificationDelay;
                var level = PLAYER.notificationLevel[0];
                var vV = PLAYER.notification[0];
                if (delay === 0) {
                    var dist = Math2d.dist(player.x, player.y, NmM, WWV);
                }
                PLAYER.notificationDelay += delta;
                if (PLAYER.notificationDelay >= Mvnwm) {
                    PLAYER.notificationDelay = 0;
                    PLAYER.notificationLevel.shift();
                    PLAYER.notification.shift();
                }
                var W = wVMNN[vV][level];
                if (W.isLoaded !== 1) {
                    wVMNN[vV][level] = CanvasUtils.loadImage((((NVvVm + vV) + "_") + level) + ".png", W);
                    return;
                }
                var move = 0;
                if (delay < mmWWw) {
                    var mwvWV = delay / mmWWw;
                    ctx.globalAlpha = mwvWV;
                    move = 15 * (1 - mwvWV);
                } else if (delay > WWMnN) {
                    var mwVvV = (Mvnwm - delay) / (Mvnwm - WWMnN);
                    ctx.globalAlpha = mwVvV;
                    move = 40 * (mwVvV - 1);
                }
                ctx.drawImage(W, ((vertst + player.x) - 120) * scaleby, ((horist + player.y) + (move - 45)) * scaleby, (W.width * scaleby) / 2, (W.height * scaleby) / 2);
                ctx.globalAlpha = 1;
            }
        };

        function showruncloud(player) {
            var PLAYER = World.players[player.pid];
            for (var i = 0; i < PLAYER.runEffect.length; i++) {
                var effect = PLAYER.runEffect[i];
                if ((i > 0) && (effect.delay <= 0)) {
                    var vVVVn = PLAYER.runEffect[i - 1];
                    if ((vVVVn.delay > 500) || (vVVVn.delay <= 0)) continue;
                }
                if ((player.speed > ENTITIES[__ENTITIE_PLAYER__].speed) || (effect.delay > 0)) {
                    var mVn = ENTITIES[__ENTITIE_PLAYER__].runEffect;
                    var W = mVn.W;
                    if (W.isLoaded !== 1) {
                        mVn.W = CanvasUtils.loadImage(mVn.src, mVn.W);
                        return;
                    }
                    if (effect.delay <= 0) {
                        effect.delay = 750;
                        effect.angle = window.Math.random() * WNVNM;
                        effect.x = player.x;
                        effect.y = player.y;
                        effect.size = 1 + (window.Math.random() * 0.8);
                    } else effect.delay -= delta;
                    var vW = MathUtils.Ease.outQuart(window.Math.max(0, effect.delay / 750));
                    var VwW = (((scaleby * (effect.size + 1)) * vW) * W.width) / 7;
                    var wh = -VwW / 2;
                    ctx.save();
                    ctx.translate((vertst + effect.x) * scaleby, (horist + effect.y) * scaleby);
                    ctx.rotate(effect.angle);
                    ctx.globalAlpha = window.Math.max(0, vW * vW);
                    ctx.drawImage(W, wh, wh, VwW, VwW);
                    ctx.restore();
                }
            }
        };

        function Wvmnw(mVn, weapon, wVn, player, imgMovement, WX, WY) {
            var PLAYER = World.players[player.pid];
            var WMW = 0;
            var repellent = PLAYER.repellent - Render.globalTime;
            var withdrawal = PLAYER.withdrawal - Render.globalTime;
            if (repellent > 0) {
                if (withdrawal > 0) WMW = 3;
                else if (PLAYER.withdrawal > 0) WMW = 5;
                else WMW = 1;
            } else if (withdrawal > 0) WMW = 2;
            else if (PLAYER.withdrawal > 0) WMW = 4;
            var skin = mVn.skins[WMW];
            var recoil = 0;
            var Vmwnn = player.state & 254;
            var Nmm = weapon.rightArm;
            var VnN = weapon.leftArm;
            if (Vmwnn === 4) {
                if (PLAYER.consumable === -1) {
                    var MNmnm = (player.extra >> 8) & 255;
                    if ((AudioUtils._fx.shot[MNmnm] !== 0) && ((Render.globalTime - PLAYER.consumableLast) > 800)) {
                        PLAYER.consumableLast = Render.globalTime;
                        var VVmnw = window.Math.floor(window.Math.random() * weapon.soundLen);
                        AudioUtils.playFx(AudioUtils._fx.shot[MNmnm][VVmnw], weapon.soundVolume, Math2d.dist(World.PLAYER.x, World.PLAYER.y, player.x, player.y) / 4, weapon.soundDelay);
                    }
                    PLAYER.consumable = 0;
                }
                if (PLAYER.punch === 1) PLAYER.consumable = window.Math.max(0, PLAYER.consumable - delta);
                else PLAYER.consumable = window.Math.min(weapon.consumableDelay, PLAYER.consumable + delta);
                var vW = PLAYER.consumable / weapon.consumableDelay;
                recoil = vW * weapon.recoil;
                if ((PLAYER.consumable === 0) || (PLAYER.consumable === weapon.consumableDelay)) PLAYER.punch *= -1;
            } else if (Math2d.fastDist(player.x, player.y, player.nx, player.ny) < 1) {
                PLAYER.consumable = -1;
                PLAYER.breath = (PLAYER.breath + delta) % 1500;
                if (PLAYER.move !== 0) {
                    if (PLAYER.move < 400) PLAYER.move = 800 - PLAYER.move;
                    PLAYER.move = PLAYER.move + delta;
                    if (PLAYER.move > 800) PLAYER.move = 0;
                }
            } else {
                PLAYER.consumable = -1;
                if (player.speed > ENTITIES[__ENTITIE_PLAYER__].speed) PLAYER.move = PLAYER.move + (delta * 1.9);
                else PLAYER.move = PLAYER.move + delta;
                if (PLAYER.move > 800) {
                    PLAYER.orientation *= -1;
                    PLAYER.move = PLAYER.move % 800;
                }
                if (PLAYER.breath !== 0) {
                    if (PLAYER.breath < 750) PLAYER.breath = 1500 - PLAYER.breath;
                    PLAYER.breath = PLAYER.breath + delta;
                    if (PLAYER.breath > 1500) PLAYER.breath = 0;
                }
            }
            var breath = weapon.breath * ((PLAYER.breath < 750) ? (PLAYER.breath / 750) : (1 - ((PLAYER.breath - 750) / 750)));
            var move = weapon.move * ((PLAYER.move < 400) ? (PLAYER.move / 400) : (1 - ((PLAYER.move - 400) / 400)));
            var MVn = (wVn.rightArm === window.undefined) ? skin.rightArm : wVn.rightArm;
            CanvasUtils.drawImageHd(MVn, WX, WY, Nmm.angle + player.angle, ((Nmm.x + (move * PLAYER.orientation)) + recoil) + breath, Nmm.y, imgMovement);
            MVn = (wVn.leftArm === window.undefined) ? skin.leftArm : wVn.leftArm;
            CanvasUtils.drawImageHd(MVn, WX, WY, -VnN.angle + player.angle, ((VnN.x + (move * PLAYER.orientation)) + recoil) + breath, VnN.y, imgMovement);
            var IID = weapon.weapon;
            CanvasUtils.drawImageHd(IID, WX, WY, player.angle, ((IID.x + (move * PLAYER.orientation)) + breath) + recoil, IID.y, imgMovement);
            if (player.hurt2 > 0) {
                var mnM = 1;
                player.hurt2 -= delta;
                var vW = 0;
                if (player.hurt2 > 150) vW = MathUtils.Ease.inQuad((300 - player.hurt2) / 300);
                else {
                    vW = MathUtils.Ease.outQuad(player.hurt2 / 150);
                    mnM += (1 - vW) * 0.2;
                }
                ctx.globalAlpha = window.Math.min(1, window.Math.max(0, vW));
                CanvasUtils.drawImageHd(mVn.food, WX, WY, player.angle, 0, 0, mnM);
                ctx.globalAlpha = 1;
            }
            if (player.hurt > 0) {
                var mnM = 1;
                player.hurt -= delta;
                var vW = 0;
                if (player.hurt > 150) vW = MathUtils.Ease.inQuad((300 - player.hurt) / 300);
                else {
                    vW = MathUtils.Ease.outQuad(player.hurt / 150);
                    mnM += (1 - vW) * 0.2;
                }
                WX += (window.Math.cos(player.hurtAngle) * vW) * 3;
                WY += (window.Math.sin(player.hurtAngle) * vW) * 3;
                ctx.globalAlpha = window.Math.min(1, window.Math.max(0, vW));
                CanvasUtils.drawImageHd(mVn.hurt, WX, WY, player.angle, 0, 0, mnM);
                ctx.globalAlpha = 1;
            }
            if (player.heal > 0) {
                var mnM = 1;
                player.heal -= delta;
                if (player.heal > 150) ctx.globalAlpha = window.Math.min(1, window.Math.max(0, MathUtils.Ease.inQuad((300 - player.heal) / 300)));
                else {
                    var vW = MathUtils.Ease.outQuad(player.heal / 150);
                    mnM += (1 - vW) * 0.2;
                    ctx.globalAlpha = window.Math.min(1, window.Math.max(0, vW));
                }
                CanvasUtils.drawImageHd(mVn.heal, WX, WY, player.angle, 0, 0, mnM);
                ctx.globalAlpha = 1;
            }
            CanvasUtils.drawImageHd(skin.head, WX, WY, player.angle, 0, 0, imgMovement);
            if (wVn.head !== window.undefined) CanvasUtils.drawImageHd(wVn.head, WX, WY, player.angle, 0, 0, imgMovement);
        };

        function vwVWm(mVn, weapon, wVn, player, imgMovement, WX, WY) {
            var PLAYER = World.players[player.pid];
            var WMW = 0;
            var repellent = PLAYER.repellent - Render.globalTime;
            var withdrawal = PLAYER.withdrawal - Render.globalTime;
            if (repellent > 0) {
                if (withdrawal > 0) WMW = 3;
                else if (PLAYER.withdrawal > 0) WMW = 5;
                else WMW = 1;
            } else if (withdrawal > 0) WMW = 2;
            else if (PLAYER.withdrawal > 0) WMW = 4;
            var skin = mVn.skins[WMW];
            var recoil = 0;
            var recoilGun = 0;
            var recoilHead = 0;
            var effect = -1;
            var Nmm = weapon.rightArm;
            var VnN = weapon.leftArm;
            var cartridges = PLAYER.cartridges;
            if (player.hit > 0) {
                if (player.hit === player.hitMax) {
                    for (var i = 0; i < cartridges.length; i++) {
                        var cartridge = cartridges[i];
                        if (cartridge.delay <= 0) {
                            cartridge.type = weapon.cartridge;
                            cartridge.delay = weapon.cartridgeDelay;
                            cartridge.x = WX + (window.Math.cos(player.angle) * 44);
                            cartridge.y = WY + (window.Math.sin(player.angle) * 44);
                            var angle = ((-window.Math.PI / 2.5) + player.angle) + ((window.Math.random() * -window.Math.PI) / 3.5);
                            cartridge.ax = window.Math.cos(angle);
                            cartridge.ay = window.Math.sin(angle);
                            break;
                        }
                    }
                }
                player.hit = window.Math.max(0, player.hit - delta);
                var vW = (player.hit > 80) ? (1 - ((player.hit - 80) / 100)) : (player.hit / 80);
                if (weapon.noEffect === 0) {
                    var nWvvW = mVn.gunEffect[weapon.gunEffect].length;
                    for (var gunEffect = 0; gunEffect < nWvvW; gunEffect++) {
                        if (player.hit > (weapon.delay - (30 * (gunEffect + 1)))) {
                            effect = gunEffect;
                            break;
                        }
                    }
                }
                recoilHead = vW * weapon.recoilHead;
                recoilGun = vW * weapon.recoilGun;
                recoil = vW * weapon.recoil;
            } else if (Math2d.fastDist(player.x, player.y, player.nx, player.ny) < 1) {
                PLAYER.breath = (PLAYER.breath + delta) % 1500;
                if (PLAYER.move !== 0) {
                    if (PLAYER.move < 400) PLAYER.move = 800 - PLAYER.move;
                    PLAYER.move = PLAYER.move + delta;
                    if (PLAYER.move > 800) PLAYER.move = 0;
                }
            } else {
                if (player.speed > ENTITIES[__ENTITIE_PLAYER__].speed) PLAYER.move = PLAYER.move + (delta * 1.9);
                else PLAYER.move = PLAYER.move + delta;
                if (PLAYER.move > 800) {
                    PLAYER.orientation *= -1;
                    PLAYER.move = PLAYER.move % 800;
                }
                if (PLAYER.breath !== 0) {
                    if (PLAYER.breath < 750) PLAYER.breath = 1500 - PLAYER.breath;
                    PLAYER.breath = PLAYER.breath + delta;
                    if (PLAYER.breath > 1500) PLAYER.breath = 0;
                }
            }
            var breath = weapon.breath * ((PLAYER.breath < 750) ? (PLAYER.breath / 750) : (1 - ((PLAYER.breath - 750) / 750)));
            var move = weapon.move * ((PLAYER.move < 400) ? (PLAYER.move / 400) : (1 - ((PLAYER.move - 400) / 400)));
            var MVn = (wVn.rightArm === window.undefined) ? skin.rightArm : wVn.rightArm;
            CanvasUtils.drawImageHd(MVn, WX, WY, Nmm.angle + player.angle, ((Nmm.x + (move * PLAYER.orientation)) + recoil) + breath, Nmm.y, imgMovement);
            MVn = (wVn.leftArm === window.undefined) ? skin.leftArm : wVn.leftArm;
            CanvasUtils.drawImageHd(MVn, WX, WY, -VnN.angle + player.angle, ((VnN.x + (move * PLAYER.orientation)) + recoil) + breath, VnN.y, imgMovement);
            var IID = weapon.weapon;
            if ((effect >= 0) && (weapon.noEffect === 0)) {
                var gunEffect = mVn.gunEffect[weapon.gunEffect][effect];
                CanvasUtils.drawImageHd(gunEffect, WX, WY, player.angle, (((IID.x + (move * PLAYER.orientation)) + breath) + recoilGun) + weapon.distance, IID.y, imgMovement);
            }
            CanvasUtils.drawImageHd(IID, WX, WY, player.angle, ((IID.x + (move * PLAYER.orientation)) + breath) + recoilGun, IID.y, imgMovement);
            for (var i = 0; i < cartridges.length; i++) {
                var cartridge = cartridges[i];
                if (cartridge.delay > 0) {
                    cartridge.x += (delta * cartridge.ax) * 0.18;
                    cartridge.y += (delta * cartridge.ay) * 0.18;
                    if ((cartridge.delay < 200) && (ctx.globalAlpha === 1)) {
                        ctx.globalAlpha = MathUtils.Ease.outQuad(cartridge.delay / 200);
                        CanvasUtils.drawImageHd(mVn.cartridges[cartridge.type], cartridge.x, cartridge.y, cartridge.delay * 0.007, 0, 0, imgMovement);
                        ctx.globalAlpha = 1;
                    } else CanvasUtils.drawImageHd(mVn.cartridges[cartridge.type], cartridge.x, cartridge.y, cartridge.delay * 0.007, 0, 0, imgMovement);
                    cartridge.delay -= delta;
                }
            }
            if (player.hurt > 0) {
                var mnM = 1;
                player.hurt -= delta;
                var vW = 0;
                if (player.hurt > 150) vW = MathUtils.Ease.inQuad((300 - player.hurt) / 300);
                else {
                    vW = MathUtils.Ease.outQuad(player.hurt / 150);
                    mnM += (1 - vW) * 0.2;
                }
                WX += (window.Math.cos(player.hurtAngle) * vW) * 3;
                WY += (window.Math.sin(player.hurtAngle) * vW) * 3;
                ctx.globalAlpha = window.Math.min(1, window.Math.max(0, vW));
                CanvasUtils.drawImageHd(mVn.hurt, WX, WY, player.angle, recoilHead, 0, mnM);
                ctx.globalAlpha = 1;
            }
            if (player.heal > 0) {
                var mnM = 1;
                player.heal -= delta;
                if (player.heal > 150) ctx.globalAlpha = window.Math.min(1, window.Math.max(0, MathUtils.Ease.inQuad((300 - player.heal) / 300)));
                else {
                    var vW = MathUtils.Ease.outQuad(player.heal / 150);
                    mnM += (1 - vW) * 0.2;
                    ctx.globalAlpha = window.Math.min(1, window.Math.max(0, vW));
                }
                CanvasUtils.drawImageHd(mVn.heal, WX, WY, player.angle, recoilHead, 0, mnM);
                ctx.globalAlpha = 1;
            }
            CanvasUtils.drawImageHd(skin.head, WX, WY, player.angle, recoilHead, 0, imgMovement);
            if (wVn.head !== window.undefined) CanvasUtils.drawImageHd(wVn.head, WX, WY, player.angle, recoilHead, 0, imgMovement);
        };

        function WVVmN(mVn, weapon, wVn, player, imgMovement, WX, WY) {
            var PLAYER = World.players[player.pid];
            var WMW = 0;
            var repellent = PLAYER.repellent - Render.globalTime;
            var withdrawal = PLAYER.withdrawal - Render.globalTime;
            if (repellent > 0) {
                if (withdrawal > 0) WMW = 3;
                else if (PLAYER.withdrawal > 0) WMW = 5;
                else WMW = 1;
            } else if (withdrawal > 0) WMW = 2;
            else if (PLAYER.withdrawal > 0) WMW = 4;
            var skin = mVn.skins[WMW];
            var nmm = 0;
            var NNM = 0;
            var NWW = 0;
            var wnN = 0;
            if (player.hit > 0) {
                player.hit = window.Math.max(0, player.hit - delta);
                vW = (player.hit > weapon.impactClient) ? (1 - ((player.hit - weapon.impactClient) / (weapon.delay - weapon.impactClient))) : (player.hit / weapon.impactClient);
                nmm = -MathUtils.Ease.inOutQuad(vW) * 0.35;
                wnN = vW * 3;
                NWW = -vW * 20;
                NNM = vW * 3;
            } else if (Math2d.fastDist(player.x, player.y, player.nx, player.ny) < 1) {
                PLAYER.breath = (PLAYER.breath + delta) % 1500;
                if (PLAYER.move !== 0) {
                    if (PLAYER.move < 400) PLAYER.move = 800 - PLAYER.move;
                    PLAYER.move = PLAYER.move + delta;
                    if (PLAYER.move > 800) PLAYER.move = 0;
                }
            } else {
                if (player.speed > ENTITIES[__ENTITIE_PLAYER__].speed) PLAYER.move = PLAYER.move + (delta * 1.9);
                else PLAYER.move = PLAYER.move + delta;
                if (PLAYER.move > 800) {
                    PLAYER.orientation *= -1;
                    PLAYER.move = PLAYER.move % 800;
                }
                if (PLAYER.breath !== 0) {
                    if (PLAYER.breath < 750) PLAYER.breath = 1500 - PLAYER.breath;
                    PLAYER.breath = PLAYER.breath + delta;
                    if (PLAYER.breath > 1500) PLAYER.breath = 0;
                }
            }
            var breath = weapon.breath * ((PLAYER.breath < 750) ? (PLAYER.breath / 750) : (1 - ((PLAYER.breath - 750) / 750)));
            var move = weapon.move * ((PLAYER.move < 400) ? (PLAYER.move / 400) : (1 - ((PLAYER.move - 400) / 400)));
            var breathWeapon = weapon.breathWeapon * ((PLAYER.breath < 750) ? (PLAYER.breath / 750) : (1 - ((PLAYER.breath - 750) / 750)));
            var NwM = weapon.rightArm;
            var MVn = (wVn.rightArm === window.undefined) ? skin.rightArm : wVn.rightArm;
            CanvasUtils.drawImageHd(MVn, WX, WY, (NwM.angle + player.angle) - nmm, ((NwM.x - (move * PLAYER.orientation)) + NWW) + breathWeapon, NwM.y, imgMovement);
            if (player.hit > 0) {
                var WnVmv = weapon.WnVmv;
                CanvasUtils.drawImageHd(WnVmv, WX, WY, player.angle, ((WnVmv.x - (move * PLAYER.orientation)) + breathWeapon) + NWW, WnVmv.y, imgMovement);
            }
            var IID = weapon.weapon;
            CanvasUtils.drawImageHd(IID, WX, WY, IID.angle + player.angle, ((IID.x + (move * PLAYER.orientation)) + breath) + NNM, IID.y, imgMovement);
            NwM = weapon.leftArm;
            MVn = (wVn.leftArm === window.undefined) ? skin.leftArm : wVn.leftArm;
            CanvasUtils.drawImageHd(MVn, WX, WY, -NwM.angle + player.angle, ((NwM.x + (move * PLAYER.orientation)) + NNM) + breath, NwM.y, imgMovement);
            if (player.hurt > 0) {
                var mnM = 1;
                player.hurt -= delta;
                var vW = 0;
                if (player.hurt > 150) vW = MathUtils.Ease.inQuad((300 - player.hurt) / 300);
                else {
                    vW = MathUtils.Ease.outQuad(player.hurt / 150);
                    mnM += (1 - vW) * 0.2;
                }
                WX += (window.Math.cos(player.hurtAngle) * vW) * 3;
                WY += (window.Math.sin(player.hurtAngle) * vW) * 3;
                ctx.globalAlpha = window.Math.min(1, window.Math.max(0, vW));
                CanvasUtils.drawImageHd(mVn.hurt, WX, WY, player.angle - (nmm / 1.5), wnN, 0, mnM);
                ctx.globalAlpha = 1;
            }
            if (player.heal > 0) {
                var mnM = 1;
                player.heal -= delta;
                if (player.heal > 150) ctx.globalAlpha = window.Math.min(1, window.Math.max(0, MathUtils.Ease.inQuad((300 - player.heal) / 300)));
                else {
                    var vW = MathUtils.Ease.outQuad(player.heal / 150);
                    mnM += (1 - vW) * 0.2;
                    ctx.globalAlpha = window.Math.min(1, window.Math.max(0, vW));
                }
                CanvasUtils.drawImageHd(mVn.heal, WX, WY, player.angle - (nmm / 1.5), wnN, 0, mnM);
                ctx.globalAlpha = 1;
            }
            CanvasUtils.drawImageHd(skin.head, WX, WY, player.angle - (nmm / 1.5), wnN, 0, imgMovement);
            if (wVn.head !== window.undefined) CanvasUtils.drawImageHd(wVn.head, WX, WY, player.angle - (nmm / 1.5), wnN, 0, imgMovement);
        };

        function mWNvw(mVn, weapon, wVn, player, imgMovement, WX, WY) {
            var PLAYER = World.players[player.pid];
            var WMW = 0;
            var repellent = PLAYER.repellent - Render.globalTime;
            var withdrawal = PLAYER.withdrawal - Render.globalTime;
            if (repellent > 0) {
                if (withdrawal > 0) WMW = 3;
                else if (PLAYER.withdrawal > 0) WMW = 5;
                else WMW = 1;
            } else if (withdrawal > 0) WMW = 2;
            else if (PLAYER.withdrawal > 0) WMW = 4;
            var skin = mVn.skins[WMW];
            var nmm = 0;
            var NNM = 0;
            var NWW = 0;
            var wnN = 0;
            if (player.hit > 0) {
                player.hit = window.Math.max(0, player.hit - delta);
                vW = (player.hit > weapon.impactClient) ? (1 - ((player.hit - weapon.impactClient) / (weapon.delay - weapon.impactClient))) : (player.hit / weapon.impactClient);
                nmm = -MathUtils.Ease.inOutQuad(vW) * 0.55;
                wnN = vW * 3;
                NWW = -vW * 25;
                NNM = vW * 10;
            } else if (Math2d.fastDist(player.x, player.y, player.nx, player.ny) < 1) {
                PLAYER.breath = (PLAYER.breath + delta) % 1500;
                if (PLAYER.move !== 0) {
                    if (PLAYER.move < 400) PLAYER.move = 800 - PLAYER.move;
                    PLAYER.move = PLAYER.move + delta;
                    if (PLAYER.move > 800) PLAYER.move = 0;
                }
            } else {
                if (player.speed > ENTITIES[__ENTITIE_PLAYER__].speed) PLAYER.move = PLAYER.move + (delta * 1.9);
                else PLAYER.move = PLAYER.move + delta;
                if (PLAYER.move > 800) {
                    PLAYER.orientation *= -1;
                    PLAYER.move = PLAYER.move % 800;
                }
                if (PLAYER.breath !== 0) {
                    if (PLAYER.breath < 750) PLAYER.breath = 1500 - PLAYER.breath;
                    PLAYER.breath = PLAYER.breath + delta;
                    if (PLAYER.breath > 1500) PLAYER.breath = 0;
                }
            }
            var breath = weapon.breath * ((PLAYER.breath < 750) ? (PLAYER.breath / 750) : (1 - ((PLAYER.breath - 750) / 750)));
            var move = weapon.move * ((PLAYER.move < 400) ? (PLAYER.move / 400) : (1 - ((PLAYER.move - 400) / 400)));
            var NwM = weapon.leftArm;
            var MVn = (wVn.leftArm === window.undefined) ? skin.leftArm : wVn.leftArm;
            CanvasUtils.drawImageHd(MVn, WX, WY, ((-NwM.angle + player.angle) - breath) - nmm, (NwM.x - (move * PLAYER.orientation)) + NNM, NwM.y, imgMovement);
            if (player.hurt > 0) {
                var mnM = 1;
                player.hurt -= delta;
                var vW = 0;
                if (player.hurt > 150) vW = MathUtils.Ease.inQuad((300 - player.hurt) / 300);
                else {
                    vW = MathUtils.Ease.outQuad(player.hurt / 150);
                    mnM += (1 - vW) * 0.2;
                }
                WX += (window.Math.cos(player.hurtAngle) * vW) * 3;
                WY += (window.Math.sin(player.hurtAngle) * vW) * 3;
                ctx.globalAlpha = window.Math.min(1, window.Math.max(0, vW));
                CanvasUtils.drawImageHd(mVn.hurt, WX, WY, player.angle - (nmm / 1.5), wnN, 0, mnM);
                ctx.globalAlpha = 1;
            }
            if (player.heal > 0) {
                var mnM = 1;
                player.heal -= delta;
                if (player.heal > 150) ctx.globalAlpha = window.Math.min(1, window.Math.max(0, MathUtils.Ease.inQuad((300 - player.heal) / 300)));
                else {
                    var vW = MathUtils.Ease.outQuad(player.heal / 150);
                    mnM += (1 - vW) * 0.2;
                    ctx.globalAlpha = window.Math.min(1, window.Math.max(0, vW));
                }
                CanvasUtils.drawImageHd(mVn.heal, WX, WY, player.angle - (nmm / 1.5), wnN, 0, mnM);
                ctx.globalAlpha = 1;
            }
            CanvasUtils.drawImageHd(skin.head, WX, WY, player.angle - (nmm / 1.5), wnN, 0, imgMovement);
            if (wVn.head !== window.undefined) CanvasUtils.drawImageHd(wVn.head, WX, WY, player.angle - (nmm / 1.5), wnN, 0, imgMovement);
            var breathWeapon = weapon.breathWeapon * ((PLAYER.breath < 750) ? (PLAYER.breath / 750) : (1 - ((PLAYER.breath - 750) / 750)));
            NwM = weapon.rightArm;
            MVn = (wVn.rightArm === window.undefined) ? skin.rightArm : wVn.rightArm;
            CanvasUtils.drawImageHd(MVn, WX, WY, NwM.angle + player.angle, ((NwM.x + (move * PLAYER.orientation)) + NWW) + breathWeapon, NwM.y, imgMovement);
            var IID = weapon.weapon;
            CanvasUtils.drawImageHd(IID, WX, WY, IID.angle + player.angle, ((IID.x + (move * PLAYER.orientation)) + breathWeapon) + NWW, IID.y, imgMovement);
        };

        function mvwMm(mVn, weapon, wVn, player, imgMovement, WX, WY) {
            var PLAYER = World.players[player.pid];
            var WMW = 0;
            var repellent = PLAYER.repellent - Render.globalTime;
            var withdrawal = PLAYER.withdrawal - Render.globalTime;
            if (repellent > 0) {
                if (withdrawal > 0) WMW = 3;
                else if (PLAYER.withdrawal > 0) WMW = 5;
                else WMW = 1;
            } else if (withdrawal > 0) WMW = 2;
            else if (PLAYER.withdrawal > 0) WMW = 4;
            var skin = mVn.skins[WMW];
            var nmm = 0;
            var NNM = 0;
            var NWW = 0;
            var wnN = 0;
            var Nmm = weapon.rightArm;
            var VnN = weapon.leftArm;
            if (player.hit > 0) {
                player.hit = window.Math.max(0, player.hit - delta);
                vW = (player.hit > weapon.impactClient) ? (1 - ((player.hit - weapon.impactClient) / (weapon.delay - weapon.impactClient))) : (player.hit / weapon.impactClient);
                nmm = -MathUtils.Ease.inOutQuad(vW) * 0.4;
                wnN = vW * 3;
                NNM = vW * VnN.dist;
                NWW = vW * Nmm.dist;
            } else if (Math2d.fastDist(player.x, player.y, player.nx, player.ny) < 1) {
                PLAYER.breath = (PLAYER.breath + delta) % 1500;
                if (PLAYER.move !== 0) {
                    if (PLAYER.move < 400) PLAYER.move = 800 - PLAYER.move;
                    PLAYER.move = PLAYER.move + delta;
                    if (PLAYER.move > 800) PLAYER.move = 0;
                }
            } else {
                if (player.speed > ENTITIES[__ENTITIE_PLAYER__].speed) PLAYER.move = PLAYER.move + (delta * 1.9);
                else PLAYER.move = PLAYER.move + delta;
                if (PLAYER.move > 800) {
                    PLAYER.orientation *= -1;
                    PLAYER.move = PLAYER.move % 800;
                }
                if (PLAYER.breath !== 0) {
                    if (PLAYER.breath < 750) PLAYER.breath = 1500 - PLAYER.breath;
                    PLAYER.breath = PLAYER.breath + delta;
                    if (PLAYER.breath > 1500) PLAYER.breath = 0;
                }
            }
            var breath = weapon.breath * ((PLAYER.breath < 750) ? (PLAYER.breath / 750) : (1 - ((PLAYER.breath - 750) / 750)));
            var move = weapon.move * ((PLAYER.move < 400) ? (PLAYER.move / 400) : (1 - ((PLAYER.move - 400) / 400)));
            var IID = weapon.weapon;
            CanvasUtils.drawImageHd2(IID, WX, WY, (IID.angle + player.angle) + breath, IID.x + (move * PLAYER.orientation), IID.y, imgMovement, nmm * IID.rotation, IID.x2, IID.y2);
            var MVn = (wVn.rightArm === window.undefined) ? skin.rightArm : wVn.rightArm;
            CanvasUtils.drawImageHd(MVn, WX, WY, ((Nmm.angle + player.angle) + breath) + (nmm * Nmm.rotation), (Nmm.x + (move * PLAYER.orientation)) + NWW, Nmm.y, imgMovement);
            MVn = (wVn.leftArm === window.undefined) ? skin.leftArm : wVn.leftArm;
            CanvasUtils.drawImageHd(MVn, WX, WY, ((-VnN.angle + player.angle) + breath) + (nmm * VnN.rotation), (VnN.x + (move * PLAYER.orientation)) + NNM, VnN.y, imgMovement);
            if (player.hurt > 0) {
                var mnM = 1;
                player.hurt -= delta;
                var vW = 0;
                if (player.hurt > 150) vW = MathUtils.Ease.inQuad((300 - player.hurt) / 300);
                else {
                    vW = MathUtils.Ease.outQuad(player.hurt / 150);
                    mnM += (1 - vW) * 0.2;
                }
                WX += (window.Math.cos(player.hurtAngle) * vW) * 3;
                WY += (window.Math.sin(player.hurtAngle) * vW) * 3;
                ctx.globalAlpha = window.Math.min(1, window.Math.max(0, vW));
                CanvasUtils.drawImageHd(mVn.hurt, WX, WY, player.angle + (nmm / 1.5), wnN, 0, mnM);
                ctx.globalAlpha = 1;
            }
            if (player.heal > 0) {
                var mnM = 1;
                player.heal -= delta;
                if (player.heal > 150) ctx.globalAlpha = window.Math.min(1, window.Math.max(0, MathUtils.Ease.inQuad((300 - player.heal) / 300)));
                else {
                    var vW = MathUtils.Ease.outQuad(player.heal / 150);
                    mnM += (1 - vW) * 0.2;
                    ctx.globalAlpha = window.Math.min(1, window.Math.max(0, vW));
                }
                CanvasUtils.drawImageHd(mVn.heal, WX, WY, player.angle + (nmm / 1.5), wnN, 0, mnM);
                ctx.globalAlpha = 1;
            }
            CanvasUtils.drawImageHd(skin.head, WX, WY, player.angle + (nmm / 1.5), wnN, 0, imgMovement);
            if (wVn.head !== window.undefined) CanvasUtils.drawImageHd(wVn.head, WX, WY, player.angle + (nmm / 1.5), wnN, 0, imgMovement);
        };

        function mmmMw(mVn, weapon, wVn, player, imgMovement, WX, WY) {
            var PLAYER = World.players[player.pid];
            var WMW = 0;
            var repellent = PLAYER.repellent - Render.globalTime;
            var withdrawal = PLAYER.withdrawal - Render.globalTime;
            if (repellent > 0) {
                if (withdrawal > 0) WMW = 3;
                else if (PLAYER.withdrawal > 0) WMW = 5;
                else WMW = 1;
            } else if (withdrawal > 0) WMW = 2;
            else if (PLAYER.withdrawal > 0) WMW = 4;
            var skin = mVn.skins[WMW];
            var NNM = 0;
            var NWW = 0;
            if (Math2d.fastDist(player.x, player.y, player.nx, player.ny) < 1) {
                PLAYER.breath = (PLAYER.breath + delta) % 1500;
                if (PLAYER.move !== 0) {
                    if (PLAYER.move < 400) PLAYER.move = 800 - PLAYER.move;
                    PLAYER.move = PLAYER.move + delta;
                    if (PLAYER.move > 800) PLAYER.move = 0;
                }
            } else {
                if (player.speed > ENTITIES[__ENTITIE_PLAYER__].speed) PLAYER.move = PLAYER.move + (delta * 1.9);
                else PLAYER.move = PLAYER.move + delta;
                if (PLAYER.move > 800) {
                    PLAYER.orientation *= -1;
                    PLAYER.move = PLAYER.move % 800;
                }
                if (PLAYER.breath !== 0) {
                    if (PLAYER.breath < 750) PLAYER.breath = 1500 - PLAYER.breath;
                    PLAYER.breath = PLAYER.breath + delta;
                    if (PLAYER.breath > 1500) PLAYER.breath = 0;
                }
            }
            var breath = weapon.breath * ((PLAYER.breath < 750) ? (PLAYER.breath / 750) : (1 - ((PLAYER.breath - 750) / 750)));
            var move = weapon.move * ((PLAYER.move < 400) ? (PLAYER.move / 400) : (1 - ((PLAYER.move - 400) / 400)));
            var NwM = weapon.rightArm;
            var MVn = (wVn.rightArm === window.undefined) ? skin.rightArm : wVn.rightArm;
            CanvasUtils.drawImageHd(MVn, WX, WY, (NwM.angle + player.angle) + breath, (NwM.x + (move * PLAYER.orientation)) + NWW, NwM.y, imgMovement);
            NwM = weapon.leftArm;
            MVn = (wVn.leftArm === window.undefined) ? skin.leftArm : wVn.leftArm;
            CanvasUtils.drawImageHd(MVn, WX, WY, (-NwM.angle + player.angle) - breath, (NwM.x - (move * PLAYER.orientation)) + NNM, NwM.y, imgMovement);
            CanvasUtils.drawImageHd(weapon.blueprint, WX, WY, ((-NwM.angle + player.angle) - breath) + (window.Math.PI / 3), ((NwM.x - (move * PLAYER.orientation)) + NNM) - 40, NwM.y - 15, imgMovement);
            if (player.hurt > 0) {
                var mnM = 1;
                player.hurt -= delta;
                var vW = 0;
                if (player.hurt > 150) vW = MathUtils.Ease.inQuad((300 - player.hurt) / 300);
                else {
                    vW = MathUtils.Ease.outQuad(player.hurt / 150);
                    mnM += (1 - vW) * 0.2;
                }
                WX += (window.Math.cos(player.hurtAngle) * vW) * 3;
                WY += (window.Math.sin(player.hurtAngle) * vW) * 3;
                ctx.globalAlpha = window.Math.min(1, window.Math.max(0, vW));
                CanvasUtils.drawImageHd(mVn.hurt, WX, WY, player.angle, 0, 0, mnM);
                ctx.globalAlpha = 1;
            }
            if (player.heal > 0) {
                var mnM = 1;
                player.heal -= delta;
                if (player.heal > 150) ctx.globalAlpha = window.Math.min(1, window.Math.max(0, MathUtils.Ease.inQuad((300 - player.heal) / 300)));
                else {
                    var vW = MathUtils.Ease.outQuad(player.heal / 150);
                    mnM += (1 - vW) * 0.2;
                    ctx.globalAlpha = window.Math.min(1, window.Math.max(0, vW));
                }
                CanvasUtils.drawImageHd(mVn.heal, WX, WY, player.angle, 0, 0, mnM);
                ctx.globalAlpha = 1;
            }
            CanvasUtils.drawImageHd(skin.head, WX, WY, player.angle, 0, 0, imgMovement);
            if (wVn.head !== window.undefined) CanvasUtils.drawImageHd(wVn.head, WX, WY, player.angle, 0, 0, imgMovement);
            CanvasUtils.drawImageHd(weapon.pencil, WX, WY, player.angle, 0, 0, imgMovement);
        };
        var nVWnV = [0, 0, 0, 0];

        function placingobj() {
            var nwmVM = 0;
            if ((World.PLAYER.isBuilding === 1) && (World.PLAYER.blueprint !== 0)) {
                var IID = items[World.PLAYER.blueprint];
                if (IID.subtype !== 0) {
                    IID = IID.subtype[World.PLAYER.furniture];
                    IID.redprint = IID.building;
                    IID.blueprint = IID.building;
                    IID.xCenter = nVWnV;
                    IID.yCenter = nVWnV;
                }
                var angle = Mouse.angle;
                var Rot = (IID.wall === 1) ? 0 : World.PLAYER.buildRotate;
                World.PLAYER.jBuild = World.PLAYER._j + window.Math.floor((__TILE_SIZE2__ + (window.Math.cos(angle) * __TILE_SIZE__)) / __TILE_SIZE__);
                World.PLAYER.iBuild = World.PLAYER._i + window.Math.floor((__TILE_SIZE2__ + (window.Math.sin(angle) * __TILE_SIZE__)) / __TILE_SIZE__);
                var WX = ((IID.xCenter[Rot] + vertst) + __TILE_SIZE2__) + (__TILE_SIZE__ * World.PLAYER.jBuild);
                var WY = ((IID.yCenter[Rot] + horist) + __TILE_SIZE2__) + (__TILE_SIZE__ * World.PLAYER.iBuild);
                if ((((World.PLAYER.jBuild >= 0) && (World.PLAYER.iBuild >= 0)) && (World.PLAYER.jBuild < NMv)) && (World.PLAYER.iBuild < wWw)) {
                    var VMV = matrix[World.PLAYER.iBuild][World.PLAYER.jBuild];
                    var team = (World.PLAYER.team === -1) ? -2 : World.PLAYER.team;
                    if ((VMV.NMn === frameId) && (((IID.zid !== 2) || (VMV.wMV === 0)) || (VMV.category === SKILLS.__PLANT__))) {
                        World.PLAYER.canBuild = 1; // before 0
                        CanvasUtils.drawImageHd(IID.redprint, WX, WY, Rot * PIby2, 0, 0, 1);
                    } else if ((((IID.detail.category === SKILLS.__PLANT__) || (IID.zid === 2)) || (((VMV.pid !== 0) && (VMV.pid !== World.PLAYER.id)) && (World.players[VMV.pid].team !== team))) && (VMV.nNNwM === frameId)) {
                        World.PLAYER.canBuild = 0;
                        CanvasUtils.drawImageHd(IID.redprint, WX, WY, Rot * PIby2, 0, 0, 1);
                    } else if ((IID.iTile !== window.undefined) && ((((Rot % 2) === 0) && ((((((World.PLAYER.iBuild < 1) || (World.PLAYER.iBuild >= (wWw - 1))) || (matrix[World.PLAYER.iBuild + 1][World.PLAYER.jBuild].NMn === frameId)) || ((matrix[World.PLAYER.iBuild + 1][World.PLAYER.jBuild].nNNwM === frameId) && (((matrix[World.PLAYER.iBuild + 1][World.PLAYER.jBuild].pid !== World.PLAYER.id) && (matrix[World.PLAYER.iBuild + 1][World.PLAYER.jBuild].pid !== 0)) && (World.players[matrix[World.PLAYER.iBuild + 1][World.PLAYER.jBuild].pid].team !== team)))) || (matrix[World.PLAYER.iBuild - 1][World.PLAYER.jBuild].NMn === frameId)) || ((matrix[World.PLAYER.iBuild - 1][World.PLAYER.jBuild].nNNwM === frameId) && (((matrix[World.PLAYER.iBuild - 1][World.PLAYER.jBuild].pid !== World.PLAYER.id) && (matrix[World.PLAYER.iBuild - 1][World.PLAYER.jBuild].pid !== 0)) && (World.players[matrix[World.PLAYER.iBuild - 1][World.PLAYER.jBuild].pid].team !== team))))) || (((Rot % 2) === 1) && (((((((World.PLAYER.jBuild < 1) || (World.PLAYER.jBuild >= (NMv - 1))) || (matrix[World.PLAYER.iBuild][World.PLAYER.jBuild + 1].NMn === frameId)) || ((matrix[World.PLAYER.iBuild][World.PLAYER.jBuild + 1].nNNwM === frameId) && (((matrix[World.PLAYER.iBuild][World.PLAYER.jBuild + 1].pid !== World.PLAYER.id) && (matrix[World.PLAYER.iBuild][World.PLAYER.jBuild + 1].pid !== 0)) && (World.players[matrix[World.PLAYER.iBuild][World.PLAYER.jBuild + 1].pid].team !== team)))) || (matrix[World.PLAYER.iBuild][World.PLAYER.jBuild - 1].NMn === frameId)) || ((matrix[World.PLAYER.iBuild][World.PLAYER.jBuild - 1].nNNwM === frameId) && (((matrix[World.PLAYER.iBuild][World.PLAYER.jBuild - 1].pid !== World.PLAYER.id) && (matrix[World.PLAYER.iBuild][World.PLAYER.jBuild - 1].pid !== 0)) && (World.players[matrix[World.PLAYER.iBuild][World.PLAYER.jBuild - 1].pid].team !== team)))) || (World.PLAYER._i === World.PLAYER.iBuild))))) {
                        World.PLAYER.canBuild = 0;
                        CanvasUtils.drawImageHd(IID.redprint, WX, WY, Rot * PIby2, 0, 0, 1);
                    } else {
                        World.PLAYER.canBuild = 1;
                        CanvasUtils.drawImageHd(IID.blueprint, WX, WY, Rot * PIby2, 0, 0, 1);
                    }
                }
                if (hintRotate.isLoaded !== 1) {
                    hintRotate = CanvasUtils.loadImage(hintrotate, hintRotate);
                    return;
                }
                if ((IID.wall === 1) || (World.PLAYER.interaction >= 0)) nwmVM = window.Math.max(0, World.PLAYER.hintRotate - delta);
                else nwmVM = window.Math.min(900, World.PLAYER.hintRotate + delta);
            } else nwmVM = window.Math.max(0, World.PLAYER.hintRotate - delta);
            if (nwmVM > 0) {
                ctx.globalAlpha = MathUtils.Ease.outQuad(window.Math.max(0, nwmVM - 600) / 300);
                var imgMovement = scaleby + (WvmnV * scaleby);
                var vNwMN = imgMovement / scaleby;
                var SY = (scaleby * hintRotate.width) / 2;
                var SX = (scaleby * hintRotate.height) / 2;
                ctx.drawImage(hintRotate, ((vertst + NmM) * scaleby) - (SY / 2), window.Math.max(10 * scaleby, ((((horist + WWV) * scaleby) - (SX / 2)) - (65 * scaleby)) - (60 * scaleby)), SY, SX);
                ctx.globalAlpha = 1;
            }
            World.PLAYER.hintRotate = nwmVM;
        };

        function nwMNv(mVn, weapon, wVn, player, imgMovement, WX, WY) {
            var PLAYER = World.players[player.pid];
            var WMW = 0;
            var repellent = PLAYER.repellent - Render.globalTime;
            var withdrawal = PLAYER.withdrawal - Render.globalTime;
            if (repellent > 0) {
                if (withdrawal > 0) WMW = 3;
                else if (PLAYER.withdrawal > 0) WMW = 5;
                else WMW = 1;
            } else if (withdrawal > 0) WMW = 2;
            else if (PLAYER.withdrawal > 0) WMW = 4;
            var skin = mVn.skins[WMW];
            var nmm = 0;
            var NNM = 0;
            var NWW = 0;
            var wnN = 0;
            if (player.hit > 0) {
                player.hit = window.Math.max(0, player.hit - delta);
                player.hit = window.Math.min(player.hit, weapon.delay);
                vW = (player.hit > weapon.impactClient) ? (1 - ((player.hit - weapon.impactClient) / (weapon.delay - weapon.impactClient))) : (player.hit / weapon.impactClient);
                nmm = (PLAYER.punch * MathUtils.Ease.inOutQuad(vW)) * 0.55;
                wnN = vW * 3;
                if (PLAYER.punch === 1) NNM = vW * 25;
                else NWW = vW * 25;
                if (player.hit === 0) PLAYER.punch *= -1;
            } else if (Math2d.fastDist(player.x, player.y, player.nx, player.ny) < 1) {
                PLAYER.breath = (PLAYER.breath + delta) % 1500;
                if (PLAYER.move !== 0) {
                    if (PLAYER.move < 400) PLAYER.move = 800 - PLAYER.move;
                    PLAYER.move = PLAYER.move + delta;
                    if (PLAYER.move > 800) PLAYER.move = 0;
                }
            } else {
                if (player.speed > ENTITIES[__ENTITIE_PLAYER__].speed) PLAYER.move = PLAYER.move + (delta * 1.9);
                else PLAYER.move = PLAYER.move + delta;
                if (PLAYER.move > 800) {
                    PLAYER.orientation *= -1;
                    PLAYER.move = PLAYER.move % 800;
                }
                if (PLAYER.breath !== 0) {
                    if (PLAYER.breath < 750) PLAYER.breath = 1500 - PLAYER.breath;
                    PLAYER.breath = PLAYER.breath + delta;
                    if (PLAYER.breath > 1500) PLAYER.breath = 0;
                }
            }
            var breath = weapon.breath * ((PLAYER.breath < 750) ? (PLAYER.breath / 750) : (1 - ((PLAYER.breath - 750) / 750)));
            var move = weapon.move * ((PLAYER.move < 400) ? (PLAYER.move / 400) : (1 - ((PLAYER.move - 400) / 400)));
            var NwM = weapon.rightArm;
            var MVn = (wVn.rightArm === window.undefined) ? skin.rightArm : wVn.rightArm;
            CanvasUtils.drawImageHd(MVn, WX, WY, ((NwM.angle + player.angle) + breath) + nmm, (NwM.x + (move * PLAYER.orientation)) + NWW, NwM.y, imgMovement);
            NwM = weapon.leftArm;
            MVn = (wVn.leftArm === window.undefined) ? skin.leftArm : wVn.leftArm;
            CanvasUtils.drawImageHd(MVn, WX, WY, ((-NwM.angle + player.angle) - breath) + nmm, (NwM.x - (move * PLAYER.orientation)) + NNM, NwM.y, imgMovement);
            if (player.hurt2 > 0) {
                var mnM = 1;
                player.hurt2 -= delta;
                var vW = 0;
                if (player.hurt2 > 150) vW = MathUtils.Ease.inQuad((300 - player.hurt2) / 300);
                else {
                    vW = MathUtils.Ease.outQuad(player.hurt2 / 150);
                    mnM += (1 - vW) * 0.2;
                }
                ctx.globalAlpha = window.Math.min(1, window.Math.max(0, vW));
                CanvasUtils.drawImageHd(mVn.food, WX, WY, player.angle + (nmm / 1.5), wnN, 0, mnM);
                ctx.globalAlpha = 1;
            }
            if (player.hurt > 0) {
                var mnM = 1;
                player.hurt -= delta;
                var vW = 0;
                if (player.hurt > 150) vW = MathUtils.Ease.inQuad((300 - player.hurt) / 300);
                else {
                    vW = MathUtils.Ease.outQuad(player.hurt / 150);
                    mnM += (1 - vW) * 0.2;
                }
                WX += (window.Math.cos(player.hurtAngle) * vW) * 3;
                WY += (window.Math.sin(player.hurtAngle) * vW) * 3;
                ctx.globalAlpha = window.Math.min(1, window.Math.max(0, vW));
                CanvasUtils.drawImageHd(mVn.hurt, WX, WY, player.angle + (nmm / 1.5), wnN, 0, mnM);
                ctx.globalAlpha = 1;
            }
            if (player.heal > 0) {
                var mnM = 1;
                player.heal -= delta;
                if (player.heal > 150) ctx.globalAlpha = window.Math.min(1, window.Math.max(0, MathUtils.Ease.inQuad((300 - player.heal) / 300)));
                else {
                    var vW = MathUtils.Ease.outQuad(player.heal / 150);
                    mnM += (1 - vW) * 0.2;
                    ctx.globalAlpha = window.Math.min(1, window.Math.max(0, vW));
                }
                CanvasUtils.drawImageHd(mVn.heal, WX, WY, player.angle + (nmm / 1.5), wnN, 0, mnM);
                ctx.globalAlpha = 1;
            }
            CanvasUtils.drawImageHd(skin.head, WX, WY, player.angle + (nmm / 1.5), wnN, 0, imgMovement);
            if (wVn.head !== window.undefined) CanvasUtils.drawImageHd(wVn.head, WX, WY, player.angle + (nmm / 1.5), wnN, 0, imgMovement);
        };

        function creaturesinscreenfunc(player) {
            var mnn = AI[player.extra & 15];
            matrix[player.i][player.j].NMn = frameId;
            matrix[player.i][player.j].wMV = player.pid;
            matrix[player.i][player.j].category = window.undefined;
            var imgMovement = 1;
            var WX = vertst + player.x;
            var WY = horist + player.y;
            if (player.removed !== 0) {
                player.death += delta;
                var vW = MathUtils.Ease.outQuart(1 - ((player.death - 500) / 400));
                ctx.globalAlpha = window.Math.min(window.Math.max(0, vW), 1);
                CanvasUtils.drawImageHd(mnn.death, WX, WY, player.angle, 0, 0, 1);
                vW = MathUtils.Ease.outQuart(1 - (player.death / 400));
                imgMovement = window.Math.min(1 + (0.5 * (1 - vW)), 1.5);
                ctx.globalAlpha = window.Math.max(0, vW);
            }
            if ((player.extra & 16) === 16) {
                player.extra &= ~16;
                player.hurt = 250;
                player.hurtAngle = (WNVNM * ((player.extra >> 5) & 31)) / 31;
            }
            mnn.draw(mnn, player, WX, WY, imgMovement);
            if (player.removed !== 0) {
                if (player.death > 900) player.removed = 2;
                ctx.globalAlpha = 1;
            }
        };

        function playerinscreenfunc(player) {
            matrix[player.i][player.j].NMn = frameId;
            matrix[player.i][player.j].wMV = player.pid;
            matrix[player.i][player.j].category = window.undefined;
            var mVn = ENTITIES[__ENTITIE_PLAYER__];
            var MNmnm = (player.extra >> 8) & 255;
            var weapon = mVn.weapons[MNmnm];
            var wVn = mVn.clothes[player.extra & 255];
            var imgMovement = 1;
            var Vmwnn = player.state & 254;
            var WX = vertst + player.x;
            var WY = horist + player.y;
            if (player.removed !== 0) {
                player.death += delta;
                var vW = MathUtils.Ease.outQuart(1 - ((player.death - 500) / 400));
                ctx.globalAlpha = window.Math.min(window.Math.max(0, vW), 1);
                CanvasUtils.drawImageHd(mVn.death, WX, WY, player.angle, 0, 0, 1);
                vW = MathUtils.Ease.outQuart(1 - (player.death / 400));
                imgMovement = window.Math.min(1 + (0.5 * (1 - vW)), 1.5);
                ctx.globalAlpha = window.Math.max(0, vW);
            }
            if (Vmwnn === 2) {
                player.state &= 65281;
                if (AudioUtils._fx.shot[MNmnm] !== 0) {
                    var VVmnw = window.Math.floor(window.Math.random() * weapon.soundLen);
                    AudioUtils.playFx(AudioUtils._fx.shot[MNmnm][VVmnw], weapon.soundVolume, Math2d.dist(World.PLAYER.x, World.PLAYER.y, player.x, player.y) / 4, weapon.soundDelay);
                }
                if (player.hit <= 0) {
                    player.hit = weapon.delay;
                    player.hitMax = weapon.delay;
                }
            } else if (Vmwnn === 6) player.state &= 65281;
            switch (weapon.type) {
                case 0:
                    nwMNv(mVn, weapon, wVn, player, imgMovement, WX, WY);
                    break;
                case 1:
                    mvwMm(mVn, weapon, wVn, player, imgMovement, WX, WY);
                    break;
                case 2:
                    vwVWm(mVn, weapon, wVn, player, imgMovement, WX, WY);
                    break;
                case 3:
                    mWNvw(mVn, weapon, wVn, player, imgMovement, WX, WY);
                    break;
                case 4:
                    WVVmN(mVn, weapon, wVn, player, imgMovement, WX, WY);
                    break;
                case 5:
                    Wvmnw(mVn, weapon, wVn, player, imgMovement, WX, WY);
                    break;
                case 6:
                    mmmMw(mVn, weapon, wVn, player, imgMovement, WX, WY);
                    break;
            }
            if (player.removed !== 0) {
                if (player.death > 900) player.removed = 2;
                ctx.globalAlpha = 1;
            }
        };
        
        function _Interaction() {
            if (World.PLAYER.ghoul !== 0) return;
            var timer = World.PLAYER.wrongToolTimer;
            if (timer > 0) {
                if (timer < 500) ctx.globalAlpha = MathUtils.Ease.inQuad(timer / 500);
                else if (timer > 1500) ctx.globalAlpha = MathUtils.Ease.inQuad(1 - ((timer - 1500) / 500));
                else ctx.globalAlpha = 1;
                var tool = (World.PLAYER.wrongTool === 1) ? vwnWv : LOOT[items[World.PLAYER.wrongTool].loot];
                CanvasUtils.drawImageHd(wrongTool, canw2ns, 50, 0, 0, 0, 1);
                CanvasUtils.drawImageHd(tool, canw2ns, 50, 0, 0, 0, 1);
                ctx.globalAlpha = 1;
                World.PLAYER.wrongToolTimer -= delta;
            }
            var interaction = World.PLAYER.interaction;
            switch (interaction) {
                case 0:
                    if (nMWVv.isLoaded !== 1) {
                        if (isTouchScreen === 0) nMWVv = CanvasUtils.loadImage(looticon, nMWVv);
                        else nMWVv = CanvasUtils.loadImage(lootmobileicon, nMWVv);
                        return;
                    }
                    var imgMovement = scaleby + (WvmnV * scaleby);
                    var vNwMN = imgMovement / scaleby;
                    var scalex = (scaleby * nMWVv.width) / 2;
                    var scaley = (scaleby * nMWVv.height) / 2;
                    var posx = ((vertst + NmM) * imgMovement) - (scalex / 2);
                    var posy = window.Math.max(10 * scaleby, ((((horist + WWV) * imgMovement) - (scaley / 2)) - (65 * imgMovement)) - (60 * scaleby));
                    if (isTouchScreen === 1) {
                        Game.mNNwM = posx;
                        Game.nNwMM = posy;
                        Game.vwVnW = scalex;
                        Game.mnNnW = scaley;
                    }
                    ctx.drawImage(nMWVv, posx, posy, scalex, scaley);
                    var loot = LOOT[World.PLAYER.loot];
                    posx = ((vertst + NmM) * vNwMN) - (scalex / (2 * scaleby));
                    posy = window.Math.max(10, ((((horist + WWV) * vNwMN) - (scaley / (2 * scaleby))) - (65 * vNwMN)) - 60);
                    CanvasUtils.drawImageHd(loot, posx + 77, posy + 33, loot.angle, 0, 0, loot.scale);
                    break;
                case 1:
                    var vW = World.PLAYER.interactionDelay / World.PLAYER.interactionWait;
                    var delay = World.PLAYER.interactionWait - World.PLAYER.interactionDelay;
                    World.PLAYER.interactionDelay -= delta;
                    if (World.PLAYER.interactionDelay < 0) {
                        World.PLAYER.interaction = -1;
                        return;
                    }
                    if (useTimer.isLoaded !== 1) {
                        useTimer = CanvasUtils.loadImage(timericon, useTimer);
                        return;
                    }
                    if (arrow.isLoaded !== 1) {
                        arrow = CanvasUtils.loadImage(timerarrow, arrow);
                        return;
                    }
                    if (lights.isLoaded !== 1) {
                        lights = CanvasUtils.loadImage(timerlights, lights);
                        return;
                    }
                    var imgMovement = scaleby + (WvmnV * scaleby);
                    var scalex = (scaleby * useTimer.width) / 2;
                    var scaley = (scaleby * useTimer.height) / 2;
                    var _x = (vertst + NmM) * imgMovement;
                    var _y = (horist + WWV) * imgMovement;
                    var posx = _x - (scalex / 2);
                    var posy = window.Math.max(10 * imgMovement, ((_y - (scaley / 2)) - (65 * imgMovement)) - (60 * scaleby));
                    if (delay < 100) ctx.globalAlpha = delay / 100;
                    else if (World.PLAYER.interactionDelay < 100) ctx.globalAlpha = World.PLAYER.interactionDelay / 100;
                    ctx.drawImage(useTimer, posx, posy, scalex, scaley); 
                    ctx.save();
                    ctx.translate(_x, window.Math.max((10 * imgMovement) + (scaley / 2), (_y - (65 * imgMovement)) - (60 * scaleby)));
                    ctx.rotate(-WNVNM * vW);
                    ctx.drawImage(arrow, -scalex / 2, -scaley / 2, scalex, scaley);
                    ctx.restore();
                    ctx.drawImage(lights, posx, posy, scalex, scaley);
                    ctx.globalAlpha = 1;
                    break;
                case 2:
                    var W = World.PLAYER.eInteract.W;
                    if (W.isLoaded !== 1) {
                        if (isTouchScreen === 0) World.PLAYER.eInteract.W = CanvasUtils.loadImage(World.PLAYER.eInteract.src, W);
                        else World.PLAYER.eInteract.W = CanvasUtils.loadImage(World.PLAYER.eInteract.src.replace("e-", "e-isTouchScreen-"), W);
                        return;
                    }
                    var imgMovement = scaleby + (WvmnV * scaleby);
                    var scalex = (scaleby * W.width) / 2;
                    var scaley = (scaleby * W.height) / 2;
                    var posx;
                    if (World.PLAYER.extraLoot === 1) posx = (((vertst + NmM) - 5) * imgMovement) - scalex;
                    else posx = ((vertst + NmM) * imgMovement) - (scalex / 2);
                    var posy = window.Math.max(10 * scaleby, ((((horist + WWV) * imgMovement) - (scaley / 2)) - (65 * imgMovement)) - (60 * scaleby));
                    if (isTouchScreen === 1) {
                        Game.mNNwM = posx;
                        Game.nNwMM = posy;
                        Game.vwVnW = scalex;
                        Game.mnNnW = scaley;
                    }
                    ctx.drawImage(W, posx, posy, scalex, scaley);
                    if (World.PLAYER.extraLoot === 1) {
                        if (VWvVN.isLoaded !== 1) {
                            if (isTouchScreen === 0) VWvVN = CanvasUtils.loadImage(loot2icon, VWvVN);
                            else VWvVN = CanvasUtils.loadImage(lootmobileicon, nMWVv);
                            return;
                        }
                        var vNwMN = imgMovement / scaleby;
                        scalex = (scaleby * VWvVN.width) / 2;
                        scaley = (scaleby * VWvVN.height) / 2;
                        posx += scalex + (10 * scaleby);
                        posy = window.Math.max(10 * scaleby, ((((horist + WWV) * imgMovement) - (scaley / 2)) - (65 * imgMovement)) - (60 * scaleby));
                        if (isTouchScreen === 1) {
                            Game.mmNWn = posx;
                            Game.vmwNV = posy;
                        }
                        ctx.drawImage(VWvVN, posx, posy, scalex, scaley);
                        var loot = LOOT[World.PLAYER.loot];
                        posx = ((vertst + NmM) * vNwMN) + 5;
                        posy = window.Math.max(10, ((((horist + WWV) * vNwMN) - (scaley / (2 * scaleby))) - (65 * vNwMN)) - 60);
                        CanvasUtils.drawImageHd(loot, posx + 77, posy + 33, loot.angle, 0, 0, loot.scale);
                    }
                    break;
            }
        };
        var nMVNv = 0;
        var WvWmM = 0;
        var VwmMm = {
            id: -1,
            uid: -1
        };

        function vNwNM(player, Wn, dist, amount) {
            if ((NwMVW === vMNWw) || (Wn === PARTICLESID.__NOTHING__)) return;
            else if (NwMVW === nWNMn) amount *= 3;
            if ((Entitie.border[__ENTITIE_PARTICLES__].border + amount) >= wnNWM) return;
            for (var i = 0; i < amount; i++) {
                var N = window.Math.random();
                var angle = ((N * 10) % 1) * WNVNM;
                var MMwmm = dist + (((N * 10000) % 1) * 25);
                dist += 8;
                WvWmM = (WvWmM + 1) % wnNWM;
                var wmWnw = WvWmM + Entitie.maxUnitsMaster;
                nMVNv += 1;
                var particle = Entitie.get(0, wmWnw, nMVNv, __ENTITIE_PARTICLES__);
                setEntitie(particle, 0, nMVNv, wmWnw, __ENTITIE_PARTICLES__, player.px, player.py, player.px + (window.Math.cos(angle) * MMwmm), player.py + (window.Math.sin(angle) * MMwmm), window.Math.floor(N * PARTICLES[Wn].length), ((N * 100) % 1) * 255, Wn);
            }
        };

        function mWNvV(player) {
            var W = PARTICLES[player.state][player.extra];
            if (player.death > 0) {
                player.death = window.Math.min(1, player.death + (delta / 500));
                ctx.globalAlpha = 1 - player.death;
                CanvasUtils.drawImageHd(W, vertst + player.x, horist + player.y, player.angle, 0, 0, 1);
                ctx.globalAlpha = 1;
                if (player.death === 1) {
                    VwmMm.id = player.id;
                    VwmMm.uid = player.uid;
                }
                return;
            } else if (Math2d.fastDist(player.x, player.y, player.nx, player.ny) < 0.01) player.death = 0.001;
            CanvasUtils.drawImageHd(W, vertst + player.x, horist + player.y, player.angle, 0, 0, 1);
        };

        function _Dynamite(IID, player, WX, WY, Rot, imgMovement) {
            player.breath = (player.breath + delta) % 500;
            var vW = player.breath / 500;
            var mnM = 0.95 + (0.3 * MathUtils.Ease.inOutQuad(vW));
            ctx.globalAlpha = 1 - vW;
            CanvasUtils.drawImageHd(IID.building[1], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, mnM);
            ctx.globalAlpha = 1;
            CanvasUtils.drawImageHd(IID.building[0], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
        };


        function _Spike(IID, player, WX, WY, Rot, imgMovement) {
            var isInClan = 0;
            var VmnmV = 1;
            if ((player.state & 16) === 16) VmnmV = 0;
            if (((player.pid === World.PLAYER.id) || (((World.PLAYER.team !== -1) && (World.PLAYER.team === World.players[player.pid].team)) && (World.players[player.pid].teamUid === World.teams[World.PLAYER.team].uid))) || (Math2d.fastDist(NmM, WWV, player.x, player.y) < 52000)) isInClan = 1;
            if (VmnmV === 0) {
                if (player.hurt2 === 0) vNwNM(player, IID.particles, IID.particlesDist, 5);
                if (player.hurt2 < 300) {
                    WX += (window.Math.random() * 6) - 4;
                    WY += (window.Math.random() * 6) - 4;
                    player.hurt2 += delta;
                }
                if (player.breath > 0) {
                    player.breath = window.Math.max(0, player.breath - (delta / 5));
                    ctx.globalAlpha = MathUtils.Ease.inOutQuad(player.breath / 300);
                    CanvasUtils.drawImageHd(IID.hidden[player.id % 3], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
                    ctx.globalAlpha = 1;
                }
                CanvasUtils.drawImageHd(IID.deployed[player.id % 3], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
            } else if (isInClan === 1) {
                if (player.breath === 300) CanvasUtils.drawImageHd(IID.hidden[player.id % 3], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
                else {
                    player.breath = window.Math.min(300, player.breath + delta);
                    ctx.globalAlpha = MathUtils.Ease.inOutQuad(player.breath / 300);
                    CanvasUtils.drawImageHd(IID.hidden[player.id % 3], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
                    ctx.globalAlpha = 1;
                }
            } else if ((isInClan === 0) && (player.breath > 0)) {
                player.breath = window.Math.max(0, player.breath - (delta / 5));
                ctx.globalAlpha = MathUtils.Ease.inOutQuad(player.breath / 300);
                CanvasUtils.drawImageHd(IID.hidden[player.id % 3], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
                ctx.globalAlpha = 1;
            }
        };
        
        function _HiddenBuilding(IID, player, WX, WY, Rot, imgMovement) {
            CanvasUtils.drawImageHd(IID.building, (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
        };

        function _Landmine(IID, player, WX, WY, Rot, imgMovement) {
            var isInClan = 0;
            if (((player.pid === World.PLAYER.id) || (((World.PLAYER.team !== -1) && (World.PLAYER.team === World.players[player.pid].team)) && (World.players[player.pid].teamUid === World.teams[World.PLAYER.team].uid))) || (Math2d.fastDist(NmM, WWV, player.x, player.y) < 52000)) isInClan = 1;
            if (isInClan === 1) {
                player.breath = window.Math.min(300, player.breath + delta);
                ctx.globalAlpha = MathUtils.Ease.inOutQuad(player.breath / 300);
                CanvasUtils.drawImageHd(IID.building[player.id % 3], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
                ctx.globalAlpha = 0.2;
                CanvasUtils.drawImageHd(LIGHTFIRE[5], (vertst + player.x) + WX, (horist + player.y) + WY, 0, 0, 0, 0.6);
                ctx.globalAlpha = 1;
            }

            else if (isInClan === 0) {
                player.breath = window.Math.min(300, player.breath + delta);
                ctx.globalAlpha = MathUtils.Ease.inOutQuad(player.breath / 300);
                CanvasUtils.drawImageHd(IID.building[player.id % 3], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);

                ctx.globalAlpha = 0.2;
                CanvasUtils.drawImageHd(LIGHTFIRE[4], (vertst + player.x) + WX, (horist + player.y) + WY, 0, 0, 0, 0.6);
                ctx.globalAlpha = 1; 

            }    
        };

        function _DefaultBuilding(IID, player, WX, WY, Rot, imgMovement) {
            CanvasUtils.drawImageHd(IID.building, (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
        };

        function _Breakable(IID, player, WX, WY, Rot, imgMovement) {
            CanvasUtils.drawImageHd(IID.building[player.broke], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
        };

        function _Wall(IID, player, WX, WY, Rot, imgMovement) {
            if (player.broke > 0) CanvasUtils.drawImageHd(IID.broken[player.broke - 1], (vertst + player.x) + WX, (horist + player.y) + WY, 0, 0, 0, imgMovement);
            else CanvasUtils.drawImageHd(IID.building[WwmwN(player)], (vertst + player.x) + WX, (horist + player.y) + WY, 0, 0, 0, imgMovement);
        };

        function nearme(IID, player, MMwnn) {
            if ((((player.removed === 0) && (World.PLAYER.interaction !== 1)) && (World.PLAYER.isInBuilding !== 1)) && (((MMwnn === 0) || (player.pid === World.PLAYER.id)) || (((World.PLAYER.team !== -1) && (World.PLAYER.team === World.players[player.pid].team)) && (World.players[player.pid].teamUid === World.teams[World.PLAYER.team].uid)))) {
                var dist = Math2d.fastDist(NmM, WWV, player.x, player.y);
                if (dist < vnVmM) {
                    World.PLAYER.packetId = IID.packetId;
                    World.PLAYER.buildingId = player.id;
                    World.PLAYER.buildingPid = player.pid;
                    World.PLAYER.buildingArea = IID.area;
                    vnVmM = dist;
                    if (World.PLAYER.interaction === 0) World.PLAYER.extraLoot = 1;
                    World.PLAYER.interaction = 2;
                    World.PLAYER.eInteract = IID.interact;
                    return 1;
                }
            }
            return 0;
        };

        function _Construction(IID, player, WX, WY, Rot, imgMovement) {
            CanvasUtils.drawImageHd(IID.builder, (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, 1);
            var level = (player.state >> 4) & 15;
            if (player.breath2 !== level) {
                player.breath2 = level;
                player.breath = 0;
            }
            player.breath = player.breath + delta;
            player.heal = (player.heal + delta) % 1000;
            var imgMovement = 1 + (0.03 * ((player.heal < 500) ? (player.heal / 500) : (1 - ((player.heal - 500) / 500))));
            if (level === 0) {
                ctx.globalAlpha = MathUtils.Ease.inOutQuad(player.breath / IID.evolve);
                CanvasUtils.drawImageHd(IID.building[0], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
                ctx.globalAlpha = 1;
            } else if (player.breath < IID.evolve) {
                var MwMvw = MathUtils.Ease.inOutQuad(player.breath / IID.evolve);
                ctx.globalAlpha = 1 - MwMvw;
                CanvasUtils.drawImageHd(IID.building[level - 1], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
                ctx.globalAlpha = MwMvw;
                CanvasUtils.drawImageHd(IID.building[level], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
                ctx.globalAlpha = 1;
            } else CanvasUtils.drawImageHd(IID.building[level], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
        };

        function _TreeSeed(IID, player, WX, WY, Rot, imgMovement) {
            var level = (player.state >> 4) & 15;
            player.breath = (player.breath + delta) % 1000;
            var imgMovement = 1 + (0.01 * ((player.breath < 500) ? (player.breath / 500) : (1 - ((player.breath - 500) / 500))));
            CanvasUtils.drawImageHd(IID.building[level], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
        };

        function _OrangeSeed(IID, player, WX, WY, Rot, imgMovement) {
            var level = (player.state >> 4) & 15;
            player.breath = (player.breath + delta) % 1000;
            var imgMovement = 1 + (0.03 * ((player.breath < 500) ? (player.breath / 500) : (1 - ((player.breath - 500) / 500))));
            CanvasUtils.drawImageHd(IID.building[level], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
        };

        function _LowWall(IID, player, WX, WY, Rot, imgMovement) {
            var WVV = (player.broke > 0) ? IID.broken[player.broke - 1] : IID.building[wmNMv(player, Rot)];
            var W = WVV.W;
            if (W.isLoaded !== 1) {
                WVV.W = CanvasUtils.loadImage(WVV.src, WVV.W);
                return;
            }
            var VwW = ((scaleby * W.width) / 2) * imgMovement;
            var h = ((scaleby * W.height) / 2) * imgMovement;
            ctx.save();
            ctx.translate(scaleby * ((vertst + player.x) + WX), scaleby * ((horist + player.y) + WY));
            ctx.rotate(Rot * PIby2);
            ctx.translate((IID.xRotate * scaleby) - (VwW / 2), (IID.yRotate * scaleby) - (h / 2));
            ctx.drawImage(W, -IID.xRotate * scaleby, -IID.yRotate * scaleby, VwW, h);
            ctx.restore();
        };

        function _AutomaticDoor(IID, player, WX, WY, Rot, imgMovement) {
            ctx.globalAlpha = 1;
            var MvVvv = (player.state >> 7) & 1;
            if (MvVvv === 1) player.hitMax = window.Math.min(500, player.hitMax + delta);
            else if (player.hitMax > 0) player.hitMax = window.Math.max(0, player.hitMax - delta);
            if ((player.hitMax > 0) && (player.hitMax !== 500)) {
                ctx.globalAlpha = MathUtils.Ease.outQuad(player.hitMax / 500);
                CanvasUtils.drawImageHd(IID.building[1][player.broke], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
                ctx.globalAlpha = MathUtils.Ease.outQuad(1 - (player.hitMax / 500));
                CanvasUtils.drawImageHd(IID.building[0][player.broke], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
                ctx.globalAlpha = 1;
            } else CanvasUtils.drawImageHd(IID.building[MvVvv][player.broke], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
        };

    function _SwitchOff(IID, player, WX, WY, Rot, imgMovement) {
        nearme(IID, player, 0);
        CanvasUtils.drawImageHd(IID.building[(player.state >> 4) & 1], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
            var WY = scaleby * (((player.i * 100) + horist) + 50);
            var WX = scaleby * (((player.j * 100) + vertst) + 50);
            var SY = (imgMovement * arv.width) / 3;
            var SX = (imgMovement * arv.height) / 3;

            butlabel = GUI.renderText(player.id, "'Viga', sans-serif", "#FFFFFF", 38, 400, window.undefined, 16, 25, window.undefined, window.undefined, window.undefined, window.undefined, "#000000", 12);
            ctx.drawImage(butlabel, WX - (SY / 2), WY - (SX / 2), SY, SX);
    };

        function _TimerGate(IID, player, WX, WY, Rot, imgMovement) {
            nearme(IID, player, 0);
            CanvasUtils.drawImageHd(IID.building[(player.state >> 4) & 3], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
        };

        function _Lamp(IID, player, WX, WY, Rot, imgMovement) {
            nearme(IID, player, 0);
            var light = (player.state >> 7) & 1;
            if (light === 1) player.hitMax = window.Math.min(500, player.hitMax + delta);
            else if (player.hitMax > 0) player.hitMax = window.Math.max(0, player.hitMax - delta);
            if (player.hitMax > 0) {
                WvnvV[pplonscr++] = player;
                CanvasUtils.drawImageHd(IID.buildingOn[(player.state >> 4) & 7], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
            } else CanvasUtils.drawImageHd(IID.building, (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
        };

        function _LampLight(player) {
            var IID = items[player.extra >> 7];
            ctx.globalAlpha = MathUtils.Ease.outQuad(player.hitMax / 500);
            player.breath2 = (player.breath2 + delta) % 5000;
            var breath = player.breath2;
            var imgMovement = 1 + (0.09 * ((breath < 2500) ? (breath / 2500) : (1 - ((breath - 2500) / 2500))));
            CanvasUtils.drawImageHd(IID.buildingTop[(player.state >> 4) & 7], vertst + player.x, horist + player.y, 0, 0, 0, imgMovement);
            ctx.globalAlpha = 1;
        };
        

        function _Door(IID, player, WX, WY, Rot, imgMovement) {
            var NVNvv = (player.state >> 4) & 1;
            var MWwVn = (player.pid === 0) ? 0 : 1;
            if ((nearme(IID, player, MWwVn) === 1) && (NVNvv === 1)) World.PLAYER.eInteract = IID.mMnmM;
            if (player.hit !== NVNvv) {
                player.hitMax = 500;
                player.hit = NVNvv;
            }
            if (player.hitMax > 0) player.hitMax = window.Math.max(0, player.hitMax - delta);
            var angle = IID.angle;
            if (NVNvv === 0) angle *= MathUtils.Ease.inOutQuad(player.hitMax / 500);
            else angle *= MathUtils.Ease.inOutQuad(1 - (player.hitMax / 500));
            var WVV = (player.broke > 0) ? IID.broken[player.broke - 1] : IID.building;
            var W = WVV.W;
            if (W.isLoaded !== 1) {
                WVV.W = CanvasUtils.loadImage(WVV.src, WVV.W);
                return;
            }
            var VwW = ((scaleby * W.width) / 2) * imgMovement;
            var h = ((scaleby * W.height) / 2) * imgMovement;
            ctx.save();
            ctx.translate(scaleby * ((vertst + player.x) + WX), scaleby * ((horist + player.y) + WY));
            ctx.rotate(Rot * PIby2);
            ctx.translate((IID.xRotate * scaleby) - (VwW / 2), (IID.yRotate * scaleby) - (h / 2));
            ctx.rotate(angle);
            ctx.drawImage(W, -IID.xRotate * scaleby, -IID.yRotate * scaleby, VwW, h);
            ctx.restore();
            if ((player.state & 32) === 32) {
                player.state -= 32;
                if (((player.breath === 0) && (WX === 0)) && (WY === 0)) player.breath = 600;
            }
            if (player.breath > 0) {
                if (arv.isLoaded !== 1) {
                    arv = CanvasUtils.loadImage(useicon, arv);
                    return;
                }
                if (player.breath > 400) ctx.globalAlpha = MathUtils.Ease.outQuad(1 - ((player.breath - 400) / 200));
                else if (player.breath < 200) ctx.globalAlpha = MathUtils.Ease.outQuad(player.breath / 200);
                var WY = scaleby * (((player.i * __TILE_SIZE__) + horist) + __TILE_SIZE2__);
                var WX = scaleby * (((player.j * __TILE_SIZE__) + vertst) + __TILE_SIZE2__);
                var SY = (scaleby * arv.width) / 2;
                var SX = (scaleby * arv.height) / 2;
                ctx.drawImage(arv, WX - (SY / 2), WY - (SX / 2), SY, SX);
                ctx.globalAlpha = 1;
                player.breath = window.Math.max(0, player.breath - delta);
            }
        };

        function _GroundFloor(IID, player, WX, WY, Rot, imgMovement) {
            var mmWVw = matrix[player.i][player.j];
            mmWVw.NMn = 0;
            mmWVw.nNNwM = frameId;
            mmWVw.pid = player.pid;
            if ((mmWVw.mVN !== frameId) || (mmWVw.drawFloor === 1)) {
                if (player.broke > 0) CanvasUtils.drawImageHd(IID.broken[player.broke - 1], (vertst + player.x) + WX, (horist + player.y) + WY, 0, 0, 0, imgMovement);
                else CanvasUtils.drawImageHd(IID.building[Wwmwm(player)], vertst + player.x, horist + player.y, 0, 0, 0, imgMovement);
            }
        };


        function _Furniture(IID, player, WX, WY, Rot, imgMovement) {
            var inuse = (player.state >> 4) & 1;
            var objects = items[IID.id].subtype[player.subtype];
            if (inuse === 1) player.hit = window.Math.min(500, player.hit + delta);
            else if (player.hit > 0) player.hit = window.Math.max(0, player.hit - delta);
            if (((inuse === 0) && (objects.usable === 1)) && (nearme(objects, player, 0) === 1)) World.PLAYER.eInteract = econtainericon;
            CanvasUtils.drawImageHd(objects.building, (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
            if (player.hit > 0) containeropenic(player, WX, WY);
        };

        function _Road(IID, player, WX, WY, Rot, imgMovement) {
            var objects = items[IID.id].subtype[player.subtype];
            CanvasUtils.drawImageHd(objects.building, vertst + player.x, horist + player.y, 0, 0, 0, imgMovement);
        };

        function _Ghoul(mnn, player, WX, WY, imgMovement) {
            var Vmwnn = player.state & 254;
            if (Vmwnn === 2) {
                player.state &= 65281;
                if (player.hit <= 0) {
                    player.hit = mnn.actionDelay;
                    player.hitMax = mnn.actionDelay;
                    var VVmnw = window.Math.floor(window.Math.random() * 3);
                    AudioUtils.playFx(AudioUtils._fx.shot[0][VVmnw], 0.5, Math2d.dist(World.PLAYER.x, World.PLAYER.y, player.x, player.y) / 3.5, 0);
                }
            }
            var nmm = 0;
            var NNM = 0;
            var NWW = 0;
            var wnN = 0;
            if (player.hit > 0) {
                player.hit = window.Math.max(0, player.hit - delta);
                player.hit = window.Math.min(player.hit, mnn.actionDelay);
                vW = (player.hit > mnn.actionImpactClient) ? (1 - ((player.hit - mnn.actionImpactClient) / (mnn.actionDelay - mnn.actionImpactClient))) : (player.hit / mnn.actionImpactClient);
                nmm = (player.hurt2 * MathUtils.Ease.inOutQuad(vW)) * 0.55;
                wnN = vW * 6;
                if (player.hurt2 === 1) NNM = vW * 25;
                else NWW = vW * 25;
                if (player.hit === 0) player.hurt2 *= -1;
            } else if (Math2d.fastDist(player.x, player.y, player.nx, player.ny) < 1) {
                player.breath = (player.breath + delta) % 1500;
                if (player.breath2 !== 0) {
                    if (player.breath2 < 750) player.breath2 = 1500 - player.breath2;
                    player.breath2 = player.breath2 + delta;
                    if (player.breath2 > 1500) player.breath2 = 0;
                }
            } else {
                player.breath2 = (player.breath2 + delta) % 1500;
                if (player.breath2 > 1500) {
                    player.heal *= -1;
                    player.breath2 = player.breath2 % 1500;
                }
                if (player.breath !== 0) {
                    if (player.breath < 750) player.breath = 1500 - player.breath;
                    player.breath = player.breath + delta;
                    if (player.breath > 1500) player.breath = 0;
                }
            }
            var breath = mnn.breath * ((player.breath < 750) ? (player.breath / 750) : (1 - ((player.breath - 750) / 750)));
            var move = mnn.armMove * ((player.breath2 < 750) ? (player.breath2 / 750) : (1 - ((player.breath2 - 750) / 750)));
            CanvasUtils.drawImageHd(mnn.rightArm, WX, WY, ((mnn.rightArm.angle + player.angle) + breath) + nmm, (mnn.rightArm.x + (move * player.heal)) + NWW, mnn.rightArm.y, imgMovement);
            CanvasUtils.drawImageHd(mnn.leftArm, WX, WY, ((-mnn.leftArm.angle + player.angle) - breath) + nmm, (mnn.leftArm.x - (move * player.heal)) + NNM, mnn.leftArm.y, imgMovement);
            if (player.hurt > 0) {
                var mnM = 1;
                player.hurt -= delta;
                var vW = 0;
                if (player.hurt > 150) vW = MathUtils.Ease.inQuad((300 - player.hurt) / 300);
                else {
                    vW = MathUtils.Ease.outQuad(player.hurt / 150);
                    mnM += (1 - vW) * 0.2;
                }
                WX += (window.Math.cos(player.hurtAngle) * vW) * 10;
                WY += (window.Math.sin(player.hurtAngle) * vW) * 10;
                ctx.globalAlpha = window.Math.min(1, window.Math.max(0, vW));
                CanvasUtils.drawImageHd(mnn.hurt, WX, WY, player.angle + (nmm / 1.5), wnN, 0, mnM);
                ctx.globalAlpha = 1;
            }
            CanvasUtils.drawImageHd(mnn.head, WX, WY, player.angle + (nmm / 1.5), wnN, 0, imgMovement);
        };


        function _Workbench(IID, player, WX, WY, Rot, imgMovement) {
            var inuse = (player.state >> 4) & 1;
            if (inuse === 1) player.hit = window.Math.min(500, player.hit + delta);
            else if (player.hit > 0) player.hit = window.Math.max(0, player.hit - delta);
            if (inuse === 0) nearme(IID, player, 0);
            CanvasUtils.drawImageHd(IID.building, (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
            if (player.hit > 0) containeropenic(player, WX, WY);
        };

        function _Workbench2(IID, player, WX, WY, Rot, imgMovement) {
            var i = (Rot + 1) % 2;
            var j = Rot % 2;
            matrix[player.i + i][player.j + j].NMn = frameId;
            matrix[player.i - i][player.j - j].NMn = frameId;
            matrix[player.i + i][player.j + j].wMV = player.pid;
            matrix[player.i - i][player.j - j].wMV = player.pid;
            matrix[player.i + i][player.j + j].category = window.undefined;
            matrix[player.i - i][player.j - j].category = window.undefined;
            nearme(IID, player, 0);
            CanvasUtils.drawImageHd(IID.building, (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
        };

        function _Agitator(IID, player, WX, WY, Rot, imgMovement) {
            var MWm = (player.state >> 4) & 1;
            if (MWm === 1) player.hit = window.Math.min(500, player.hit + delta);
            else if (player.hit > 0) player.hit = window.Math.max(0, player.hit - delta);
            if (MWm === 0) nearme(IID, player, 0);
            var light = (player.state >> 5) & 1;
            if (light === 1) player.hitMax = window.Math.min(10000, player.hitMax + delta);
            else if (player.hitMax > 0) player.hitMax = window.Math.max(0, player.hitMax - delta);
            var vW = 0;
            if (player.hitMax > 0) {
                vW = MathUtils.Ease.outQuad(player.hitMax / 10000);
                player.heal += (vW * delta) / 300;
                CanvasUtils.drawImageHd(IID.building[1], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
                CanvasUtils.drawImageHd(IID.building[2], ((vertst + player.x) + WX) + IID.spine[Rot][0], ((horist + player.y) + WY) + IID.spine[Rot][1], (Rot * PIby2) + player.heal, 0, 0, imgMovement);
                CanvasUtils.drawImageHd(IID.building[3], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
            } else CanvasUtils.drawImageHd(IID.building[0], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
            if (player.hit > 0) containeropenic(player, WX, WY);
        };

        function _Extractor(IID, player, WX, WY, Rot, imgMovement) {
            var MWm = (player.state >> 4) & 1;
            if (MWm === 1) player.hit = window.Math.min(500, player.hit + delta);
            else if (player.hit > 0) player.hit = window.Math.max(0, player.hit - delta);
            if (MWm === 0) nearme(IID, player, 0);
            var light = (player.state >> 5) & 1;
            if (light === 1) player.hitMax = window.Math.min(10000, player.hitMax + delta);
            else if (player.hitMax > 0) player.hitMax = window.Math.max(0, player.hitMax - delta);
            var vW = 0;
            if (player.hitMax > 0) {
                vW = MathUtils.Ease.outQuad(player.hitMax / 10000);
                WX += ((window.Math.random() * 2) - 1) * vW;
                WY += ((window.Math.random() * 2) - 1) * vW;
                player.heal += (vW * delta) / 300;
                CanvasUtils.drawImageHd(IID.building[1], ((vertst + player.x) + WX) + IID.spine[Rot][0], ((horist + player.y) + WY) + IID.spine[Rot][1], (Rot * PIby2) + player.heal, 0, 0, imgMovement);
                CanvasUtils.drawImageHd(IID.building[0], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
            } else CanvasUtils.drawImageHd(IID.building[2], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
            if (player.hit > 0) containeropenic(player, WX, WY);
        };

        function containeropenic(player, WX, WY) {
            player.breath = (player.breath + delta) % 1000;
            var imgMovement = 1 + (0.15 * ((player.breath < 500) ? (player.breath / 500) : (1 - ((player.breath - 500) / 500))));
            imgMovement *= scaleby;
            if (arv.isLoaded !== 1) {
                arv = CanvasUtils.loadImage(useicon, arv);
                return;
            }
            ctx.globalAlpha = MathUtils.Ease.outQuad(player.hit / 500);
            var WY = scaleby * (((player.i * __TILE_SIZE__) + horist) + __TILE_SIZE2__);
            var WX = scaleby * (((player.j * __TILE_SIZE__) + vertst) + __TILE_SIZE2__);
            var SY = (imgMovement * arv.width) / 2;
            var SX = (imgMovement * arv.height) / 2;
            ctx.drawImage(arv, WX - (SY / 2), WY - (SX / 2), SY, SX);
            ctx.globalAlpha = 1;
        };

        function _Compost(IID, player, WX, WY, Rot, imgMovement) {
            var MWm = (player.state >> 4) & 1;
            if (MWm === 1) player.hit = window.Math.min(500, player.hit + delta);
            else if (player.hit > 0) player.hit = window.Math.max(0, player.hit - delta);
            if (MWm === 0) nearme(IID, player, 0);
            var light = (player.state >> 5) & 1;
            if (light === 1) player.hitMax = window.Math.min(10000, player.hitMax + delta);
            else if (player.hitMax > 0) {
                player.hitMax = window.Math.max(0, player.hitMax - delta);
            }
            var vW = 0;
            if (player.hitMax > 0) {
                vW = MathUtils.Ease.outQuad(player.hitMax / 10000);
                WX += ((window.Math.random() * 2) - 1) * vW;
                WY += ((window.Math.random() * 2) - 1) * vW;
                CanvasUtils.drawImageHd(IID.building[0], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
            } else CanvasUtils.drawImageHd(IID.building[1], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
            if (player.hit > 0) containeropenic(player, WX, WY);
        };

        function _Smelter(IID, player, WX, WY, Rot, imgMovement) {
            var i = (Rot + 1) % 2;
            var j = Rot % 2;
            matrix[player.i + i][player.j + j].NMn = frameId;
            matrix[player.i - i][player.j - j].NMn = frameId;
            matrix[player.i + i][player.j + j].wMV = player.pid;
            matrix[player.i - i][player.j - j].wMV = player.pid;
            matrix[player.i + i][player.j + j].category = window.undefined;
            matrix[player.i - i][player.j - j].category = window.undefined;
            var MWm = (player.state >> 4) & 1;
            if (MWm === 1) player.hit = window.Math.min(500, player.hit + delta);
            else if (player.hit > 0) player.hit = window.Math.max(0, player.hit - delta);
            if (MWm === 0) nearme(IID, player, 0);
            var light = (player.state >> 5) & 1;
            if (light === 1) player.hitMax = window.Math.min(10000, player.hitMax + delta);
            else if (player.hitMax > 0) {
                player.hitMax = window.Math.max(0, player.hitMax - delta);
            }
            var vW = 0;
            if (player.hitMax > 0) {
                vW = MathUtils.Ease.outQuad(player.hitMax / 10000);
                WX += ((window.Math.random() * 2) - 1) * vW;
                WY += ((window.Math.random() * 2) - 1) * vW;
                CanvasUtils.drawImageHd(IID.building[1], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
            } else CanvasUtils.drawImageHd(IID.building[0], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
            if (player.hit > 0) containeropenic(player, WX, WY);
        };

        function _TeslaBench(IID, player, WX, WY, Rot, imgMovement) {
            var i = (Rot + 1) % 2;
            var j = Rot % 2;
            matrix[player.i + i][player.j + j].NMn = frameId;
            matrix[player.i - i][player.j - j].NMn = frameId;
            matrix[player.i + i][player.j + j].wMV = player.pid;
            matrix[player.i - i][player.j - j].wMV = player.pid;
            matrix[player.i + i][player.j + j].category = window.undefined;
            matrix[player.i - i][player.j - j].category = window.undefined;
            var MWm = (player.state >> 4) & 1;
            if (MWm === 1) player.hit = window.Math.min(500, player.hit + delta);
            else if (player.hit > 0) player.hit = window.Math.max(0, player.hit - delta);
            if (MWm === 0) nearme(IID, player, 0);
            var light = (player.state >> 5) & 1;
            if (light === 1) player.hitMax = 1 + (player.hitMax + (delta % 300000));
            else player.hitMax = 0;
            var vW = 0;
            if (player.hitMax > 0) {
                CanvasUtils.drawImageHd(IID.building[1 + (window.Math.floor(player.hitMax / 500) % 3)], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
                var light = IID.light[window.Math.floor(player.hitMax / 50) % IID.light.length];
                if (light !== 0) CanvasUtils.drawImageHd(light, (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
            } else CanvasUtils.drawImageHd(IID.building[0], (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);
            if (player.hit > 0) containeropenic(player, WX, WY);
        };

        function _CampfireLight(player) {
            ctx.globalAlpha = MathUtils.Ease.outQuad(player.hitMax / 500);
            player.heal = (player.heal + delta) % 1000;
            for (var i = 0; i < 3; i++) {
                var breath = (player.heal + (i * 333)) % 1000;
                var imgMovement = 1 + (0.15 * ((breath < 500) ? (breath / 500) : (1 - ((breath - 500) / 500))));
                CanvasUtils.drawImageHd(LIGHTFIRE[i], (vertst + player.x) + LIGHTFIREX[i], (horist + player.y) + LIGHTFIREY[i], 0, 0, 0, imgMovement);
            }
            player.breath2 = (player.breath2 + delta) % 5000;
            var breath = player.breath2;
            var imgMovement = 1 + (0.15 * ((breath < 2500) ? (breath / 2500) : (1 - ((breath - 2500) / 2500))));
            CanvasUtils.drawImageHd(LIGHTFIRE[3], (vertst + player.x) + LIGHTFIREX[3], (horist + player.y) + LIGHTFIREY[3], 0, 0, 0, imgMovement);
            ctx.globalAlpha = 1;
        };

        function _Campfire(IID, player, WX, WY, Rot, imgMovement) {
            
            var MWm = (player.state >> 4) & 1;
            if (MWm === 1) player.hit = window.Math.min(500, player.hit + delta);
            else if (player.hit > 0) player.hit = window.Math.max(0, player.hit - delta);
            if (MWm === 0) nearme(IID, player, 0);
            CanvasUtils.drawImageHd(IID.building, (vertst + player.x) + WX, (horist + player.y) + WY, Rot * PIby2, 0, 0, imgMovement);

            var light = (player.state >> 5) & 1;
            if (light === 1) player.hitMax = window.Math.min(500, player.hitMax + delta);
            else if (player.hitMax > 0) player.hitMax = window.Math.max(0, player.hitMax - delta);
            if (player.hitMax > 0) WvnvV[pplonscr++] = player;
            if (player.hit > 0) containeropenic(player, WX, WY);
        };

        function nVmNm(player) {
            var W = ENTITIES[__ENTITIE_EXPLOSION__].explosions;
            var mVn = window.Math.floor(player.born / 70);
            if (mVn < 10) {
                if (player.born === 0) {
                    if (Render.explosionShake !== -2) Render.explosionShake = 20;
                    AudioUtils.playFx(AudioUtils._fx.explosion, 0.7, Math2d.dist(World.PLAYER.x, World.PLAYER.y, player.x, player.y) / 4);
                }
                CanvasUtils.drawImageHd(W[mVn], vertst + player.x, horist + player.y, 0, 0, 0, 1);
            }
            player.born += delta;
        };

        function natureinscreenfunc(player) {
            matrix[player.i][player.j].NMn = frameId;
            matrix[player.i][player.j].wMV = player.pid;
            matrix[player.i][player.j].category = window.undefined;
            var WwMWW = RESOURCES[(player.extra >> 5) & 31];
            var vV = WwMWW.type[(player.extra >> 10) & 7];
            var imgMovement = 1;
            if (player.removed !== 0) {
                if (player.death === 0) {
                    if ((WwMWW.destroy !== 0) && (WMnvM[WwMWW.destroy] === 0)) {
                        AudioUtils.playFx(AudioUtils._fx.damage[WwMWW.destroy], 1, Math2d.dist(World.PLAYER.x, World.PLAYER.y, player.x, player.y) / 2.5);
                        WMnvM[WwMWW.destroy] = 1;
                    }
                    vNwNM(player, WwMWW.particles, vV.particlesDist, vV.particle);
                }
                player.death += delta;
                var vW = window.Math.max(0, MathUtils.Ease.outQuart(1 - (player.death / 300)));
                ctx.globalAlpha = vW;
                imgMovement = window.Math.min(1 + (0.35 * (1 - vW)), 1.35);
            } else if (player.born < 700) {
                if ((player.born === 0) && (vV.imgTop !== window.undefined)) {
                    if (WMWvN === 0) player.breath = window.Math.floor(window.Math.random() * 6000);
                    else {
                        player.heal = window.Math.floor(window.Math.random() * 6000);
                        player.breath = 3000;
                    }
                }
                var vW = window.Math.min(1, MathUtils.Ease.outQuart(player.born / 700));
                ctx.globalAlpha = vW;
                imgMovement = (0.5 * vW) + 0.5;
            }
            if ((player.state & 2) === 2) {
                if ((WwMWW.impact !== 0) && (WMnvM[WwMWW.impact] === 0)) {
                    AudioUtils.playFx(AudioUtils._fx.damage[WwMWW.impact], 1, Math2d.dist(World.PLAYER.x, World.PLAYER.y, player.x, player.y) / 2.8);
                    WMnvM[WwMWW.impact] = 1;
                }
                player.hurt = 250;
                if (player.hurt2 <= 0) player.hurt2 = 300;
                player.hurtAngle = (WNVNM * (player.extra & 31)) / 31;
                player.state &= ~2;
                vNwNM(player, WwMWW.particles, vV.particlesDist, 1);
            }
            var WX = 0;
            var WY = 0;
            if (player.hurt > 0) {
                var hurt = (player.hurt > 200) ? ((20 * (250 - player.hurt)) / 50) : ((20 * player.hurt) / 200);
                WX = window.Math.cos(player.hurtAngle) * hurt;
                WY = window.Math.sin(player.hurtAngle) * hurt;
                player.hurt -= delta;
            }
            if (((player.breath === 3000) && (WMWvN !== 0)) && (player.hurt === 0)) {
                CanvasUtils.drawImageHd(vV.imgFull, (vertst + player.x) + WX, (horist + player.y) + WY, player.angle, 0, 0, imgMovement);
                if (player.removed !== 0) {
                    if (player.death > 300) player.removed = 2;
                    ctx.globalAlpha = 1;
                } else if (player.born < 700) {
                    player.born += delta;
                    ctx.globalAlpha = 1;
                }
                return;
            }
            CanvasUtils.drawImageHd(vV.W, (vertst + player.x) + WX, (horist + player.y) + WY, player.angle, 0, 0, imgMovement);
            if (vV.imgTop !== window.undefined) {
                WX = 0;
                WY = 0;
                if (player.hurt2 > 0) {
                    var hurt = (player.hurt2 > 250) ? (10 * MathUtils.Ease.inQuad((300 - player.hurt2) / 250)) : (10 * MathUtils.Ease.outQuad(player.hurt2 / 250));
                    WX = window.Math.cos(player.hurtAngle) * hurt;
                    WY = window.Math.sin(player.hurtAngle) * hurt;
                    player.hurt2 -= delta;
                }
                if (WMWvN === 0) {
                    if (player.heal > 0) player.heal = window.Math.max(0, player.heal - delta);
                    else player.breath += delta;
                    if (player.breath > 6000) player.breath = 0;
                    if (player.breath > 3000) imgMovement += (0.025 * (player.breath - 3000)) / 3000;
                    else imgMovement += 0.025 - ((0.025 * player.breath) / 3000);
                } else {
                    if (player.heal === 0) player.heal = player.breath;
                    if (player.breath > 6000) player.breath = 0;
                    if (player.breath > 3000) {
                        player.breath = window.Math.max(3000, player.breath - delta);
                        imgMovement += (0.025 * (player.breath - 3000)) / 3000;
                    } else if (player.breath < 3000) {
                        player.breath = window.Math.min(3000, player.breath + delta);
                        imgMovement += 0.025 - ((0.025 * player.breath) / 3000);
                    }
                }
                CanvasUtils.drawImageHd(vV.imgTop, (vertst + player.x) + WX, (horist + player.y) + WY, player.angle, 0, 0, imgMovement);
            }
            if (player.removed !== 0) {
                if (player.death > 300) player.removed = 2;
                ctx.globalAlpha = 1;
            } else if (player.born < 700) {
                player.born += delta;
                ctx.globalAlpha = 1;
            }
        };

        function objectsinscreenfunc(player) {
            matrix[player.i][player.j].NMn = frameId;
            matrix[player.i][player.j].wMV = player.pid;
            matrix[player.i][player.j].category = window.undefined;
            var Rot = (player.extra >> 5) & 3;
            var IID = items[player.extra >> 7];
            var imgMovement = 1;
            matrix[player.i][player.j].category = IID.detail.category;
            if (player.removed !== 0) {
                if (player.death === 0) {
                    var wwM = (IID.particles === -1) ? items[IID.id].subtype[player.subtype] : IID;
                    vNwNM(player, wwM.particles, wwM.particlesDist, 5);
                    if ((wwM.destroy !== 0) && (WMnvM[wwM.destroy] === 0)) {
                        AudioUtils.playFx(AudioUtils._fx.damage[wwM.destroy], 1, Math2d.dist(World.PLAYER.x, World.PLAYER.y, player.x, player.y) / 2.5);
                        WMnvM[wwM.destroy] = 1;
                    }
                }
                player.death += delta;
                var vW = window.Math.max(0, MathUtils.Ease.outQuart(1 - (player.death / 300)));
                ctx.globalAlpha = vW;
                imgMovement = window.Math.min(1 + (0.35 * (1 - vW)), 1.35);
            }
            if ((player.state & 2) === 2) {
                player.hurt = 250;
                player.hurtAngle = (WNVNM * (player.extra & 31)) / 31;
                player.state &= ~2;
                var wwM = (IID.particles === -1) ? items[IID.id].subtype[player.subtype] : IID;
                vNwNM(player, wwM.particles, wwM.particlesDist, 1);
                if ((wwM.impact !== 0) && (WMnvM[wwM.impact] === 0)) {
                    AudioUtils.playFx(AudioUtils._fx.damage[wwM.impact], 1, Math2d.dist(World.PLAYER.x, World.PLAYER.y, player.x, player.y) / 2.8);
                    WMnvM[wwM.impact] = 1;
                }
            }
            var WX = 0;
            var WY = 0;
            if (player.hurt > 0) {
                if (player.hurt > 200) {
                    var hurt = (20 * (250 - player.hurt)) / 100;
                    WX = window.Math.cos(player.hurtAngle) * hurt;
                    WY = window.Math.sin(player.hurtAngle) * hurt;
                    player.hurt -= delta;
                } else {
                    var hurt = (20 * player.hurt) / 200;
                    WX = window.Math.cos(player.hurtAngle) * hurt;
                    WY = window.Math.sin(player.hurtAngle) * hurt;
                    player.hurt -= delta;
                }
            }
            IID.draw(IID, player, WX, WY, Rot, imgMovement);
            if (player.removed !== 0) {
                if (player.death > 300) player.removed = 2;
                ctx.globalAlpha = 1;
            }
        };

        function projectilefunc(player) {
            matrix[player.i][player.j].NMn = frameId;
            matrix[player.i][player.j].wMV = player.pid;
            matrix[player.i][player.j].category = window.undefined;
            var MwMvw = 1;
            var i = player.i;
            var j = player.j;
            var NWvmm = (i <= 1) ? 0 : (i - 1);
            var MvmNn = (i >= (NMv - 2)) ? (NMv - 1) : (i + 1);
            var vnVVM = (j <= 1) ? 0 : (j - 1);
            var MnVMW = (j >= (wWw - 2)) ? (wWw - 1) : (j + 1);
            for (i = NWvmm; i <= MvmNn; i++) {
                for (j = vnVVM; j <= MnVMW; j++) {
                    var VMV = matrix[i][j];
                    if (VMV.frameId !== frameId) continue;
                    var M = VMV.b;
                    var len = VMV.i;
                    for (var nMm = 0; nMm < len; nMm++) {
                        var WvW = M[nMm];
                        var vV = WvW.type;
                        var mvnVn = Entitie.units[vV][WvW.cycle];
                        if (((mvnVn.pid !== World.PLAYER.id)) && (Math2d.dist(mvnVn.x, mvnVn.y, player.x, player.y) < (ENTITIES[vV].radius - 4))) {
                            window.console.log("DETECTED");
                            player.rx = player.x;
                            player.ry = player.y;
                            player.nx = player.x;
                            player.ny = player.y;
                        }
                    }
                }
            }
            if (player.removed !== 0) {
                player.death += delta;
                MwMvw = window.Math.max(0, MathUtils.Ease.outQuart(1 - (player.death / 200)));
                ctx.globalAlpha = MwMvw;
            }
            var dist = Math2d.fastDist(player.nx, player.ny, player.x, player.y);
            if ((dist < 400) || (player.removed !== 0)) {
                ctx.globalAlpha = window.Math.min(dist / 400, MwMvw);
                CanvasUtils.drawImageHd(ENTITIES[__ENTITIE_PLAYER__].bullets[player.extra][2], vertst + player.x, horist + player.y, player.angle, 0, 0, 1);
                ctx.globalAlpha = MwMvw;
                CanvasUtils.drawImageHd(ENTITIES[__ENTITIE_PLAYER__].bullets[player.extra][1], vertst + player.x, horist + player.y, player.angle, 0, 0, 1);
            } else CanvasUtils.drawImageHd(ENTITIES[__ENTITIE_PLAYER__].bullets[player.extra][0], vertst + player.x, horist + player.y, player.angle, 0, 0, 1);
            if (player.removed !== 0) {
                if (player.death > 200) player.removed = 2;
                ctx.globalAlpha = 1;
            }
        };

        function lootinscreenfunc(loot) {
            matrix[loot.i][loot.j].NMn = frameId;
            matrix[loot.i][loot.j].wMV = loot.pid;
            matrix[loot.i][loot.j].category = window.undefined;
            if (loot.hit !== 0) {
                var PLAYER = World.players[loot.hit];
                if (frameId === PLAYER.frameId) {
                    var players = Entitie.units[__ENTITIE_PLAYER__];
                    var WMv = players[PLAYER.locatePlayer];
                    loot.nx = WMv.x;
                    loot.ny = WMv.y;
                    loot.angleX = window.Math.cos(Math2d.angle(loot.rx, loot.ry, loot.nx, loot.ny));
                    loot.angleY = window.Math.sin(Math2d.angle(loot.rx, loot.ry, loot.nx, loot.ny));
                }
            }
            if ((loot.removed === 0) && (Math2d.fastDist(loot.x, loot.y, loot.nx, loot.ny) < 1)) {
                var dist = Math2d.fastDist(NmM, WWV, loot.x, loot.y);
                if (dist < wMVMm) {
                    wMVMm = dist;
                    World.PLAYER.loot = loot.extra;
                    World.PLAYER.lootId = loot.id;
                    if (World.PLAYER.interaction <= 0) World.PLAYER.interaction = 0;
                    else World.PLAYER.extraLoot = 1;
                }
            }
            var breath = 0;
            var vnwmm = 0;
            if (loot.removed !== 0) {
                loot.death += delta;
                ctx.globalAlpha = window.Math.max(0, MathUtils.Ease.outQuart(1 - (loot.death / 800)));
                vnwmm = loot.death / 2400;
            } else if (loot.born < 500) {
                var vW = window.Math.min(1, MathUtils.Ease.outQuart(loot.born / 500));
                ctx.globalAlpha = vW;
            }
            loot.breath = (loot.breath + delta) % 1500;
            if (loot.breath < 750) breath = 0.95 + (MathUtils.Ease.inOutQuad(loot.breath / 750) * 0.1);
            else breath = 0.95 + (MathUtils.Ease.inOutQuad(1 - ((loot.breath - 750) / 750)) * 0.1);
            CanvasUtils.drawImageHd(LOOT[loot.extra], vertst + loot.x, horist + loot.y, loot.angle, 0, 0, breath - vnwmm);
            if (loot.removed !== 0) {
                if (loot.death > 800) loot.removed = 2;
                ctx.globalAlpha = 1;
            } else if (loot.born < 500) {
                loot.born += delta;
                ctx.globalAlpha = 1;
            }
        };

        function checkobjonscreen() {
            var i = 0;
            pplonscr = 0;
            NNmMN[0] = 0;
            NNmMN[1] = 0;
            NNmMN[2] = 0;
            NNmMN[3] = 0;
            vnVmM = 12000;
            wMVMm = 12000;
            World.PLAYER.extraLoot = 0;
            World.PLAYER.buildingId = -1;
            World.PLAYER.buildingArea = -1;
            if (World.PLAYER.interaction !== 1) World.PLAYER.interaction = -1;
            var MvW = Entitie.units[ENTITIES.length];
            var Wwn = Entitie.border[ENTITIES.length];
            var WWM = Wwn.border;
            var buildings = Entitie.units[__ENTITIE_BUILD_TOP__];
            var wWv = Entitie.border[__ENTITIE_BUILD_TOP__];
            var wVN = wWv.border;
            for (i = 0; i < wVN; i++) bigwallsfusion(buildings[wWv.cycle[i]]);
            buildings = Entitie.units[__ENTITIE_BUILD_GROUND2__];
            wWv = Entitie.border[__ENTITIE_BUILD_GROUND2__];
            wVN = wWv.border;
            for (i = 0; i < wVN; i++) floorsfusion(buildings[wWv.cycle[i]]);
            for (i = 0; i < wVN; i++) objectsinscreenfunc(buildings[wWv.cycle[i]]);
            for (i = 0; i < WWM; i++) {
                var player = MvW[Wwn.cycle[i]];
                if (player.type === __ENTITIE_BUILD_GROUND2__) objectsinscreenfunc(player);
            }
            if (NwMVW !== vMNWw) {
                var particles = Entitie.units[__ENTITIE_PARTICLES__];
                var wWv = Entitie.border[__ENTITIE_PARTICLES__];
                var wVN = wWv.border;
                for (i = 0; i < wVN; i++) mWNvV(particles[wWv.cycle[i]]);
                if (VwmMm.id !== -1) {
                    Entitie.remove(0, VwmMm.id, VwmMm.uid, __ENTITIE_PARTICLES__);
                    VwmMm.id = -1;
                }
            }
            var buildings = Entitie.units[__ENTITIE_BUILD_GROUND__];
            var wWv = Entitie.border[__ENTITIE_BUILD_GROUND__];
            var wVN = wWv.border;
            for (i = 0; i < wVN; i++) objectsinscreenfunc(buildings[wWv.cycle[i]]);
            for (i = 0; i < WWM; i++) {
                var player = MvW[Wwn.cycle[i]];
                if (player.type === __ENTITIE_BUILD_GROUND__) objectsinscreenfunc(player);
            }
            WMmMN = Entitie.units[__ENTITIE_RESOURCES_DOWN__];
            VmwNm = Entitie.border[__ENTITIE_RESOURCES_DOWN__];
            vMwWm = VmwNm.border;
            for (i = 0; i < vMwWm; i++) natureinscreenfunc(WMmMN[VmwNm.cycle[i]]);
            for (i = 0; i < WWM; i++) {
                var player = MvW[Wwn.cycle[i]];
                if (player.type === __ENTITIE_RESOURCES_DOWN__) natureinscreenfunc(player);
            }
            var buildings = Entitie.units[__ENTITIE_BUILD_DOWN__];
            var wWv = Entitie.border[__ENTITIE_BUILD_DOWN__];
            var wVN = wWv.border;
            for (i = 0; i < wVN; i++) smallwallsfusion(buildings[wWv.cycle[i]]);
            for (i = 0; i < wVN; i++) objectsinscreenfunc(buildings[wWv.cycle[i]]);
            for (i = 0; i < WWM; i++) {
                var player = MvW[Wwn.cycle[i]];
                if (player.type === __ENTITIE_BUILD_DOWN__) objectsinscreenfunc(player);
            }
            var players = Entitie.units[__ENTITIE_PLAYER__];
            var border = Entitie.border[__ENTITIE_PLAYER__];
            var len = border.border;
            for (i = 0; i < len; i++) {
                var pos = border.cycle[i];
                var player = players[pos];
                var PLAYER = World.players[player.pid];
                showruncloud(player);
                PLAYER.locatePlayer = pos;
                PLAYER.frameId = frameId;
                MmnMv(player, pos);
            }
            World.PLAYER.loot = -1;
            World.PLAYER.lootId = -1;
            var MMwVW = Entitie.units[__ENTITIE_LOOT__];
            var vmwvW = Entitie.border[__ENTITIE_LOOT__];
            var MVMVw = vmwvW.border;
            for (i = 0; i < MVMVw; i++) lootinscreenfunc(MMwVW[vmwvW.cycle[i]]);
            for (i = 0; i < WWM; i++) {
                var player = MvW[Wwn.cycle[i]];
                if (player.type === __ENTITIE_LOOT__) lootinscreenfunc(player);
            }
            var bullets = Entitie.units[__ENTITIE_BULLET__];
            var Mmwnm = Entitie.border[__ENTITIE_BULLET__];
            var MNmmw = Mmwnm.border;
            for (i = 0; i < MNmmw; i++) projectilefunc(bullets[Mmwnm.cycle[i]]);
            for (i = 0; i < WWM; i++) {
                var player = MvW[Wwn.cycle[i]];
                if (player.type === __ENTITIE_BULLET__) projectilefunc(player);
            }
            WMmMN = Entitie.units[__ENTITIE_RESOURCES_MID__];
            VmwNm = Entitie.border[__ENTITIE_RESOURCES_MID__];
            vMwWm = VmwNm.border;
            for (i = 0; i < vMwWm; i++) natureinscreenfunc(WMmMN[VmwNm.cycle[i]]);
            for (i = 0; i < WWM; i++) {
                var player = MvW[Wwn.cycle[i]];
                if (player.type === __ENTITIE_RESOURCES_MID__) natureinscreenfunc(player);
            }
            if (World.gameMode === World.__GHOUL__) {
                for (i = 0; i < len; i++) {
                    var player = players[border.cycle[i]];
                    var ghoul = World.players[player.pid].ghoul;
                    if (ghoul === 0) playerinscreenfunc(player);
                    else {
                        player.extra = ghoul - 1;
                        creaturesinscreenfunc(player);
                    };
                }
                for (i = 0; i < WWM; i++) {
                    var player = MvW[Wwn.cycle[i]];
                    if (player.type === __ENTITIE_PLAYER__) {
                        showruncloud(player);
                        var ghoul = World.players[player.pid].ghoul;
                        if (ghoul === 0) playerinscreenfunc(player);
                        else {
                            player.extra = ghoul - 1;
                            creaturesinscreenfunc(player);
                        };
                    }
                }
            } else {
                for (i = 0; i < len; i++) playerinscreenfunc(players[border.cycle[i]]);
                for (i = 0; i < WWM; i++) {
                    var player = MvW[Wwn.cycle[i]];
                    if (player.type === __ENTITIE_PLAYER__) {
                        showruncloud(player);
                        playerinscreenfunc(player);
                    }
                }
            }
            var mnn = Entitie.units[__ENTITIE_AI__];
            var WwVvW = Entitie.border[__ENTITIE_AI__];
            var nWwNn = WwVvW.border;
            for (i = 0; i < nWwNn; i++) creaturesinscreenfunc(mnn[WwVvW.cycle[i]]);
            for (i = 0; i < WWM; i++) {
                var player = MvW[Wwn.cycle[i]];
                if (player.type === __ENTITIE_AI__) creaturesinscreenfunc(player);
            }
            buildings = Entitie.units[__ENTITIE_BUILD_TOP__];
            wWv = Entitie.border[__ENTITIE_BUILD_TOP__];
            wVN = wWv.border;
            for (i = 0; i < wVN; i++) objectsinscreenfunc(buildings[wWv.cycle[i]]);
            for (i = 0; i < WWM; i++) {
                var player = MvW[Wwn.cycle[i]];
                if (player.type === __ENTITIE_BUILD_TOP__) objectsinscreenfunc(player);
            }
            for (i = 0; i < pplonscr; i++) {
                var IID = items[WvnvV[i].extra >> 7];
                IID.VvmvM(WvnvV[i]);
                WvnvV[i] = null;
            }
            WMmMN = Entitie.units[__ENTITIE_RESOURCES_TOP__];
            VmwNm = Entitie.border[__ENTITIE_RESOURCES_TOP__];
            vMwWm = VmwNm.border;
            for (i = 0; i < vMwWm; i++) natureinscreenfunc(WMmMN[VmwNm.cycle[i]]);
            for (i = 0; i < WWM; i++) {
                var player = MvW[Wwn.cycle[i]];
                if (player.type === __ENTITIE_RESOURCES_TOP__) natureinscreenfunc(player);
            }
            WMmMN = Entitie.units[__ENTITIE_RESOURCES_STOP__];
            VmwNm = Entitie.border[__ENTITIE_RESOURCES_STOP__];
            vMwWm = VmwNm.border;
            for (i = 0; i < vMwWm; i++) natureinscreenfunc(WMmMN[VmwNm.cycle[i]]);
            for (i = 0; i < WWM; i++) {
                var player = MvW[Wwn.cycle[i]];
                if (player.type === __ENTITIE_RESOURCES_STOP__) natureinscreenfunc(player);
            }
            explosions = Entitie.units[__ENTITIE_EXPLOSION__];
            VMnwn = Entitie.border[__ENTITIE_EXPLOSION__];
            WNnmw = VMnwn.border;
            for (i = 0; i < WNnmw; i++) nVmNm(explosions[VMnwn.cycle[i]]);
            for (i = 0; i < len; i++) vWMWW(players[border.cycle[i]]);
            if (World.gameMode !== World.__BR__) {
                for (i = 0; i < len; i++) mVwvw(players[border.cycle[i]]);
                for (i = 0; i < len; i++) VvVNw(players[border.cycle[i]]);
            }
        };

        function _StopPoisonEffect() {
            NNWWn = 0;
        };
        var bodOnResize;
        var vmvNw = CanvasUtils.options.forceResolution;
        var nvMNv = 0;
        var wMmwW = 0;
        var NNWWn = 0;
        var VnwwM = 0;
        var WvWvM = 0;

        function _SetPoisonEffect(delay) {
            if (WvWvM === 0) {
                nvMNv = Render.scale;
                Render.scale = 0.8;
                wMmwW = 0;
                NNWWn = delay;
                VnwwM = 0;
                WvWvM = 1;
                vmvNw = CanvasUtils.options.deviceRatio / CanvasUtils.options.scheduledRatio;
            }
        };

        function nmmMm() {
            if ((NNWWn <= 0) && ((wMmwW + delta) > 1500)) {
                WvWvM = 0;
                wMmwW = 1500;
            } else {
                NNWWn -= delta;
                VnwwM += delta;
                wMmwW = (wMmwW + delta) % 1500;
            }
            var vW = MathUtils.Ease.inOutQuad(((wMmwW > 750) ? (1500 - wMmwW) : wMmwW) / 750);
            if (((NNWWn < 750) && (wMmwW > 750)) && ((1500 - wMmwW) > NNWWn)) {
                var WmNnV = window.Math.max(0, (1500 - wMmwW) / 750);
                vW = (0.5 * WmNnV) + (vW * (1 - 0.5));
            } else if (VnwwM > 750) vW = 0.5 + (vW * (1 - 0.5));
            var mvWMM = vW * 20;
            Render.scale = nvMNv + vW;
            CanvasUtils.options.scheduledRatio = CanvasUtils.options.deviceRatio / (vmvNw + mvWMM);
            bodOnResize();
        };
        var vvMWV = window.document.createElement('canvas');
        var vWwnm = vvMWV.getContext('2d');

        function nvVmw() {
            var mWN;
            var vW;
            var WvmWN = ctx;
            vW = 1 - MathUtils.Ease.inQuad(World.transition / 1000);
            vvMWV.width = canvas.width;
            vvMWV.height = canvas.height;
            ctx = vWwnm;
            ctx.save();
            var mnV = CanvasUtils.options.scheduledRatio / CanvasUtils.options.backingStoreRatio;
            ctx.scale(mnV, mnV);
            mWN = INVENTORY2;
            INVENTORY2 = items;
            items = mWN;
            mWN = PARTICLES2;
            PARTICLES2 = PARTICLES;
            PARTICLES = mWN;
            mWN = LOOT2;
            LOOT2 = LOOT;
            LOOT = mWN;
            mWN = RESOURCES2;
            RESOURCES2 = RESOURCES;
            RESOURCES = mWN;
            mWN = ENTITIES2;
            ENTITIES2 = ENTITIES;
            ENTITIES = mWN;
            mWN = LIGHTFIRE2;
            LIGHTFIRE2 = LIGHTFIRE;
            LIGHTFIRE = mWN;
            mWN = GROUND2;
            GROUND2 = GROUND;
            GROUND = mWN;
            mWN = AI2;
            AI2 = AI;
            AI = mWN;
            ctx.fillStyle = (World.day === 0) ? "#0B2129" : "#3D5942";
            ctx.fillRect(0, 0, canw, canh);
            vMwNm();
            checkobjonscreen();
            mWN = INVENTORY2;
            INVENTORY2 = items;
            items = mWN;
            mWN = PARTICLES2;
            PARTICLES2 = PARTICLES;
            PARTICLES = mWN;
            mWN = LOOT2;
            LOOT2 = LOOT;
            LOOT = mWN;
            mWN = RESOURCES2;
            RESOURCES2 = RESOURCES;
            RESOURCES = mWN;
            mWN = ENTITIES2;
            ENTITIES2 = ENTITIES;
            ENTITIES = mWN;
            mWN = LIGHTFIRE2;
            LIGHTFIRE2 = LIGHTFIRE;
            LIGHTFIRE = mWN;
            mWN = GROUND2;
            GROUND2 = GROUND;
            GROUND = mWN;
            mWN = AI2;
            AI2 = AI;
            AI = mWN;
            ctx.restore();
            ctx = WvmWN;
            ctx.globalAlpha = vW;
            ctx.drawImage(vvMWV, 0, 0, canw, canh);
            ctx.globalAlpha = 1;
            World.transition = window.Math.max(0, World.transition - delta);
            if (World.transition === 0) World.changeDayCycle();
        };

        function _World() {
            Render.globalTime += delta;
            if (WvWvM === 1) nmmMm();
            wNnvM();
            myplayerfocusinscreen();
            vMwNm();
            wmVNW();
            checkobjonscreen(); 
            placingobj();
            if (World.transition > 0) nvVmw();
            Entitie.cleanRemoved();
            frameId++;
            for (var i = 0; i < SOUND_LENGTH; i++) WMnvM[i] = 0;
            scaleby = wWWNM;
            canwns = canw / scaleby;
            canhns = canh / scaleby;
        };

        function _SetDetection(vW) {
            WMWvN = 0;
        };

        function _SetParticles(vW) {
            localStorage2.setItem("particles", "" + vW);
            NwMVW = vW;
        };
        return {
            globalTime:         window.Date.now(),
            reset:              _Reset,
            world:              _World,
            minimap:            _Minimap,
            bigminimap:         _BigMinimap,
            gauges:             _Gauges,
            gaugesAfter:        _GaugesAfter,
            leaderboard:        _Leaderboard,
            inventory:          _Inventory,
            buttonInv:          _buttonInv,
            config:             _Config,
            craft:              _Craft,
            chest:              _Chest,
            team:               _Team,
            interaction:        _Interaction,
            alertServer:        _AlertServer,
            shake:              0,
            explosionShake:     0,
            scale:              -0.,
            setParticles:       _SetParticles,
            setDetection:       _SetDetection,
            setPoisonEffect:    _SetPoisonEffect,
            stopPoisonEffect:   _StopPoisonEffect,
            __TILE_SCALE__:     __TILE_SCALE__,
            __TILE_SIZE__:      __TILE_SIZE__,
            __TILE_SIZE2__:     __TILE_SIZE2__,
            __TRANSFORM__:      0,
            wall:               _Wall,
            lowWall:            _LowWall,
            door:               _Door,
            workbench:          _Workbench,
            campfire:           _Campfire,
            campfireLight:      _CampfireLight,
            smelter:            _Smelter,
            compost:            _Compost,
            agitator:           _Agitator,
            extractor:          _Extractor,
            workbench2:         _Workbench2,
            teslaBench:         _TeslaBench,
            orangeSeed:         _OrangeSeed,
            treeSeed:           _TreeSeed,
            groundFloor:        _GroundFloor,
            defaultBuilding:    _DefaultBuilding,
            hiddenBuilding:     _HiddenBuilding,
            breakable:          _Breakable,
            furniture:          _Furniture,
            road:               _Road,
            landmine:           _Landmine,
            dynamite:           _Dynamite,
            spike:              _Spike,
            ghoul:              _Ghoul,
            construction:       _Construction,
            lamp:               _Lamp,
            lampLight:          _LampLight,
            switchOff:          _SwitchOff,
            timerGate:          _TimerGate,
            automaticDoor:      _AutomaticDoor,
            battleRoyale:       _BattleRoyale
        };
    })();
var MapManager = (function() {
    var key_w = 0;
    var key_s = 1;
    var key_a = 2;
    var key_d = 4;
    var vMWMW = 0;
    var wMVvN = 0;
    var MnMNn = 4;
    var wWn = null;
    var vWwNw = -1;
    var VNnvM = 0;
    var grid = [];
    var NvMvV = [];
    var roads = [];
    var NWVNw = {
        i: 0,
        j: 0
    };

    function VVvvN() {
        for (var i = 0; i < wMVvN; i++) {
            grid[i] = [];
            for (var j = 0; j < vMWMW; j++) grid[i][j] = 0;
        }
    };

    function wvmnN(WVWWv, SY, SX) {
        wWn = new RNG.Random(WVWWv);
        vMWMW = SY;
        wMVvN = SX;
        MapManager.width = SY;
        MapManager.height = SX;
        grid = [];
        MapManager.grid = grid;
        NvMvV = [];
        roads = [];
        MapManager.roads = roads;
        vWwNw = -1;
        NWVNw.i = 0;
        NWVNw.j = 0;
        VNnvM = 0;
    };

    function init(WVWWv, SY, SX, fun) {
        window.console.time("Town generation");
        wvmnN(WVWWv, SY, SX);
        VVvvN();
        if (fun !== window.undefined) fun();
        window.console.timeEnd("Town generation");
    };
    return {
        seed: 0,
        init: init,
        grid: grid,
        roads: null,
        width: 0,
        height: 0
    };
})();

COUNTER_ENTITIE = 0;
__ENTITIE_PLAYER__          = COUNTER_ENTITIE++;
__ENTITIE_LOOT__            = COUNTER_ENTITIE++;
__ENTITIE_BULLET__          = COUNTER_ENTITIE++;
__ENTITIE_BUILD_TOP__       = COUNTER_ENTITIE++;
__ENTITIE_BUILD_DOWN__      = COUNTER_ENTITIE++;
__ENTITIE_BUILD_GROUND__    = COUNTER_ENTITIE++;
__ENTITIE_BUILD_GROUND2__   = COUNTER_ENTITIE++;
__ENTITIE_PARTICLES__       = COUNTER_ENTITIE++;
__ENTITIE_RESOURCES_TOP__   = COUNTER_ENTITIE++;
__ENTITIE_RESOURCES_DOWN__  = COUNTER_ENTITIE++;
__ENTITIE_RESOURCES_MID__   = COUNTER_ENTITIE++;
__ENTITIE_RESOURCES_STOP__  = COUNTER_ENTITIE++;
__ENTITIE_EXPLOSION__       = COUNTER_ENTITIE++;
__ENTITIE_AI__              = COUNTER_ENTITIE++;

ENTITIES[__ENTITIE_PLAYER__].update = function updateEntitiePlayer(MW, WX, WY) {
    if (Math2d.dist(MW.x, MW.y, WX, WY) > 66) {
        MW.rx = WX;
        MW.ry = WY;
        var angle = Math2d.angle(MW.rx, MW.ry, MW.nx, MW.ny);
        MW.angleX = window.Math.cos(angle);
        MW.angleY = window.Math.sin(angle);
    }
    MW.speed = (MW.state >> 8) / 100;
};
ENTITIES[__ENTITIE_PLAYER__].init = function initEntitiePlayer(MW) {
    var PLAYER = World.players[MW.pid];
    for (var i = 0; i < PLAYER.runEffect.length; i++) PLAYER.runEffect[i].delay = 0;
    for (var i = 0; i < PLAYER.cartridges.length; i++) PLAYER.cartridges[i].delay = 0;
    MW.angle = MW.nangle;
    if (PLAYER.ghoul > 0) {
        MW.heal = 1;
        MW.hurt2 = 1;
    }
};
ENTITIES[__ENTITIE_AI__].update = ENTITIES[__ENTITIE_PLAYER__].update;
ENTITIES[__ENTITIE_AI__].init = function initEntitieAI(MW) {
    MW.heal = 1;
    MW.hurt2 = 1;
    MW.angle = MW.nangle;
    MW.speed = (MW.state >> 8) / 100;
};
ENTITIES[__ENTITIE_LOOT__].init = function initEntitieLoot(MW) {
    if ((MW.x !== MW.rx) || (MW.y !== MW.ry)) {
        MW.angle = Math2d.angle(MW.x, MW.y, MW.rx, MW.ry);
        MW.nangle = MW.angle;
    } else {
        MW.angle += window.Math.PI / 2;
        MW.nangle = MW.angle;
    }
};
ENTITIES[__ENTITIE_LOOT__].update = function updateEntitieLoot(MW, WX, WY) {
    MW.hit = MW.state >> 8;
};
ENTITIES[__ENTITIE_BULLET__].init = function initEntitieBullet(MW) {
    MW.hurtAngle = Math2d.angle(MW.rx, MW.ry, MW.nx, MW.ny);
    var Wn = MW.extra;
    MW.speed = (MW.state >> 8) / 100;
    switch (Wn) {
        case 4:
        case 8:
            var player = Entitie.findEntitie(__ENTITIE_PLAYER__, MW.pid, 0);
            if (player !== null) {
                player.extra = player.extra & 255;
                player.hit = 0;
            }
            break;
        case 3:
            var player = Entitie.findEntitie(__ENTITIE_PLAYER__, MW.pid, 0);
            if (player !== null) player.hit = 0;
            break;
    }
};
ENTITIES[__ENTITIE_BULLET__].update = function updateEntitieBullet(MW, WX, WY) {
    var angle = Math2d.angle(MW.x, MW.y, MW.nx, MW.ny);
    var nvwVm = window.Math.PI * 2;
    var vWWMM = (((angle + nvwVm) % nvwVm) - ((MW.hurtAngle + nvwVm) % nvwVm)) % nvwVm;
    if (window.Math.abs(vWWMM) > 0.1) {
        MW.rx = MW.x;
        MW.ry = MW.y;
        MW.nx = MW.x;
        MW.ny = MW.y;
    }
};
ENTITIES[__ENTITIE_RESOURCES_TOP__].update = function updateEntitieBuilding() {
};
ENTITIES[__ENTITIE_RESOURCES_DOWN__].update = ENTITIES[__ENTITIE_RESOURCES_TOP__].update;
ENTITIES[__ENTITIE_RESOURCES_MID__].update = ENTITIES[__ENTITIE_RESOURCES_TOP__].update;
ENTITIES[__ENTITIE_RESOURCES_STOP__].update = ENTITIES[__ENTITIE_RESOURCES_TOP__].update;
ENTITIES[__ENTITIE_BUILD_TOP__].update = function updateEntitieBuilding(MW, WX, WY) {
    var Rot = (MW.extra >> 5) & 3;
    MW.subtype = (MW.state >> 5) & 63;
    MW.broke = MW.state >> 14;
    MW.state = MW.state & 16383;
    var IID = items[MW.extra >> 7];
    MW.x = ((window.Math.floor(WX / Render.__TILE_SIZE__) * Render.__TILE_SIZE__) + Render.__TILE_SIZE2__) + IID.xCenter[Rot];
    MW.y = ((window.Math.floor(WY / Render.__TILE_SIZE__) * Render.__TILE_SIZE__) + Render.__TILE_SIZE2__) + IID.yCenter[Rot];
    MW.rx = MW.x;
    MW.ry = MW.y;
    MW.nx = MW.x;
    MW.ny = MW.y;
    MW.px = MW.x;
    MW.py = MW.y;
    if ((IID.door === 1) && ((MW.state & 16) === 16)) {
        MW.px = ((window.Math.floor(MW.j + IID.jMove[Rot]) * Render.__TILE_SIZE__) + Render.__TILE_SIZE2__) + IID.xCenter[(Rot + 1) % 4];
        MW.py = ((window.Math.floor(MW.i + IID.iMove[Rot]) * Render.__TILE_SIZE__) + Render.__TILE_SIZE2__) + IID.yCenter[(Rot + 1) % 4];
    }
};
ENTITIES[__ENTITIE_BUILD_DOWN__].update = ENTITIES[__ENTITIE_BUILD_TOP__].update;
ENTITIES[__ENTITIE_BUILD_GROUND__].update = ENTITIES[__ENTITIE_BUILD_TOP__].update;
ENTITIES[__ENTITIE_BUILD_GROUND2__].update = ENTITIES[__ENTITIE_BUILD_TOP__].update;
try {
    Render.shake;
} catch (error) {
    var Render = {};
}
var __WARM__      = 1;
var __RADIATION__ = 2;


var COUNTER = 0;
var AREAS = {
    own: COUNTER++,
    firepart: COUNTER++,
    workbench: COUNTER++,
    bbq: COUNTER++,
    weavingmachine: COUNTER++,
    researchbench: COUNTER++,
    smelter: COUNTER++,
    teslabench: COUNTER++,
    composter: COUNTER++,
    agitator: COUNTER++,
    extractor: COUNTER++,
    weldingmachine: COUNTER++
};
COUNTER = 0;
var SOUNDID = {
    __NO_SOUND__: COUNTER++,
    wood: COUNTER++,
    stone: COUNTER++,
    stone2: COUNTER++,
    metal: COUNTER++,
    wooddes: COUNTER++,
    stonedes: COUNTER++,
    metaldes: COUNTER++,
    pillow: COUNTER++,
    pillowdes: COUNTER++
};
var SOUND = [];
SOUND[SOUNDID.wood] = "audio/wood-impact.mp3";
SOUND[SOUNDID.stone] = "audio/stone-impact2.mp3";
SOUND[SOUNDID.stone2] = "audio/stone-impact.mp3";
SOUND[SOUNDID.metal] = "audio/metal-impact2.mp3";
SOUND[SOUNDID.pillow] = "audio/pillow-impact.mp3";
SOUND[SOUNDID.wooddes] = "audio/wood-destroy3.mp3";
SOUND[SOUNDID.stonedes] = "audio/stone-destroy.mp3";
SOUND[SOUNDID.metaldes] = "audio/metal-destroy2.mp3";
SOUND[SOUNDID.pillowdes] = "audio/pillow-destroy.mp3";

var SOUND_LENGTH = SOUND.length;

COUNTER = 0;
var BEHAVIOR = {
    __NO__:             COUNTER++,
    __SEED__:           COUNTER++,
    __SEED_RESOURCE__:  COUNTER++,
    __LOGIC__:          COUNTER++,
    __AI_CONSTRUCTOR__: COUNTER++
};

COUNTER = 0;
var AIID = {
    __NORMAL_GHOUL__:       COUNTER++,
    __FAST_GHOUL__:         COUNTER++,
    __EXPLOSIVE_GHOUL__:    COUNTER++,
    __RADIOACTIVE_GHOUL__:  COUNTER++,
    __ARMORED_GHOUL__:      COUNTER++,
    __PUMPKIN_GHOUL__:      COUNTER++,
    __LAPABOT_REPAIR__:     COUNTER++,
    __HAL_BOT__:            COUNTER++,
    __TESLA_BOT__:          COUNTER++
};

COUNTER = 0;
var SKILLS = {
    __SKILL__:      COUNTER++,
    __SURVIVAL__:   COUNTER++,
    __CLOTHE__:     COUNTER++,
    __BUILDING__:   COUNTER++,
    __TOOL__:       COUNTER++,
    __WEAPON__:     COUNTER++,
    __PLANT__:      COUNTER++,
    __DRUG__:       COUNTER++,
    __MINERAL__:    COUNTER++,
    __LOGIC__:      COUNTER++
};

COUNTER = 1;
var IID = {
    wood: COUNTER++,
    stone: COUNTER++,
    steel: COUNTER++,
    animalfat: COUNTER++,
    animaltendon: COUNTER++,
    string: COUNTER++,
    leather: COUNTER++,
    shapedmetal: COUNTER++,
    rawsteak: COUNTER++,
    cookedsteak: COUNTER++,
    rottensteak: COUNTER++,
    orange: COUNTER++,
    rottenorange: COUNTER++,
    seedorange: COUNTER++,
    hachet: COUNTER++,
    stonepickaxe: COUNTER++,
    steelpickaxe: COUNTER++,
    stoneaxe: COUNTER++,
    workbench: COUNTER++,
    spear: COUNTER++,
    bow: COUNTER++,
    pistol: COUNTER++,
    deserteagle: COUNTER++,
    shotgun: COUNTER++,
    ak47: COUNTER++,
    sniper: COUNTER++,
    woodenwall: COUNTER++,
    stonewall: COUNTER++,
    steelwall: COUNTER++,
    wooddoor: COUNTER++,
    stonedoor: COUNTER++,
    steeldoor: COUNTER++,
    campfire: COUNTER++,
    bullet9mm: COUNTER++,
    bulletshotgun: COUNTER++,
    sniperbullet: COUNTER++,
    medkit: COUNTER++,
    bandage: COUNTER++,
    soda: COUNTER++,
    mp5: COUNTER++,
    headscarf: COUNTER++,
    chapka: COUNTER++,
    coat: COUNTER++,
    gazmask: COUNTER++,
    gazprotection: COUNTER++,
    radiationsuit: COUNTER++,
    woodarrow: COUNTER++,
    campfirebbq: COUNTER++,
    smelter: COUNTER++,
    wooddoor1: COUNTER++,
    stonedoor1: COUNTER++,
    steeldoor1: COUNTER++,
    sulfur: COUNTER++,
    shapeduranium: COUNTER++,
    researchbench: COUNTER++,
    uranium: COUNTER++,
    weavingmachine: COUNTER++,
    gasoline: COUNTER++,
    sulfurpickaxe: COUNTER++,
    chest: COUNTER++,
    fridge: COUNTER++,
    woodfloor1: COUNTER++,
    hammer: COUNTER++,
    sleepingbag: COUNTER++,
    repairhammer: COUNTER++,
    nails: COUNTER++,
    woodfloor2: COUNTER++,
    smallwoodwall: COUNTER++,
    smallstonewall: COUNTER++,
    smallsteelwall: COUNTER++,
    MMnVW: COUNTER++,
    tomatosoup: COUNTER++,
    syringe: COUNTER++,
    chemicalcomponent: COUNTER++,
    radway: COUNTER++,
    tomatoseed: COUNTER++,
    tomato: COUNTER++,
    rottentomato: COUNTER++,
    can: COUNTER++,
    crossbow: COUNTER++,
    crossarrow: COUNTER++,
    nailgun: COUNTER++,
    sawedoff: COUNTER++,
    stonefloor1: COUNTER++,
    stonefloor2: COUNTER++,
    __ROAD__: COUNTER++,
    chips: COUNTER++,
    rottenchips: COUNTER++,
    electronicpart: COUNTER++,
    junk: COUNTER++,
    wires: COUNTER++,
    energycell: COUNTER++,
    laserpistol: COUNTER++,
    teslabench: COUNTER++,
    alloys: COUNTER++,
    sulfuraxe: COUNTER++,
    landmine: COUNTER++,
    dynamite: COUNTER++,
    c4bomb: COUNTER++,
    joystic: COUNTER++,
    composter: COUNTER++,
    metalhelmet: COUNTER++,
    weldinghelmet: COUNTER++,
    gladiatorhelmet: COUNTER++,
    leatherjacket: COUNTER++,
    kevlarsuit: COUNTER++,
    SWATsuit: COUNTER++,
    protectivesuit: COUNTER++,
    tesla1: COUNTER++,
    tesla2: COUNTER++,
    woodespike: COUNTER++,
    lasersubmachine: COUNTER++,
    granade: COUNTER++,
    superhammer: COUNTER++,
    ghoulblood: COUNTER++,
    camouflage: COUNTER++,
    agitator: COUNTER++,
    ghouldrug: COUNTER++,
    mushroom: COUNTER++,
    mushroom2: COUNTER++,
    mushroom3: COUNTER++,
    rottenmushroom1: COUNTER++,
    rottenmushroom2: COUNTER++,
    rottenmushroom3: COUNTER++,
    lapadoine: COUNTER++,
    lapabot: COUNTER++,
    smallwire: COUNTER++,
    pumpkin: COUNTER++,
    rottenpumpkin: COUNTER++,
    ghoulseed: COUNTER++,
    extractor: COUNTER++,
    antidote: COUNTER++,
    antidoteflower: COUNTER++,
    treeseed: COUNTER++,
    acorn: COUNTER++,
    rottenacorn: COUNTER++,
    lasersniper: COUNTER++,
    halbot: COUNTER++,
    teslabot: COUNTER++,
    cable: COUNTER++,
    cable2: COUNTER++,
    cable3: COUNTER++,
    cable4: COUNTER++,
    switch: COUNTER++,
    orgate: COUNTER++,
    andgate: COUNTER++,
    notgate: COUNTER++,
    lamp: COUNTER++,
    cablewall: COUNTER++,
    autodoor: COUNTER++,
    platform: COUNTER++,
    stonecave: COUNTER++,
    bunkerwall: COUNTER++,
    mustardfloor: COUNTER++,
    redfloor: COUNTER++,
    weldingmachine: COUNTER++,
    cable4: COUNTER++,
    __GATE_TIMER__: COUNTER++,
    xorgate: COUNTER++,
    skilleye1: COUNTER++,
    skilleye2: COUNTER++,
    skilleye3: COUNTER++,
    builderskill1: COUNTER++,
    builderskill2: COUNTER++,
    inventoryskill1: COUNTER++,
    inventoryskill2: COUNTER++,
    inventoryskill3: COUNTER++,
    inventoryskill4: COUNTER++,
    inventoryskill5: COUNTER++,
    lightweightskill: COUNTER++
};
COUNTER = 0;
var LOOTID = {
    mvnnv: COUNTER++,
    wWvMW: COUNTER++,
    wood: COUNTER++,
    mnVVV: COUNTER++,
    vWVMv: COUNTER++,
    stone: COUNTER++,
    steel: COUNTER++,
    animalfat: COUNTER++,
    animaltendon: COUNTER++,
    string: COUNTER++,
    leather: COUNTER++,
    shapedmetal: COUNTER++,
    rawsteak: COUNTER++,
    cookedsteak: COUNTER++,
    rottensteak: COUNTER++,
    orange: COUNTER++,
    rottenorange: COUNTER++,
    seedorange: COUNTER++,
    hachet: COUNTER++,
    stonepickaxe: COUNTER++,
    steelpickaxe: COUNTER++,
    stoneaxe: COUNTER++,
    workbench: COUNTER++,
    spear: COUNTER++,
    bow: COUNTER++,
    pistol: COUNTER++,
    deserteagle: COUNTER++,
    shotgun: COUNTER++,
    ak47: COUNTER++,
    sniper: COUNTER++,
    woodenwall: COUNTER++,
    stonewall: COUNTER++,
    steelwall: COUNTER++,
    wooddoor: COUNTER++,
    stonedoor: COUNTER++,
    steeldoor: COUNTER++,
    campfire: COUNTER++,
    bullet9mm: COUNTER++,
    bulletshotgun: COUNTER++,
    sniperbullet: COUNTER++,
    medkit: COUNTER++,
    bandage: COUNTER++,
    soda: COUNTER++,
    mp5: COUNTER++,
    headscarf: COUNTER++,
    chapka: COUNTER++,
    coat: COUNTER++,
    gazmask: COUNTER++,
    gazprotection: COUNTER++,
    radiationsuit: COUNTER++,
    woodarrow: COUNTER++,
    campfirebbq: COUNTER++,
    smelter: COUNTER++,
    wooddoor1: COUNTER++,
    stonedoor1: COUNTER++,
    steeldoor1: COUNTER++,
    sulfur: COUNTER++,
    shapeduranium: COUNTER++,
    researchbench: COUNTER++,
    uranium: COUNTER++,
    weavingmachine: COUNTER++,
    gasoline: COUNTER++,
    sulfurpickaxe: COUNTER++,
    chest: COUNTER++,
    fridge: COUNTER++,
    woodfloor1: COUNTER++,
    hammer: COUNTER++,
    sleepingbag: COUNTER++,
    repairhammer: COUNTER++,
    nails: COUNTER++,
    woodfloor2: COUNTER++,
    smallwoodwall: COUNTER++,
    smallstonewall: COUNTER++,
    smallsteelwall: COUNTER++,
    tomatosoup: COUNTER++,
    syringe: COUNTER++,
    chemicalcomponent: COUNTER++,
    radway: COUNTER++,
    tomatoseed: COUNTER++,
    tomato: COUNTER++,
    rottentomato: COUNTER++,
    can: COUNTER++,
    crossbow: COUNTER++,
    crossarrow: COUNTER++,
    nailgun: COUNTER++,
    sawedoff: COUNTER++,
    stonefloor1: COUNTER++,
    stonefloor2: COUNTER++,
    chips: COUNTER++,
    rottenchips: COUNTER++,
    electronicpart: COUNTER++,
    junk: COUNTER++,
    wires: COUNTER++,
    energycell: COUNTER++,
    laserpistol: COUNTER++,
    teslabench: COUNTER++,
    alloys: COUNTER++,
    sulfuraxe: COUNTER++,
    landmine: COUNTER++,
    dynamite: COUNTER++,
    c4bomb: COUNTER++,
    joystic: COUNTER++,
    composter: COUNTER++,
    metalhelmet: COUNTER++,
    weldinghelmet: COUNTER++,
    gladiatorhelmet: COUNTER++,
    leatherjacket: COUNTER++,
    kevlarsuit: COUNTER++,
    SWATsuit: COUNTER++,
    protectivesuit: COUNTER++,
    tesla1: COUNTER++,
    tesla2: COUNTER++,
    woodespike: COUNTER++,
    lasersubmachine: COUNTER++,
    granade: COUNTER++,
    superhammer: COUNTER++,
    ghoulblood: COUNTER++,
    camouflage: COUNTER++,
    agitator: COUNTER++,
    ghouldrug: COUNTER++,
    mushroom: COUNTER++,
    mushroom2: COUNTER++,
    mushroom3: COUNTER++,
    rottenmushroom1: COUNTER++,
    rottenmushroom2: COUNTER++,
    rottenmushroom3: COUNTER++,
    lapadoine: COUNTER++,
    lapabot: COUNTER++,
    smallwire: COUNTER++,
    pumpkin: COUNTER++,
    rottenpumpkin: COUNTER++,
    ghoulseed: COUNTER++,
    extractor: COUNTER++,
    antidote: COUNTER++,
    antidoteflower: COUNTER++,
    treeseed: COUNTER++,
    acorn: COUNTER++,
    rottenacorn: COUNTER++,
    lasersniper: COUNTER++,
    halbot: COUNTER++,
    teslabot: COUNTER++,
    cable: COUNTER++,
    cable2: COUNTER++,
    cable3: COUNTER++,
    cable4: COUNTER++,
    switch: COUNTER++,
    orgate: COUNTER++,
    andgate: COUNTER++,
    notgate: COUNTER++,
    lamp: COUNTER++,
    cablewall: COUNTER++,
    autodoor: COUNTER++,
    platform: COUNTER++,
    stonecave: COUNTER++,
    bunkerwall: COUNTER++,
    mustardfloor: COUNTER++,
    redfloor: COUNTER++,
    weldingmachine: COUNTER++,
    cable4: COUNTER++,
    __GATE_TIMER__: COUNTER++,
    xorgate: COUNTER++
};

COUNTER = 0;
var PARTICLESID = {
    __NOTHING__:        COUNTER++,
    __WOOD__:           COUNTER++,
    __STONE__:          COUNTER++,
    __STEEL__:          COUNTER++,
    __URANIUM__:        COUNTER++,
    __SULFUR__:         COUNTER++,
    __LEAF__:           COUNTER++,
    __LEAFTREE__:       COUNTER++,
    __ORANGE__:         COUNTER++,
    __BLOOD__:          COUNTER++,
    __FIRE__:           COUNTER++,
    __FUR__:            COUNTER++,
    __BED0__:           COUNTER++,
    __BED1__:           COUNTER++,
    __SOFA0__:          COUNTER++,
    __SOFA1__:          COUNTER++,
    __SOFA2__:          COUNTER++,
    __TOILET__:         COUNTER++,
    __WOODLIGHT__:      COUNTER++,
    __SAFE0__:          COUNTER++,
    __GARBAGE0__:       COUNTER++,
    __FRIDGE__:         COUNTER++,
    __PLOT__:           COUNTER++,
    __BARELRED__:       COUNTER++,
    __BARELGREEN__:     COUNTER++,
    __METAL__:          COUNTER++,
    __TOMATO__:         COUNTER++,
    __GREY_STEEL__:     COUNTER++,
    __BLUE_STEEL__:     COUNTER++,
    __RED_STEEL__:      COUNTER++,
    __KAKI__:           COUNTER++,
    __MUSHROOM1__:      COUNTER++,
    __MUSHROOM2__:      COUNTER++,
    __MUSHROOM3__:      COUNTER++,
    __GOLD__:           COUNTER++
};

var WAITADS = [{
    src: "img/wait-ads-1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/wait-ads-2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/wait-ads-3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/wait-ads-4.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/wait-ads-5.png",
    W: {
        isLoaded: 0
    }
}];
var PARTICLES = [];
PARTICLES[PARTICLESID.__NOTHING__] = [];
PARTICLES[PARTICLESID.__WOOD__] = [{
    src: "img/day-particules-wood1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-wood2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-wood3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-wood4.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-wood5.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__STONE__] = [{
    src: "img/day-particules-stone1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-stone2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-stone3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-stone4.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-stone5.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__STEEL__] = [{
    src: "img/day-particules-steel1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-steel2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-steel3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-steel4.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-steel5.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__URANIUM__] = [{
    src: "img/day-particules-uranium1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-uranium2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-uranium3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-uranium4.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-uranium5.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-uranium6.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-uranium7.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-uranium8.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-uranium9.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__SULFUR__] = [{
    src: "img/day-particules-sulfur1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-sulfur2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-sulfur3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-sulfur4.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-sulfur5.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-sulfur6.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-sulfur7.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-sulfur8.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-sulfur9.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__LEAF__] = [{
    src: "img/day-particules-leaf1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-leaf2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-leaf3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-leaf4.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-leaf5.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__LEAFTREE__] = [{
    src: "img/day-particules-wood1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-wood3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-leaftree1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-leaftree2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-leaftree3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-leaftree4.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-leaftree5.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.flower] = [{
    src: "img/day-particules-flower1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-flower2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-flower3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-flower4.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-flower5.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__ORANGE__] = [{
    src: "img/day-particules-leaf1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-leaf2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-leaf3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-leaf4.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-leaf5.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-leaf6.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-leaf7.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-leaf8.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-leaf9.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__BLOOD__] = [{
    src: "img/day-particules-blood1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-blood2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-blood3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-blood4.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-blood5.png",
    W: {
        isLoaded: 0
    }
}];
var NVMWV = 380;
PARTICLES[PARTICLESID.__FIRE__] = [{
    src: "img/day-particules-fire1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-fire2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-fire3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-fire4.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-fire5.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__FUR__] = [{
    src: "img/day-particules-fur1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-fur2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-fur3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-fur4.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-fur5.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__BED0__] = [{
    src: "img/day-particules-bed0.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-bed1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-bed2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-bed6.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-wood1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-wood3.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__BED1__] = [{
    src: "img/day-particules-bed3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-bed4.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-bed5.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-bed6.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-wood1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-wood3.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__SOFA0__] = [{
    src: "img/day-particules-sofa0.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-sofa1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-sofa2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-sofa3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-sofa4.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__SOFA1__] = [{
    src: "img/day-particules-sofa0.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-sofa1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-sofa2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-sofa5.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-sofa6.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__SOFA2__] = [{
    src: "img/day-particules-sofa0.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-sofa1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-sofa2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-sofa7.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-sofa8.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__TOILET__] = [{
    src: "img/day-particules-toilet0.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-toilet1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-toilet2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-toilet3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-toilet4.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__WOODLIGHT__] = [{
    src: "img/day-particules-woodlight0.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-woodlight1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-woodlight2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-woodlight3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-woodlight4.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__SAFE0__] = [{
    src: "img/day-particules-safe0.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-safe1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-safe2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-safe3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-safe4.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__GARBAGE0__] = [{
    src: "img/day-particules-garbage0.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-garbage1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-garbage2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-garbage3.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__FRIDGE__] = [{
    src: "img/day-particules-fridge0.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-fridge1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-fridge2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-fridge3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-fridge4.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__PLOT__] = [{
    src: "img/day-particules-plot0.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-plot1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-plot2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-plot3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-wood1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-wood3.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__BARELRED__] = [{
    src: "img/day-particules-barel0.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-barel1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-barel2.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__BARELGREEN__] = [{
    src: "img/day-particules-barel3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-barel4.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-barel5.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__METAL__] = [{
    src: "img/day-particules-metal0.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-metal1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-metal2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-metal3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-metal4.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__TOMATO__] = [{
    src: "img/day-particules-tomato0.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-tomato1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-tomato2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-tomato3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-tomato4.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__BLUE_STEEL__] = [{
    src: "img/day-particules-blue-steel0.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-blue-steel1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-blue-steel2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-blue-steel3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-blue-steel4.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__GREY_STEEL__] = [{
    src: "img/day-particules-grey-steel0.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-grey-steel1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-grey-steel2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-grey-steel3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-grey-steel4.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__RED_STEEL__] = [{
    src: "img/day-particules-red-steel0.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-red-steel1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-red-steel2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-red-steel3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-red-steel4.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__KAKI__] = [{
    src: "img/day-particules-kaki0.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-kaki1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-kaki2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-kaki3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-kaki4.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__MUSHROOM1__] = [{
    src: "img/day-particules-mushroom4.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-mushroom5.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-mushroom6.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__MUSHROOM2__] = [{
    src: "img/day-particules-mushroom1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-mushroom2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-mushroom3.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__MUSHROOM3__] = [{
    src: "img/day-particules-mushroom7.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-mushroom8.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-mushroom9.png",
    W: {
        isLoaded: 0
    }
}];
PARTICLES[PARTICLESID.__GOLD__] = [{
    src: "img/day-particules-gold0.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-gold1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-particules-gold2.png",
    W: {
        isLoaded: 0
    }
}];

function Detail(_name, _description, category, recipe, mm, area, level, previous, price) {
    this.name        = _name;
    this.description = _description;
    if (recipe !== window.undefined) this.recipe = recipe;
    if (mm !== window.undefined) this.stack = mm;
    if (area !== window.undefined) {
        this.area   = [];
        this.timer  = [];
        for (var i = 0; i < area.length; i++) {
            this.area[i]  = area[i][0];
            this.timer[i] = area[i][1];
        }
    }

    if (category !== window.undefined)  this.category   = category;
    else this.category  = -1;

    if (level !== window.undefined)     this.level      = level;
    else this.level     = -1;

    if (previous !== window.undefined)  this.previous   = previous;
    else this.previous  = -1;

    if (price !== window.undefined)     this.price      = price;
    else this.price     = 1;
};

var items = [{
    src: [],
    W: []
}, {
    id: IID.wood,
    img: {
        src: ["img/inv-wood-out.png", "img/inv-wood-in.png", "img/inv-wood-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Wood", "Found in trees, or on the ground."),
    stack: 255,
    loot: LOOTID.wood,
    score: 10
}, {
    id: IID.stone,
    img: {
        src: ["img/inv-stone-out.png", "img/inv-stone-in.png", "img/inv-stone-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Stone", "Find it on the ground or on the rock.", SKILLS.__MINERAL__, [], 0, [
        [AREAS.extractor, 80000]
    ]),
    craftStart: 50,
    craftRng: 200,
    stack: 255,
    loot: LOOTID.stone,
    score: 14
}, {
    id: IID.steel,
    img: {
        src: ["img/inv-steel-out.png", "img/inv-steel-in.png", "img/inv-steel-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Iron", "Melt it on a Firepit or a Smelter", SKILLS.__MINERAL__, [], 0, [
        [AREAS.extractor, 120000]
    ]),
    craftStart: 4,
    craftRng: 8,
    stack: 255,
    loot: LOOTID.steel,
    score: 28
}, {
    id: IID.animalfat,
    img: {
        src: ["img/inv-animal-fat-out.png", "img/inv-animal-fat-in.png", "img/inv-animal-fat-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Animal Fat", "Useful to craft bullet and clothes"),
    stack: 255,
    loot: LOOTID.animalfat,
    score: 32
}, {
    id: IID.animaltendon,
    img: {
        src: ["img/inv-animal-tendon-out.png", "img/inv-animal-tendon-in.png", "img/inv-animal-tendon-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Animal Tendon", "Useful to make string"),
    stack: 255,
    loot: LOOTID.animaltendon,
    score: 100
}, {
    id: IID.string,
    img: {
        src: ["img/inv-string-out.png", "img/inv-string-in.png", "img/inv-string-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("String", "Useful to craft many items.", SKILLS.__SURVIVAL__, [
        [IID.animaltendon, 2]
    ], 1, [
        [AREAS.workbench, 20000]
    ]),
    stack: 255,
    loot: LOOTID.string
}, {
    id: IID.leather,
    img: {
        src: ["img/inv-leather-boar-out.png", "img/inv-leather-boar-in.png", "img/inv-leather-boar-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Leather", "Useful to make clothes"),
    stack: 255,
    loot: LOOTID.leather,
    score: 32
}, {
    id: IID.shapedmetal,
    img: {
        src: ["img/inv-shaped-metal-out.png", "img/inv-shaped-metal-in.png", "img/inv-shaped-metal-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Shaped Metal", "To craft improved items.", SKILLS.__MINERAL__, [
        [IID.steel, 2]
    ], 1, [
        [AREAS.smelter, 3000],
        [AREAS.bbq, 30000]
    ]),
    stack: 255,
    loot: LOOTID.shapedmetal
}, {
    id: IID.rawsteak,
    img: {
        src: ["img/inv-raw-steak-out.png", "img/inv-raw-steak-in.png", "img/inv-raw-steak-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Raw Steak", "#Vegan"),
    stack: 10,
    loot: LOOTID.rawsteak,
    perish: 15,
    perishId: IID.rottensteak,
    idWeapon: 12,
    wait: 5,
    score: 28
}, {
    id: IID.cookedsteak,
    img: {
        src: ["img/inv-cooked-steak-out.png", "img/inv-cooked-steak-in.png", "img/inv-cooked-steak-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Cooked Steak", "Rare or medium?", SKILLS.__SURVIVAL__, [
        [IID.rawsteak, 1]
    ], 1, [
        [AREAS.firepart, 20000],
        [AREAS.bbq, 10000]
    ]),
    stack: 10,
    loot: LOOTID.cookedsteak,
    wait: 5,
    perish: 3,
    perishId: IID.rottensteak,
    idWeapon: 13     
}, {
    id: IID.rottensteak,
    img: {
        src: ["img/inv-rotten-steak-out.png", "img/inv-rotten-steak-in.png", "img/inv-rotten-steak-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    stack: 10,
    loot: LOOTID.rottensteak,
    wait: 5,
    idWeapon: 14,    
    detail: new Detail("Rotten Steak", "Don't eat that."),
    score: 20
}, {
    id: IID.orange,
    img: {
        src: ["img/inv-orange-out.png", "img/inv-orange-in.png", "img/inv-orange-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Orange", "A little hungry?"),
    stack: 20,
    loot: LOOTID.orange,
    wait: 5,
    perish: 10,
    perishId: IID.rottenorange,
    idWeapon: 15,    
    score: 24
}, {
    id: IID.rottenorange,
    img: {
        src: ["img/inv-rotten-orange-out.png", "img/inv-rotten-orange-in.png", "img/inv-rotten-orange-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Rotten Orange", "Go on, have a bite!", SKILLS.__PLANT__, [
        [IID.orange, 4]
    ], 8, [
        [AREAS.composter, 40000]
    ]),
    stack: 20,
    loot: LOOTID.rottenorange,
    wait: 5,
    idWeapon: 16,     
    score: 20
}, {
    id: IID.seedorange,
    img: {
        src: ["img/inv-orange-seed-out.png", "img/inv-orange-seed-in.png", "img/inv-orange-seed-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Orange Seed", "Fill up on Vitame C?", SKILLS.__PLANT__, [
        [IID.orange, 4]
    ], 1, [
        [AREAS.firepart, 20000],
        [AREAS.bbq, 15000]
    ]),
    stack: 40,
    loot: LOOTID.seedorange,
    fruit: LOOTID.orange,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [30, 30, 30, 30],
    height: [30, 30, 30, 30],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [35, 35, 35, 35],
    _y: [35, 35, 35, 35],
    blueprint: {
        src: "img/day-clear-blue-plant2-orange.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-plant2-orange.png",
        W: {
            isLoaded: 0
        }
    },
    door: 0,
    explosion: 0,
    behavior: BEHAVIOR.__SEED__,
    wire: 0,
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.orangeSeed,
    impact: SOUNDID.__NO_SOUND__,
    destroy: SOUNDID.__NO_SOUND__,
    building: [{
        src: "img/day-plant0-orange.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-plant1-orange.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-plant2-orange.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-plant3-orange.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-plant4-orange.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__ORANGE__,
    particlesDist: 68,
    timelife: ((5 * 8) * 60) * 1000,
    life: 250,
    score: 0
}, {
    id: IID.hachet,
    img: {
        src: ["img/inv-hachet-out.png", "img/inv-hachet-in.png", "img/inv-hachet-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Hatchet", "Harvest Wood and Stone.", SKILLS.__TOOL__, [
        [IID.wood, 10],  
        [IID.stone, 2]
    ], 1, [
        [AREAS.own, 5000],
        [AREAS.workbench, 10000]
    ]),
    idWeapon: 3,     
    stack: 1,
    loot: LOOTID.hachet, 
    wait: 10
}, {
    id: IID.stonepickaxe,
    img: {
        src: ["img/inv-stone-pickaxe-out.png", "img/inv-stone-pickaxe-in.png", "img/inv-stone-pickaxe-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Stone Pickaxe", "Mine Stone and Iron.", SKILLS.__TOOL__, [
        [IID.wood, 100],
        [IID.stone, 30]
    ], 1, [
        [AREAS.workbench, 30000]
    ]),
    idWeapon: 1,     
    stack: 1,
    loot: LOOTID.stonepickaxe,
    wait: 10
}, {
    id: IID.steelpickaxe,
    img: {
        src: ["img/inv-steel-pickaxe-out.png", "img/inv-steel-pickaxe-in.png", "img/inv-steel-pickaxe-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Metal Pickaxe", "Mine also Sulfur", SKILLS.__TOOL__, [
        [IID.stone, 150],
        [IID.shapedmetal, 6]
    ], 1, [
        [AREAS.researchbench, 60000]
    ], 6),
    idWeapon: 2,     
    stack: 1,
    loot: LOOTID.steelpickaxe,
    wait: 10
}, {
    id: IID.stoneaxe,
    img: {
        src: ["img/inv-stone-axe-out.png", "img/inv-stone-axe-in.png", "img/inv-stone-axe-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Metal Axe", "Harvest a lot of Wood", SKILLS.__TOOL__, [
        [IID.wood, 150],
        [IID.shapedmetal, 7]
    ], 1, [
        [AREAS.researchbench, 80000]
    ], 5),
    idWeapon: 4,     
    stack: 1,
    loot: LOOTID.stoneaxe,
    wait: 10
}, {
    id: IID.workbench,
    img: {
        src: ["img/inv-workbench-out.png", "img/inv-workbench-in.png", "img/inv-workbench-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Workbench", "Allow you to make new items.", SKILLS.__SURVIVAL__, [
        [IID.wood, 40],
        [IID.stone, 20]
    ], 1, [
        [AREAS.own, 15000],
        [AREAS.workbench, 15000]
    ]),
    idWeapon: 21,     
    fuel: -1,
    zid: 0,
    z: 1,
    area: AREAS.workbench,
    stack: 255,
    loot: LOOTID.workbench,
    wait: 10,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-workbench.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-workbench.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    areaEffect: 0,
    draw: Render.workbench,
    packetId: 16,
    interact: {
        src: "img/e-workbench.png",
        W: {
            isLoaded: 0
        }
    },
    impact: SOUNDID.wood,
    destroy: SOUNDID.wooddes,
    building: {
        src: "img/day-workbench.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__WOOD__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 250,
    score: 0
}, {
    id: IID.spear,
    img: {
        src: ["img/inv-wood-spear-out.png", "img/inv-wood-spear-in.png", "img/inv-wood-spear-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Wood Spear", "Don't forget to pick it up.", SKILLS.__WEAPON__, [
        [IID.wood, 70]
    ], 1, [
        [AREAS.own, 15000],
        [AREAS.workbench, 20000]
    ]),
    idWeapon: 5,     
    stack: 1,
    loot: LOOTID.spear,
    wait: 10
}, {
    id: IID.bow,
    img: {
        src: ["img/inv-wood-bow-out.png", "img/inv-wood-bow-in.png", "img/inv-wood-bow-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Wood Bow", "Where are the cowboys?", SKILLS.__WEAPON__, [
        [IID.wood, 60],
        [IID.animaltendon, 2]
    ], 1, [
        [AREAS.own, 35000],
        [AREAS.workbench, 50000]
    ]),
    bullet: IID.woodarrow,
    mMVwm: 1,
    idWeapon: 6,     
    stack: 1,
    loot: LOOTID.bow,
    wait: 10
}, {
    id: IID.pistol,
    img: {
        src: ["img/inv-9mm-out.png", "img/inv-9mm-in.png", "img/inv-9mm-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("9MM", "I hope you know how to aim.", SKILLS.__WEAPON__, [
        [IID.junk, 6],
        [IID.shapedmetal, 9]
    ], 1, [
        [AREAS.researchbench, 160000]
    ], 7),
    idWeapon: 8,     
    bullet: IID.bullet9mm,
    stack: 1,
    loot: LOOTID.pistol,
    wait: 10
}, {
    id: IID.deserteagle,
    img: {
        src: ["img/inv-desert-eagle-out.png", "img/inv-desert-eagle-in.png", "img/inv-desert-eagle-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Desert Eagle", "Pretty useful for self-defense.", SKILLS.__WEAPON__, [
        [IID.alloys, 4],
        [IID.shapedmetal, 2]
    ], 1, [
        [AREAS.researchbench, 180000]
    ], 9, IID.pistol),
    idWeapon: 9,     
    bullet: IID.bullet9mm,
    stack: 1,
    loot: LOOTID.deserteagle,
    wait: 10
}, {
    id: IID.shotgun,
    img: {
        src: ["img/inv-shotgun-out.png", "img/inv-shotgun-in.png", "img/inv-shotgun-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Shotgun", "He's dead now, don't you think?", SKILLS.__WEAPON__, [
        [IID.alloys, 6],
        [IID.shapedmetal, 6]
    ], 1, [
        [AREAS.researchbench, 200000]
    ], 11),
    idWeapon: 7,     
    bullet: IID.bulletshotgun,
    stack: 1,
    loot: LOOTID.shotgun,
    wait: 10
}, {
    id: IID.ak47,
    img: {
        src: ["img/inv-ak47-out.png", "img/inv-ak47-in.png", "img/inv-ak47-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("AK47", "Revolution time", SKILLS.__WEAPON__, [
        [IID.alloys, 14],
        [IID.shapedmetal, 8]
    ], 1, [
        [AREAS.researchbench, 180000]
    ], 12, IID.mp5),
    idWeapon: 10,     
    bullet: IID.sniperbullet,
    stack: 1,
    loot: LOOTID.ak47,
    wait: 10
}, {
    id: IID.sniper,
    img: {
        src: ["img/inv-sniper-out.png", "img/inv-sniper-in.png", "img/inv-sniper-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Sniper", "For the very angry shy", SKILLS.__WEAPON__, [
        [IID.alloys, 10],
        [IID.shapedmetal, 8]
    ], 1, [
        [AREAS.researchbench, 180000]
    ], 13),
    idWeapon: 11,     
    bullet: IID.sniperbullet,
    stack: 1,
    loot: LOOTID.sniper,
    wait: 10
}, {
    id: IID.woodenwall,
    img: {
        src: ["img/inv-wood-wall-out.png", "img/inv-wood-wall-in.png", "img/inv-wood-wall-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Wooden Wall", "Protected from the wind.", SKILLS.__BUILDING__, [
        [IID.wood, 20] 
    ], 1, [
        [AREAS.workbench, 10000]
    ]),
    idWeapon: 21,     
    fuel: -1,
    zid: 1,
    z: 1,
    stack: 255,
    loot: LOOTID.woodenwall,
    wait: 10,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-wood-wall.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-wood-wall.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 1,
    idWall: IID.woodenwall,
    lowWall: 0,
    door: 0,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    areaEffect: 0,
    draw: Render.wall,
    drawFloor: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    broken: [{
        src: "img/day-wood-wall-broken0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall-broken1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall-broken2.png",
        W: {
            isLoaded: 0
        }
    }],
    impact: SOUNDID.wood,
    destroy: SOUNDID.wooddes,
    building: [{
        src: "img/day-wood-wall0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall4.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall5.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall6.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall7.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall8.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall9.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall10.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall11.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall12.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall13.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall14.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall15.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall16.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall17.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall18.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall19.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall20.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall21.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall22.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall23.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall24.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall25.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall26.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall27.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall28.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall29.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall30.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall31.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall32.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall33.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall34.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall35.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall36.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall37.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall38.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall39.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall40.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall41.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall42.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall43.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall44.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall45.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-wall46.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__WOOD__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 3000,
    score: 0
}, {
    id: IID.stonewall,
    img: {
        src: ["img/inv-stone-wall-out.png", "img/inv-stone-wall-in.png", "img/inv-stone-wall-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Stone Wall", "Saved the 3 little pigs.", SKILLS.__BUILDING__, [
        [IID.stone, 20]
    ], 1, [
        [AREAS.workbench, 15000]
    ], 3),
    idWeapon: 21,     
    fuel: -1,
    zid: 1,
    z: 1,
    stack: 255,
    loot: LOOTID.stonewall,
    wait: 10,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-stone-wall.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-stone-wall.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 1,
    idWall: IID.stonewall,
    lowWall: 0,
    door: 0,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    areaEffect: 0,
    draw: Render.wall,
    drawFloor: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    broken: [{
        src: "img/day-stone-wall-broken0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall-broken1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall-broken2.png",
        W: {
            isLoaded: 0
        }
    }],
    impact: SOUNDID.stone,
    destroy: SOUNDID.stonedes,
    building: [{
        src: "img/day-stone-wall0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall4.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall5.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall6.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall7.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall8.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall9.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall10.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall11.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall12.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall13.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall14.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall15.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall16.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall17.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall18.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall19.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall20.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall21.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall22.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall23.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall24.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall25.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall26.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall27.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall28.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall29.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall30.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall31.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall32.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall33.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall34.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall35.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall36.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall37.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall38.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall39.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall40.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall41.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall42.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall43.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall44.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall45.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-wall46.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__STONE__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 7000,
    score: 0
}, {
    id: IID.steelwall,
    img: {
        src: ["img/inv-steel-wall-out.png", "img/inv-steel-wall-in.png", "img/inv-steel-wall-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Metal Wall", "Afraid we'll find you?", SKILLS.__BUILDING__, [
        [IID.shapedmetal, 3]
    ], 1, [
        [AREAS.researchbench, 20000]
    ], 6, IID.stonewall),
    idWeapon: 21,     
    fuel: -1,
    zid: 1,
    z: 1,
    stack: 255,
    loot: LOOTID.steelwall,
    wait: 10,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-stone-wall.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-stone-wall.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 1,
    idWall: IID.steelwall,
    lowWall: 0,
    door: 0,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    areaEffect: 0,
    draw: Render.wall,
    drawFloor: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    broken: [{
        src: "img/day-steel-wall-broken0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall-broken1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall-broken2.png",
        W: {
            isLoaded: 0
        }
    }],
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: [{
        src: "img/day-steel-wall0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall4.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall5.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall6.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall7.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall8.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall9.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall10.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall11.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall12.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall13.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall14.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall15.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall16.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall17.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall18.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall19.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall20.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall21.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall22.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall23.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall24.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall25.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall26.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall27.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall28.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall29.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall30.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall31.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall32.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall33.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall34.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall35.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall36.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall37.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall38.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall39.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall40.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall41.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall42.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall43.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall44.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall45.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-wall46.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__STEEL__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 15000,
    score: 0
}, {
    id: IID.wooddoor,
    img: {
        src: ["img/inv-wood-door-out.png", "img/inv-wood-door-in.png", "img/inv-wood-door-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Wooden Low Door", "You can shoot through it.", SKILLS.__BUILDING__, [
        [IID.wood, 40]
    ], 1, [
        [AREAS.workbench, 15000]
    ]),
    idWeapon: 21,     
    fuel: -1,
    zid: 0,
    z: 0,
    stack: 255,
    loot: LOOTID.wooddoor,
    wait: 10,
    delay: 600,
    width: [100, 35, 100, 35],
    height: [35, 100, 35, 100],
    xCenter: [0, -30, 0, 30],
    yCenter: [30, 0, -30, 0],
    _x: [0, 0, 0, 65],
    _y: [65, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-wood-door.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-wood-door.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 1,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    angle: window.Math.PI / 2,
    iMove: [1, 0, -1, 0],
    jMove: [0, -1, 0, 1],
    xMove: [0, 0, 65, 0],
    yMove: [0, 0, 0, 65],
    wMove: [35, 100, 35, 100],
    hMove: [100, 35, 100, 35],
    xRotate: 6,
    yRotate: 46,
    draw: Render.door,
    packetId: 15,
    interact: {
        src: "img/e-opendoor.png",
        W: {
            isLoaded: 0
        }
    },
    mMnmM: {
        src: "img/e-closedoor.png",
        W: {
            isLoaded: 0
        }
    },
    broken: [{
        src: "img/day-wood-door-broken0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-door-broken1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-door-broken2.png",
        W: {
            isLoaded: 0
        }
    }],
    impact: SOUNDID.wood,
    destroy: SOUNDID.wooddes,
    building: {
        src: "img/day-wood-door.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__WOOD__,
    particlesDist: 55,
    timelife: 315360000000,
    life: 2000,
    score: 0
}, {
    id: IID.stonedoor,
    img: {
        src: ["img/inv-stone-door-out.png", "img/inv-stone-door-in.png", "img/inv-stone-door-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Stone Low Door", "You can shoot through it.", SKILLS.__BUILDING__, [
        [IID.stone, 40]
    ], 1, [
        [AREAS.workbench, 15000]
    ], 3),
    idWeapon: 21,     
    fuel: -1,
    zid: 0,
    z: 0,
    stack: 255,
    loot: LOOTID.stonedoor,
    wait: 10,
    delay: 600,
    width: [100, 35, 100, 35],
    height: [35, 100, 35, 100],
    xCenter: [0, -30, 0, 30],
    yCenter: [30, 0, -30, 0],
    _x: [0, 0, 0, 65],
    _y: [65, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-stone-door.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-stone-door.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 1,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    angle: window.Math.PI / 2,
    iMove: [1, 0, -1, 0],
    jMove: [0, -1, 0, 1],
    xMove: [0, 0, 65, 0],
    yMove: [0, 0, 0, 65],
    wMove: [35, 100, 35, 100],
    hMove: [100, 35, 100, 35],
    xRotate: 6,
    yRotate: 46,
    draw: Render.door,
    packetId: 15,
    interact: {
        src: "img/e-opendoor.png",
        W: {
            isLoaded: 0
        }
    },
    mMnmM: {
        src: "img/e-closedoor.png",
        W: {
            isLoaded: 0
        }
    },
    broken: [{
        src: "img/day-stone-door-broken0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-door-broken1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-door-broken2.png",
        W: {
            isLoaded: 0
        }
    }],
    impact: SOUNDID.stone,
    destroy: SOUNDID.stonedes,
    building: {
        src: "img/day-stone-door.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__STONE__,
    particlesDist: 55,
    timelife: 315360000000,
    life: 5000,
    score: 0
}, {
    id: IID.steeldoor,
    img: {
        src: ["img/inv-steel-door-out.png", "img/inv-steel-door-in.png", "img/inv-steel-door-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Metal Low Door", "Killing at home, for more comfort.", SKILLS.__BUILDING__, [
        [IID.shapedmetal, 6]
    ], 1, [
        [AREAS.researchbench, 30000]
    ], 6, IID.stonedoor),
    idWeapon: 21,     
    fuel: -1,
    zid: 0,
    z: 0,
    stack: 255,
    loot: LOOTID.steeldoor,
    wait: 10,
    delay: 600,
    width: [100, 35, 100, 35],
    height: [35, 100, 35, 100],
    xCenter: [0, -30, 0, 30],
    yCenter: [30, 0, -30, 0],
    _x: [0, 0, 0, 65],
    _y: [65, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-stone-door.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-stone-door.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 1,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    angle: window.Math.PI / 2,
    iMove: [1, 0, -1, 0],
    jMove: [0, -1, 0, 1],
    xMove: [0, 0, 65, 0],
    yMove: [0, 0, 0, 65],
    wMove: [35, 100, 35, 100],
    hMove: [100, 35, 100, 35],
    xRotate: 6,
    yRotate: 46,
    draw: Render.door,
    packetId: 15,
    interact: {
        src: "img/e-opendoor.png",
        W: {
            isLoaded: 0
        }
    },
    mMnmM: {
        src: "img/e-closedoor.png",
        W: {
            isLoaded: 0
        }
    },
    broken: [{
        src: "img/day-steel-door-broken0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-door-broken1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-door-broken2.png",
        W: {
            isLoaded: 0
        }
    }],
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: {
        src: "img/day-steel-door.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__STEEL__,
    particlesDist: 55,
    timelife: 315360000000,
    life: 10000,
    score: 0
}, {
    id: IID.campfire,
    img: {
        src: ["img/inv-campfire-out.png", "img/inv-campfire-in.png", "img/inv-campfire-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Campfire", "Warm you when you're cold.", SKILLS.__SURVIVAL__, [
        [IID.wood, 30],
        [IID.stone, 5]
    ], 1, [
        [AREAS.own, 8000],
        [AREAS.workbench, 15000]
    ]),
    idWeapon: 21,     
    fuel: 15000,
    zid: -1,
    z: 0,
    area: AREAS.firepart,
    stack: 255,
    loot: LOOTID.campfire,
    wait: 10,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-campfire.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-campfire.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    areaEffect: __WARM__,
    draw: Render.campfire,
    VvmvM: Render.campfireLight,
    packetId: 16,
    interact: {
        src: "img/e-campfire.png",
        W: {
            isLoaded: 0
        }
    },
    impact: SOUNDID.wood,
    destroy: SOUNDID.wooddes,
    building: {
        src: "img/day-campfire.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__WOOD__,
    particlesDist: 80,
    timelife: (1000 * 60) * 10,
    life: 150,
    score: 0
}, {
    id: IID.bullet9mm,
    img: {
        src: ["img/inv-bullet-9mm-out.png", "img/inv-bullet-9mm-in.png", "img/inv-bullet-9mm-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Bullet", "For 9MM, Desert Eagle, and MP5 ", SKILLS.__WEAPON__, [
        [IID.sulfur, 3],
        [IID.shapedmetal, 3],
        [IID.animalfat, 3]
    ], 30, [
        [AREAS.researchbench, 10000]
    ], 6),
    stack: 255,
    loot: LOOTID.bullet9mm
}, {
    id: IID.bulletshotgun,
    img: {
        src: ["img/inv-bullet-shotgun-out.png", "img/inv-bullet-shotgun-in.png", "img/inv-bullet-shotgun-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Cartridge", "For Shotgun", SKILLS.__WEAPON__, [
        [IID.alloys, 1],
        [IID.shapedmetal, 4],
        [IID.animalfat, 4]
    ], 15, [
        [AREAS.researchbench, 10000]
    ], 10),
    stack: 255,
    loot: LOOTID.bulletshotgun
}, {
    id: IID.sniperbullet,
    img: {
        src: ["img/inv-bullet-sniper-out.png", "img/inv-bullet-sniper-in.png", "img/inv-bullet-sniper-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Heavy Bullet", "For Sniper, and AK47", SKILLS.__WEAPON__, [
        [IID.alloys, 1],
        [IID.shapedmetal, 4],
        [IID.animalfat, 4]
    ], 30, [
        [AREAS.researchbench, 10000]
    ], 11),
    stack: 255,
    loot: LOOTID.sniperbullet
}, {
    id: IID.medkit,
    img: {
        src: ["img/inv-medikit-out.png", "img/inv-medikit-in.png", "img/inv-medikit-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Medkit", "Regenerate your life.", SKILLS.__DRUG__, [
        [IID.string, 2],
        [IID.bandage, 1],
        [IID.leather, 2],
        [IID.shapedmetal, 2]
    ], 1, [
        [AREAS.researchbench, 80000]
    ], 10),
    idWeapon: 17,     
    stack: 2,
    loot: LOOTID.medkit,
    wait: 10
}, {
    id: IID.bandage,
    img: {
        src: ["img/inv-bandage-out.png", "img/inv-bandage-in.png", "img/inv-bandage-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Bandage", "To heal the boo-boos.", SKILLS.__DRUG__, [
        [IID.string, 1],
        [IID.leather, 2]
    ], 1, [
        [AREAS.weavingmachine, 20000]
    ]),
    idWeapon: 18,     
    stack: 5,
    loot: LOOTID.bandage,
    wait: 10
}, {
    id: IID.soda,
    img: {
        src: ["img/inv-soda-out.png", "img/inv-soda-in.png", "img/inv-soda-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Soda", "Give energy.", SKILLS.__SURVIVAL__, [
        [IID.ghoulblood, 1],
        [IID.chemicalcomponent, 1],
        [IID.can, 1]
    ], 1, [
        [AREAS.firepart, 40000],
        [AREAS.bbq, 40000]
    ], 5),
    idWeapon: 19,     
    stack: 5,
    loot: LOOTID.soda,
    perish: 2,
    perishId: IID.can,
    wait: 10
}, {
    id: IID.mp5,
    img: {
        src: ["img/inv-MP5-out.png", "img/inv-MP5-in.png", "img/inv-MP5-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("MP5", "Not bad.", SKILLS.__WEAPON__, [
        [IID.alloys, 6],
        [IID.shapedmetal, 6]
    ], 1, [
        [AREAS.researchbench, 200000]
    ], 10),
    idWeapon: 20,     
    bullet: IID.bullet9mm,
    stack: 1,
    loot: LOOTID.mp5,
    wait: 10
}, {
    id: IID.headscarf,
    img: {
        src: ["img/inv-headscarf-out.png", "img/inv-headscarf-in.png", "img/inv-headscarf-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Headscarf", "Warm you up.", SKILLS.__CLOTHE__, [
        [IID.string, 1],
        [IID.leather, 1]
    ], 1, [
        [AREAS.weavingmachine, 60000]
    ]),
    idClothe: 1,
    stack: 1,
    loot: LOOTID.headscarf,
    wait: 10,
    warm: 0.00085,
    def: 0,
    bul: 0,
    ene: 0,
    boom: 0,
    rad: 0,
    speed: 0
}, {
    id: IID.chapka,
    img: {
        src: ["img/inv-chapka-out.png", "img/inv-chapka-in.png", "img/inv-chapka-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Chapka", "You look like a real woodcutter.", SKILLS.__CLOTHE__, [
        [IID.string, 6],
        [IID.leather, 8],
        [IID.headscarf, 1]
    ], 1, [
        [AREAS.weavingmachine, 120000]
    ], 7),
    idClothe: 2,
    stack: 1,
    loot: LOOTID.chapka,
    wait: 10,
    warm: 0.0017,
    def: 0,
    bul: 0,
    ene: 0,
    boom: 0,
    rad: 0,
    speed: 0
}, {
    id: IID.coat,
    img: {
        src: ["img/inv-coat-out.png", "img/inv-coat-in.png", "img/inv-coat-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Winter Coat", "Is the weather really that cold?", SKILLS.__CLOTHE__, [
        [IID.string, 15],
        [IID.leather, 20],
        [IID.chapka, 1]
    ], 1, [
        [AREAS.weavingmachine, 180000]
    ], 9, IID.chapka),
    idClothe: 3,
    stack: 1,
    loot: LOOTID.coat,
    wait: 10,
    warm: 0.0026,
    def: 0,
    bul: 0,
    ene: 0,
    boom: 0,
    rad: 0,
    speed: 0
}, {
    id: IID.gazmask,
    img: {
        src: ["img/inv-gaz-mask-out.png", "img/inv-gaz-mask-in.png", "img/inv-gaz-mask-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Radiation Mask", "Protect you from Radioactivity.", SKILLS.__CLOTHE__, [
        [IID.shapedmetal, 1],
        [IID.string, 1],
        [IID.leather, 2]
    ], 1, [
        [AREAS.weavingmachine, 60000]
    ]),
    idClothe: 4,
    stack: 1,
    loot: LOOTID.gazmask,
    wait: 10,
    warm: 0,
    def: 0,
    bul: 0,
    ene: 0,
    boom: 0,
    rad: 0.009,
    speed: 0
}, {
    id: IID.gazprotection,
    img: {
        src: ["img/inv-gaz-protection-out.png", "img/inv-gaz-protection-in.png", "img/inv-gaz-protection-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Min. Radiation Suit", "Previously, on Breaking Bad.", SKILLS.__CLOTHE__, [
        [IID.alloys, 2],
        [IID.shapedmetal, 2],
        [IID.string, 4],
        [IID.leather, 4],
        [IID.gazmask, 1]
    ], 1, [
        [AREAS.weavingmachine, 90000]
    ], 8),
    idClothe: 5,
    stack: 1,
    loot: LOOTID.gazprotection,
    wait: 10,
    warm: 0.0006,
    def: 0,
    bul: 0,
    ene: 0,
    boom: 0,
    rad: 0.016,
    speed: 0
}, {
    id: IID.radiationsuit,
    img: {
        src: ["img/inv-radiation-suit-out.png", "img/inv-radiation-suit-in.png", "img/inv-radiation-suit-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Radiation Suit", "Let's not grow a second head.", SKILLS.__CLOTHE__, [
        [IID.alloys, 6],
        [IID.shapedmetal, 4],
        [IID.string, 8],
        [IID.leather, 20],
        [IID.gazprotection, 1]
    ], 1, [
        [AREAS.weavingmachine, 180000]
    ], 10, IID.gazprotection),
    idClothe: 6,
    stack: 1,
    loot: LOOTID.radiationsuit,
    wait: 10,
    warm: 0,
    def: 0,
    bul: 0,
    ene: 0,
    boom: 0,
    rad: 0.022,
    speed: -0.01
}, {
    id: IID.woodarrow,
    img: {
        src: ["img/inv-wood-arrow-out.png", "img/inv-wood-arrow-in.png", "img/inv-wood-arrow-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Wood Arrow", "Needed to use bow.", SKILLS.__WEAPON__, [
        [IID.wood, 40]
    ], 5, [
        [AREAS.own, 15000],
        [AREAS.workbench, 10000]
    ]),
    stack: 255,
    loot: LOOTID.woodarrow
}, {
    id: IID.campfirebbq,
    img: {
        src: ["img/inv-campfire-bbq-out.png", "img/inv-campfire-bbq-in.png", "img/inv-campfire-bbq-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Firepit", "Warm up and melt iron slowly.", SKILLS.__SURVIVAL__, [
        [IID.wood, 120],
        [IID.stone, 20],
        [IID.steel, 4]
    ], 1, [
        [AREAS.workbench, 20000]
    ], 3),
    idWeapon: 21,     
    fuel: 20000,
    zid: -1,
    z: 0,
    area: AREAS.bbq,
    stack: 255,
    loot: LOOTID.campfirebbq,
    wait: 10,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-campfire-bbq.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-campfire-bbq.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    areaEffect: __WARM__,
    draw: Render.campfire,
    VvmvM: Render.campfireLight,
    packetId: 16,
    interact: {
        src: "img/e-campfire-bbq.png",
        W: {
            isLoaded: 0
        }
    },
    impact: SOUNDID.wood,
    destroy: SOUNDID.wooddes,
    building: {
        src: "img/day-campfire-bbq.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__WOOD__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 250,
    score: 0
}, {
    id: IID.smelter,
    img: {
        src: ["img/inv-smelter-out.png", "img/inv-smelter-in.png", "img/inv-smelter-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Smelter", "Melt iron, uranium and alloys", SKILLS.__SURVIVAL__, [
        [IID.shapedmetal, 6],
        [IID.electronicpart, 1]
    ], 1, [
        [AREAS.researchbench, 100000]
    ], 10),
    idWeapon: 21,     
    fuel: 42000,
    zid: 1,
    z: 1,
    area: AREAS.smelter,
    stack: 255,
    loot: LOOTID.smelter,
    wait: 10,
    delay: 1000,
    width: [100, 260, 100, 260],
    height: [260, 100, 260, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, -80, 0, -80],
    _y: [-80, 0, -80, 0],
    iTile: [-1, 0, -1, 0],
    jTile: [0, -1, 0, -1],
    blueprint: {
        src: "img/day-clear-blue-smelter.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-smelter.png",
        W: {
            isLoaded: 0
        }
    },
    xLight: [-20.5, -101.5, 20.5, 101.5],
    yLight: [101.5, -20.5, -101, 20.5],
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    areaEffect: 0,
    draw: Render.smelter,
    packetId: 16,
    interact: {
        src: "img/e-smelter.png",
        W: {
            isLoaded: 0
        }
    },
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: [{
        src: "img/day-smelter-off.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-smelter-on.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-smelter-light-up.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-smelter-light-down.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__METAL__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 3000,
    score: 0
}, {
    id: IID.wooddoor1,
    img: {
        src: ["img/inv-wood-door1-out.png", "img/inv-wood-door1-in.png", "img/inv-wood-door1-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Wooden Door", "Let's hope it holds.", SKILLS.__BUILDING__, [
        [IID.wood, 60]
    ], 1, [
        [AREAS.workbench, 20000]
    ]),
    idWeapon: 21,     
    fuel: -1,
    zid: 1,
    z: 1,
    stack: 255,
    loot: LOOTID.wooddoor1,
    wait: 10,
    delay: 600,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-wood-door1.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-wood-door1.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 1,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    angle: window.Math.PI,
    iMove: [1, -1, -1, 1],
    jMove: [-1, -1, 1, 1],
    xMove: [0, 0, 0, 0],
    yMove: [0, 0, 0, 0],
    wMove: [100, 100, 100, 100],
    hMove: [100, 100, 100, 100],
    xRotate: 17,
    yRotate: 113,
    draw: Render.door,
    packetId: 15,
    interact: {
        src: "img/e-opendoor.png",
        W: {
            isLoaded: 0
        }
    },
    mMnmM: {
        src: "img/e-closedoor.png",
        W: {
            isLoaded: 0
        }
    },
    broken: [{
        src: "img/day-wood-door1-broken0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-door1-broken1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-door1-broken2.png",
        W: {
            isLoaded: 0
        }
    }],
    impact: SOUNDID.wood,
    destroy: SOUNDID.wooddes,
    building: {
        src: "img/day-wood-door1.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__WOOD__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 2500,
    score: 0
}, {
    id: IID.stonedoor1,
    img: {
        src: ["img/inv-stone-door1-out.png", "img/inv-stone-door1-in.png", "img/inv-stone-door1-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Stone Door", "Not too heavy to open, I hope.", SKILLS.__BUILDING__, [
        [IID.stone, 60]
    ], 1, [
        [AREAS.workbench, 20000]
    ], 3),
    idWeapon: 21,     
    fuel: -1,
    zid: 1,
    z: 1,
    stack: 255,
    loot: LOOTID.stonedoor1,
    wait: 10,
    delay: 600,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-stone-door1.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-stone-door1.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 1,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    angle: window.Math.PI,
    iMove: [1, -1, -1, 1],
    jMove: [-1, -1, 1, 1],
    xMove: [0, 0, 0, 0],
    yMove: [0, 0, 0, 0],
    wMove: [100, 100, 100, 100],
    hMove: [100, 100, 100, 100],
    xRotate: 17,
    yRotate: 113,
    draw: Render.door,
    packetId: 15,
    interact: {
        src: "img/e-opendoor.png",
        W: {
            isLoaded: 0
        }
    },
    mMnmM: {
        src: "img/e-closedoor.png",
        W: {
            isLoaded: 0
        }
    },
    broken: [{
        src: "img/day-stone-door1-broken0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-door1-broken1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-door1-broken2.png",
        W: {
            isLoaded: 0
        }
    }],
    impact: SOUNDID.stone,
    destroy: SOUNDID.stonedes,
    building: {
        src: "img/day-stone-door1.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__STONE__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 6000,
    score: 0
}, {
    id: IID.steeldoor1,
    img: {
        src: ["img/inv-steel-door1-out.png", "img/inv-steel-door1-in.png", "img/inv-steel-door1-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Metal Door", "I guess you're safe.", SKILLS.__BUILDING__, [
        [IID.shapedmetal, 9]
    ], 1, [
        [AREAS.researchbench, 40000]
    ], 6, IID.stonedoor1),
    idWeapon: 21,     
    fuel: -1,
    zid: 1,
    z: 1,
    stack: 255,
    loot: LOOTID.steeldoor1,
    wait: 10,
    delay: 600,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-stone-door1.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-stone-door1.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 1,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    angle: window.Math.PI,
    iMove: [1, -1, -1, 1],
    jMove: [-1, -1, 1, 1],
    xMove: [0, 0, 0, 0],
    yMove: [0, 0, 0, 0],
    wMove: [100, 100, 100, 100],
    hMove: [100, 100, 100, 100],
    xRotate: 17,
    yRotate: 113,
    draw: Render.door,
    packetId: 15,
    interact: {
        src: "img/e-opendoor.png",
        W: {
            isLoaded: 0
        }
    },
    mMnmM: {
        src: "img/e-closedoor.png",
        W: {
            isLoaded: 0
        }
    },
    broken: [{
        src: "img/day-steel-door1-broken0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-door1-broken1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-door1-broken2.png",
        W: {
            isLoaded: 0
        }
    }],
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: {
        src: "img/day-steel-door1.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__STEEL__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 12500,
    score: 0
}, {
    id: IID.sulfur,
    img: {
        src: ["img/inv-sulfur-out.png", "img/inv-sulfur-in.png", "img/inv-sulfur-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Sulfur", "Sulfur in such a cold landscape?", SKILLS.__MINERAL__, [], 0, [
        [AREAS.extractor, 240000]
    ]),
    craftStart: 4,
    craftRng: 8,
    stack: 255,
    loot: LOOTID.sulfur,
    score: 32
}, {
    id: IID.shapeduranium,
    img: {
        src: ["img/inv-shaped-uranium-out.png", "img/inv-shaped-uranium-in.png", "img/inv-shaped-uranium-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Shaped Uranium", "Are you out of your mind?", SKILLS.__MINERAL__, [
        [IID.uranium, 1]
    ], 1, [
        [AREAS.smelter, 20000]
    ]),
    stack: 255,
    loot: LOOTID.shapeduranium,
    score: 0
}, {
    id: IID.researchbench,
    img: {
        src: ["img/inv-workbench2-out.png", "img/inv-workbench2-in.png", "img/inv-workbench2-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Research Bench", "Allow you to make new items", SKILLS.__SURVIVAL__, [
        [IID.shapedmetal, 6],
        [IID.electronicpart, 1]
    ], 1, [
        [AREAS.workbench, 50000]
    ], 6),
    idWeapon: 21,     
    fuel: -1,
    zid: 0,
    z: 1,
    area: AREAS.researchbench,
    stack: 255,
    loot: LOOTID.researchbench,
    wait: 10,
    delay: 1000,
    width: [100, 290, 100, 280],
    height: [280, 100, 280, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, -90, 0, -90],
    _y: [-90, 0, -90, 0],
    iTile: [-1, 0, -1, 0],
    jTile: [0, -1, 0, -1],
    blueprint: {
        src: "img/day-clear-blue-workbench2.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-workbench2.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    areaEffect: 0,
    draw: Render.workbench2,
    packetId: 16,
    interact: {
        src: "img/e-workbench2.png",
        W: {
            isLoaded: 0
        }
    },
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: {
        src: "img/day-workbench2.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__METAL__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 400,
    score: 0
}, {
    id: IID.uranium,
    img: {
        src: ["img/inv-uranium-out.png", "img/inv-uranium-in.png", "img/inv-uranium-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Uranium", "Do you want to end up as Marie Curie?", SKILLS.__MINERAL__, [], 0, [
        [AREAS.extractor, 240000]
    ]),
    craftStart: 2,
    craftRng: 4,
    stack: 255,
    loot: LOOTID.uranium,
    score: 45
}, {
    id: IID.weavingmachine,
    img: {
        src: ["img/inv-weaving-machine-out.png", "img/inv-weaving-machine-in.png", "img/inv-weaving-machine-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Weaving Machine", "Allow you to sew clothes", SKILLS.__SURVIVAL__, [
        [IID.wood, 80],
        [IID.stone, 20],
        [IID.string, 2]
    ], 1, [
        [AREAS.workbench, 60000]
    ]),
    idWeapon: 21,     
    fuel: -1,
    zid: 0,
    z: 1,
    area: AREAS.weavingmachine,
    stack: 255,
    loot: LOOTID.weavingmachine,
    wait: 10,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-weaving-machine.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-weaving-machine.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    areaEffect: 0,
    draw: Render.workbench,
    packetId: 16,
    interact: {
        src: "img/e-weaving-machine.png",
        W: {
            isLoaded: 0
        }
    },
    impact: SOUNDID.wood,
    destroy: SOUNDID.wooddes,
    building: {
        src: "img/day-weaving-machine.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__WOOD__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 250,
    score: 0
}, {
    id: IID.gasoline,
    img: {
        src: ["img/inv-gasoline-out.png", "img/inv-gasoline-in.png", "img/inv-gasoline-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Gasoline", "Fuel for Smelter", SKILLS.__SURVIVAL__, [
        [IID.rottenorange, 4],
        [IID.sulfur, 1]
    ], 1, [
        [AREAS.researchbench, 20000]
    ]),
    stack: 255,
    loot: LOOTID.gasoline
}, {
    id: IID.sulfurpickaxe,
    img: {
        src: ["img/inv-sulfur-pickaxe-out.png", "img/inv-sulfur-pickaxe-in.png", "img/inv-sulfur-pickaxe-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Sulfur Pickaxe", "Mine also Uranium", SKILLS.__TOOL__, [
        [IID.alloys, 2],
        [IID.shapedmetal, 6],
        [IID.sulfur, 6]
    ], 1, [
        [AREAS.researchbench, 90000]
    ], 9, IID.steelpickaxe),
    idWeapon: 22,     
    stack: 1,
    loot: LOOTID.sulfurpickaxe,
    wait: 10
}, {
    id: IID.chest,
    img: {
        src: ["img/inv-chest-out.png", "img/inv-chest-in.png", "img/inv-chest-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Wood chest", "You can't store food in.", SKILLS.__BUILDING__, [
        [IID.wood, 50],
        [IID.stone, 20]
    ], 1, [
        [AREAS.workbench, 30000]
    ], 8),
    idWeapon: 21,     
    fuel: -1,
    zid: 0,
    z: 0,
    stack: 255,
    loot: LOOTID.chest,
    wait: 10,
    chest: 1,
    delay: 600,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-chest.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-chest.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    angle: window.Math.PI / 2,
    draw: Render.workbench,
    packetId: 25,
    interact: {
        src: "img/e-chest.png",
        W: {
            isLoaded: 0
        }
    },
    impact: SOUNDID.wood,
    destroy: SOUNDID.wooddes,
    building: {
        src: "img/day-chest.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__WOOD__,
    particlesDist: 55,
    timelife: 315360000000,
    life: 300,
    score: 0
}, {
    id: IID.fridge,
    img: {
        src: ["img/inv-fridge-out.png", "img/inv-fridge-in.png", "img/inv-fridge-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Fridge", "Save your food.", SKILLS.__BUILDING__, [
        [IID.shapedmetal, 5],
        [IID.energycell, 4]
    ], 1, [
        [AREAS.researchbench, 90000]
    ], 9),
    idWeapon: 21,     
    fuel: -1,
    zid: 0,
    z: 0,
    stack: 255,
    loot: LOOTID.fridge,
    wait: 10,
    chest: 1,
    fridge: 1,
    delay: 600,
    width: [50, 100, 50, 100],
    height: [100, 50, 100, 50],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 50, 0],
    _y: [0, 0, 0, 50],
    blueprint: {
        src: "img/day-clear-blue-fridge.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-fridge.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    angle: window.Math.PI / 2,
    draw: Render.workbench,
    packetId: 25,
    interact: {
        src: "img/e-fridge.png",
        W: {
            isLoaded: 0
        }
    },
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: {
        src: "img/day-fridge.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__METAL__,
    particlesDist: 55,
    timelife: 315360000000,
    life: 300,
    score: 0
}, {
    id: IID.woodfloor1,
    img: {
        src: ["img/inv-wood-floor-out.png", "img/inv-wood-floor-in.png", "img/inv-wood-floor-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Wood floor", "Players can't spawn on it", SKILLS.__BUILDING__, [
        [IID.wood, 15]
    ], 2, [
        [AREAS.workbench, 15000]
    ]),
    stack: 255,
    loot: LOOTID.woodfloor1,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: 2,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-wood-floor.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-wood-floor.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 1,
    idWall: IID.woodfloor1,
    lowWall: 0,
    door: 0,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.groundFloor,
    broken: [{
        src: "img/day-wood-floor-broken0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-broken1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-broken2.png",
        W: {
            isLoaded: 0
        }
    }],
    impact: SOUNDID.__NO_SOUND__,
    destroy: SOUNDID.wooddes,
    building: [{
        src: "img/day-wood-floor-0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-4.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-5.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-6.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-7.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-8.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-9.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-10.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-11.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-12.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-13.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-14.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-15.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-16.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-17.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-18.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-19.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-20.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-21.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-22.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-23.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-24.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-25.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-26.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-27.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-28.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-29.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-30.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-31.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-32.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-33.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-34.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-35.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-36.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-37.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-38.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-39.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-40.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-41.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-42.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-43.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-44.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-45.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-46.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__WOOD__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 4000,
    score: 0
}, {
    id: IID.hammer,
    img: {
        src: ["img/inv-hammer-out.png", "img/inv-hammer-in.png", "img/inv-hammer-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Hammer", "Destroy walls quickly.", SKILLS.__TOOL__, [
        [IID.wood, 100],
        [IID.shapedmetal, 10]
    ], 1, [
        [AREAS.researchbench, 30000]
    ], 7),
    idWeapon: 23,     
    stack: 1,
    loot: LOOTID.hammer,
    wait: 10
}, {
    id: IID.sleepingbag,
    img: {
        src: ["img/inv-sleeping-bag-out.png", "img/inv-sleeping-bag-in.png", "img/inv-sleeping-bag-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Sleeping Bag", "Once dead, you keep your base", SKILLS.__SURVIVAL__, [
        [IID.leather, 7],
        [IID.animalfat, 7],
        [IID.string, 7]
    ], 1, [
        [AREAS.weavingmachine, 20000]
    ], 9),
    stack: 255,
    loot: LOOTID.sleepingbag,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-sleeping-bag.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-sleeping-bag.png",
        W: {
            isLoaded: 0
        }
    },
    door: 0,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.defaultBuilding,
    impact: SOUNDID.pillow,
    destroy: SOUNDID.pillowdes,
    building: {
        src: "img/day-sleeping-bag.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__FUR__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 500,
    score: 0
}, {
    id: IID.repairhammer,
    img: {
        src: ["img/inv-repair-hammer-out.png", "img/inv-repair-hammer-in.png", "img/inv-repair-hammer-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Repair Hammer", "Repair walls but require nails.", SKILLS.__TOOL__, [
        [IID.wood, 120],
        [IID.shapedmetal, 2]
    ], 1, [
        [AREAS.workbench, 30000]
    ], 5),
    idWeapon: 24,     
    stack: 1,
    loot: LOOTID.repairhammer,
    wait: 10
}, {
    id: IID.nails,
    img: {
        src: ["img/inv-nails-out.png", "img/inv-nails-in.png", "img/inv-nails-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Nails", "Needed to repair walls.", SKILLS.__SURVIVAL__, [
        [IID.shapedmetal, 2]
    ], 85, [
        [AREAS.workbench, 20000]
    ]),
    stack: 255,
    loot: LOOTID.nails
}, {
    id: IID.woodfloor2,
    img: {
        src: ["img/inv-wood-floor-light-out.png", "img/inv-wood-floor-light-in.png", "img/inv-wood-floor-light-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Light Wood Floor", "Players can't spawn on it", SKILLS.__BUILDING__, [
        [IID.wood, 15]
    ], 2, [
        [AREAS.workbench, 15000]
    ]),
    stack: 255,
    loot: LOOTID.woodfloor2,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: 2,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-woodlight-floor.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-woodlight-floor.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 1,
    idWall: IID.woodfloor2,
    lowWall: 0,
    door: 0,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.groundFloor,
    broken: [{
        src: "img/day-wood-floor-light-broken0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-broken1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-broken2.png",
        W: {
            isLoaded: 0
        }
    }],
    impact: SOUNDID.__NO_SOUND__,
    destroy: SOUNDID.wooddes,
    building: [{
        src: "img/day-wood-floor-light-0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-4.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-5.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-6.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-7.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-8.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-9.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-10.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-11.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-12.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-13.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-14.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-15.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-16.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-17.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-18.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-19.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-20.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-21.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-22.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-23.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-24.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-25.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-26.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-27.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-28.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-29.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-30.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-31.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-32.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-33.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-34.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-35.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-36.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-37.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-38.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-39.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-40.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-41.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-42.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-43.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-44.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-45.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-floor-light-46.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__WOODLIGHT__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 4000,
    score: 0
}, {
    id: IID.smallwoodwall,
    img: {
        src: ["img/inv-wood-smallwall-out.png", "img/inv-wood-smallwall-in.png", "img/inv-wood-smallwall-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Wooden Low Wall", "You can shoot through it.", SKILLS.__BUILDING__, [
        [IID.wood, 10]
    ], 1, [
        [AREAS.workbench, 10000]
    ]),
    idWeapon: 21,     
    fuel: -1,
    zid: 0,
    z: 0,
    stack: 255,
    loot: LOOTID.smallwoodwall,
    wait: 10,
    delay: 1000,
    width: [100, 35, 100, 35],
    height: [35, 100, 35, 100],
    xCenter: [0, -30, 0, 30],
    yCenter: [30, 0, -30, 0],
    _x: [0, 0, 0, 65],
    _y: [65, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-wood-smallwall.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-wood-smallwall.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 1,
    door: 0,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    angle: window.Math.PI / 2,
    iMove: [1, 0, -1, 0],
    jMove: [0, -1, 0, 1],
    xMove: [0, 0, 65, 0],
    yMove: [0, 0, 0, 65],
    wMove: [35, 100, 35, 100],
    hMove: [100, 35, 100, 35],
    xRotate: 6,
    yRotate: 46,
    areaEffect: 0,
    draw: Render.lowWall,
    broken: [{
        src: "img/day-wood-smallwalls-broken0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-broken1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-broken2.png",
        W: {
            isLoaded: 0
        }
    }],
    impact: SOUNDID.wood,
    destroy: SOUNDID.wooddes,
    building: [{
        src: "img/day-wood-smallwalls-0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-4.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-5.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-6.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-7.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-8.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-9.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-10.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-11.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-12.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-13.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-14.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-15.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-16.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-17.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-18.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-19.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-20.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-21.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-22.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-23.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-24.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-25.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-26.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-27.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-28.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-29.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-30.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-31.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-32.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-33.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-34.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-35.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-36.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-37.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-38.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-smallwalls-39.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__WOOD__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 3000,
    score: 0
}, {
    id: IID.smallstonewall,
    img: {
        src: ["img/inv-stone-smallwall-out.png", "img/inv-stone-smallwall-in.png", "img/inv-stone-smallwall-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Stone Low Wall", "You can shoot through it.", SKILLS.__BUILDING__, [
        [IID.stone, 10]
    ], 1, [
        [AREAS.workbench, 15000]
    ], 3),
    idWeapon: 21,     
    fuel: -1,
    zid: 0,
    z: 0,
    stack: 255,
    loot: LOOTID.smallstonewall,
    wait: 10,
    delay: 1000,
    width: [100, 35, 100, 35],
    height: [35, 100, 35, 100],
    xCenter: [0, -30, 0, 30],
    yCenter: [30, 0, -30, 0],
    _x: [0, 0, 0, 65],
    _y: [65, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-stone-smallwalls.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-stone-smallwalls.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 1,
    door: 0,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    angle: window.Math.PI / 2,
    iMove: [1, 0, -1, 0],
    jMove: [0, -1, 0, 1],
    xMove: [0, 0, 65, 0],
    yMove: [0, 0, 0, 65],
    wMove: [35, 100, 35, 100],
    hMove: [100, 35, 100, 35],
    xRotate: 6,
    yRotate: 46,
    areaEffect: 0,
    draw: Render.lowWall,
    broken: [{
        src: "img/day-stone-smallwalls-broken0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-broken1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-broken2.png",
        W: {
            isLoaded: 0
        }
    }],
    impact: SOUNDID.stone,
    destroy: SOUNDID.stonedes,
    building: [{
        src: "img/day-stone-smallwalls-0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-4.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-5.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-6.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-7.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-8.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-9.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-10.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-11.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-12.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-13.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-14.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-15.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-16.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-17.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-18.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-19.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-20.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-21.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-22.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-23.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-24.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-25.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-26.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-27.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-28.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-29.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-30.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-31.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-32.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-33.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-34.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-35.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-36.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-37.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-38.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-smallwalls-39.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__STONE__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 7000,
    score: 0
}, {
    id: IID.smallsteelwall,
    img: {
        src: ["img/inv-steel-smallwall-out.png", "img/inv-steel-smallwall-in.png", "img/inv-steel-smallwall-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Metal Low Wall", "You can shoot through it.", SKILLS.__BUILDING__, [
        [IID.shapedmetal, 2]
    ], 1, [
        [AREAS.researchbench, 20000]
    ], 6, IID.smallstonewall),
    idWeapon: 21,     
    fuel: -1,
    zid: 0,
    z: 0,
    stack: 255,
    loot: LOOTID.smallsteelwall,
    wait: 10,
    delay: 1000,
    width: [100, 35, 100, 35],
    height: [35, 100, 35, 100],
    xCenter: [0, -30, 0, 30],
    yCenter: [30, 0, -30, 0],
    _x: [0, 0, 0, 65],
    _y: [65, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-stone-smallwalls.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-stone-smallwalls.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 1,
    door: 0,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    angle: window.Math.PI / 2,
    iMove: [1, 0, -1, 0],
    jMove: [0, -1, 0, 1],
    xMove: [0, 0, 65, 0],
    yMove: [0, 0, 0, 65],
    wMove: [35, 100, 35, 100],
    hMove: [100, 35, 100, 35],
    xRotate: 6,
    yRotate: 46,
    areaEffect: 0,
    draw: Render.lowWall,
    broken: [{
        src: "img/day-steel-smallwalls-broken0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-broken1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-broken2.png",
        W: {
            isLoaded: 0
        }
    }],
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: [{
        src: "img/day-steel-smallwalls-0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-4.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-5.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-6.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-7.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-8.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-9.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-10.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-11.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-12.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-13.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-14.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-15.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-16.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-17.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-18.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-19.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-20.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-21.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-22.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-23.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-24.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-25.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-26.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-27.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-28.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-29.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-30.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-31.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-32.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-33.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-34.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-35.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-36.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-37.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-38.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-steel-smallwalls-39.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__STEEL__,
    particlesDist: 55,
    timelife: 315360000000,
    life: 15000,
    score: 0
}, {
    id: IID.MMnVW,
    zid: 0,
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: [],
    detail: {
        category: window.undefined
    },
    particles: -1,
    draw: Render.furniture
}, {
    id: IID.tomatosoup,
    img: {
        src: ["img/inv-tomato-soup-out.png", "img/inv-tomato-soup-in.png", "img/inv-tomato-soup-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Tomato Soup", "Has not yet been opened.", SKILLS.__SURVIVAL__, [
        [IID.can, 1],
        [IID.tomato, 2]
    ], 1, [
        [AREAS.firepart, 15000],
        [AREAS.bbq, 7000]
    ]),
    idWeapon: 25,     
    stack: 5,
    loot: LOOTID.tomatosoup,
    perish: 2,
    perishId: IID.can,
    wait: 10
}, {
    id: IID.syringe,
    img: {
        src: ["img/inv-syringe-out.png", "img/inv-syringe-in.png", "img/inv-syringe-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Syringe", "Useful to make drugs.", SKILLS.__DRUG__, [
        [IID.junk, 1]
    ], 1, [
        [AREAS.researchbench, 30000]
    ]),
    stack: 20,
    loot: LOOTID.syringe,
    score: 50
}, {
    id: IID.chemicalcomponent,
    img: {
        src: ["img/inv-chemical-component-out.png", "img/inv-chemical-component-in.png", "img/inv-chemical-component-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Chemical Component", "Useful to make a drugs."),
    stack: 20,
    loot: LOOTID.chemicalcomponent,
    score: 50
}, {
    id: IID.radway,
    img: {
        src: ["img/inv-radaway-out.png", "img/inv-radaway-in.png", "img/inv-radaway-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("RadAway", "Reduce your radioactivity a lot.", SKILLS.__DRUG__, [
        [IID.syringe, 1],
        [IID.chemicalcomponent, 1],
        [IID.mushroom2, 1]
    ], 1, [
        [AREAS.agitator, 45000]
    ]),
    idWeapon: 26,     
    stack: 5,
    loot: LOOTID.radway,
    wait: 10
}, {
    id: IID.tomatoseed,
    img: {
        src: ["img/inv-tomato-seed-out.png", "img/inv-tomato-seed-in.png", "img/inv-tomato-seed-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Tomato Seed", "A fruit or vegetable?", SKILLS.__PLANT__, [
        [IID.tomato, 4]
    ], 1, [
        [AREAS.firepart, 30000],
        [AREAS.bbq, 20000]
    ]),
    stack: 40,
    loot: LOOTID.tomatoseed,
    fruit: LOOTID.tomato,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [30, 30, 30, 30],
    height: [30, 30, 30, 30],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [35, 35, 35, 35],
    _y: [35, 35, 35, 35],
    blueprint: {
        src: "img/day-clear-blue-tomato.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-tomato.png",
        W: {
            isLoaded: 0
        }
    },
    door: 0,
    explosion: 0,
    behavior: BEHAVIOR.__SEED__,
    wire: 0,
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.orangeSeed,
    impact: SOUNDID.__NO_SOUND__,
    destroy: SOUNDID.__NO_SOUND__,
    building: [{
        src: "img/day-plant0-tomato.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-plant1-tomato.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-plant2-tomato.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-plant3-tomato.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-plant4-tomato.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__TOMATO__,
    particlesDist: 68,
    timelife: ((5 * 8) * 60) * 1000,
    life: 250,
    score: 0
}, {
    id: IID.tomato,
    img: {
        src: ["img/inv-tomato-out.png", "img/inv-tomato-in.png", "img/inv-tomato-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Tomato", "Why did the tomato blush?"),
    stack: 20,
    loot: LOOTID.tomato,
    wait: 5,
    perish: 10,
    perishId: IID.rottentomato,
    idWeapon: 27,     
    score: 24
}, {
    id: IID.rottentomato,
    img: {
        src: ["img/inv-rotten-tomato-out.png", "img/inv-rotten-tomato-in.png", "img/inv-rotten-tomato-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Rotten Tomato", "Go on, have a bite!"),
    stack: 20,
    loot: LOOTID.rottentomato,
    wait: 5,
    idWeapon: 28,     
    score: 20
}, {
    id: IID.can,
    img: {
        src: ["img/inv-can-out.png", "img/inv-can-in.png", "img/inv-can-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Can", "Useful to craft food can.", SKILLS.__SURVIVAL__, [
        [IID.shapedmetal, 1]
    ], 1, [
        [AREAS.workbench, 20000]
    ]),
    idWeapon: 0,     
    stack: 255,
    loot: LOOTID.can
}, {
    id: IID.crossbow,
    img: {
        src: ["img/inv-wood-crossbow-out.png", "img/inv-wood-crossbow-in.png", "img/inv-wood-crossbow-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Wood Crossbow", "Shoot faster, reload slower", SKILLS.__WEAPON__, [
        [IID.wood, 200],
        [IID.string, 2],
        [IID.shapedmetal, 1]
    ], 1, [
        [AREAS.workbench, 50000]
    ], 6),
    idWeapon: 29,     
    bullet: IID.crossarrow,
    stack: 1,
    loot: LOOTID.crossbow,
    wait: 10
}, {
    id: IID.crossarrow,
    img: {
        src: ["img/inv-wood-crossarrow-out.png", "img/inv-wood-crossarrow-in.png", "img/inv-wood-crossarrow-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Crossbow Arrows", "Needed to use crossbow.", SKILLS.__WEAPON__, [
        [IID.wood, 40],
        [IID.shapedmetal, 1]
    ], 10, [
        [AREAS.workbench, 30000]
    ]),
    stack: 255,
    loot: LOOTID.crossarrow
}, {
    id: IID.nailgun,
    img: {
        src: ["img/inv-nail-gun-out.png", "img/inv-nail-gun-in.png", "img/inv-nail-gun-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Nail Gun", "Repair walls from a distance", SKILLS.__TOOL__, [
        [IID.shapedmetal, 3],
        [IID.smallwire, 1],
        [IID.junk, 1],
        [IID.energycell, 4]
    ], 1, [
        [AREAS.researchbench, 30000]
    ], 7),
    idWeapon: 30,     
    bullet: IID.nails,
    stack: 1,
    loot: LOOTID.nailgun,
    wait: 10
}, {
    id: IID.sawedoff,
    img: {
        src: ["img/inv-sawed-off-shotgun-out.png", "img/inv-sawed-off-shotgun-in.png", "img/inv-sawed-off-shotgun-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Sawed Off", "Shoot less far, do more damages", SKILLS.__WEAPON__, [
        [IID.shotgun, 1],
        [IID.alloys, 6],
        [IID.shapedmetal, 6]
    ], 1, [
        [AREAS.researchbench, 200000]
    ], 13, IID.shotgun),
    idWeapon: 31,     
    bullet: IID.bulletshotgun,
    stack: 1,
    loot: LOOTID.sawedoff,
    wait: 10
}, {
    id: IID.stonefloor1,
    img: {
        src: ["img/inv-stone-floor-out.png", "img/inv-stone-floor-in.png", "img/inv-stone-floor-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Stone floor", "Players can't spawn on it", SKILLS.__BUILDING__, [
        [IID.stone, 15]
    ], 2, [
        [AREAS.workbench, 15000]
    ], 4),
    stack: 255,
    loot: LOOTID.stonefloor1,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: 2,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-stone-floor.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-stone-floor.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 1,
    idWall: IID.stonefloor1,
    lowWall: 0,
    door: 0,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.groundFloor,
    broken: [{
        src: "img/day-stone-floor-broken0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-broken1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-broken2.png",
        W: {
            isLoaded: 0
        }
    }],
    impact: SOUNDID.__NO_SOUND__,
    destroy: SOUNDID.stonedes,
    building: [{
        src: "img/day-stone-floor-0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-4.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-5.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-6.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-7.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-8.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-9.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-10.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-11.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-12.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-13.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-14.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-15.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-16.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-17.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-18.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-19.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-20.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-21.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-22.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-23.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-24.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-25.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-26.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-27.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-28.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-29.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-30.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-31.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-32.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-33.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-34.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-35.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-36.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-37.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-38.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-39.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-40.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-41.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-42.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-43.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-44.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-45.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-floor-46.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__STONE__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 8000,
    score: 0
}, {
    id: IID.stonefloor2,
    img: {
        src: ["img/inv-tiling-floor-out.png", "img/inv-tiling-floor-in.png", "img/inv-tiling-floor-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Tiling floor", "Players can't spawn on it", SKILLS.__BUILDING__, [
        [IID.stone, 15]
    ], 2, [
        [AREAS.workbench, 15000]
    ], 4),
    stack: 255,
    loot: LOOTID.stonefloor2,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: 2,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-tiling-floor.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-tiling-floor.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 1,
    idWall: IID.stonefloor2,
    lowWall: 0,
    door: 0,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.groundFloor,
    broken: [{
        src: "img/day-tiling-floor-broken0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-broken1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-broken2.png",
        W: {
            isLoaded: 0
        }
    }],
    impact: SOUNDID.__NO_SOUND__,
    destroy: SOUNDID.stonedes,
    building: [{
        src: "img/day-tiling-floor-0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-4.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-5.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-6.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-7.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-8.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-9.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-10.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-11.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-12.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-13.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-14.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-15.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-16.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-17.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-18.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-19.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-20.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-21.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-22.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-23.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-24.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-25.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-26.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-27.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-28.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-29.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-30.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-31.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-32.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-33.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-34.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-35.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-36.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-37.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-38.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-39.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-40.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-41.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-42.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-43.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-44.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-45.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tiling-floor-46.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__STONE__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 8000,
    score: 0
}, {
    id: IID.__ROAD__,
    zid: 0,
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: [],
    buildings: [],
    detail: {
        category: window.undefined
    },
    particles: -1,
    draw: Render.road
}, {
    id: IID.chips,
    img: {
        src: ["img/inv-chips-out.png", "img/inv-chips-in.png", "img/inv-chips-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Crisps", "You salty?"),
    idWeapon: 32,     
    stack: 5,
    loot: LOOTID.chips,
    perish: 2,
    perishId: IID.rottenchips,
    wait: 10
}, {
    id: IID.rottenchips,
    img: {
        src: ["img/inv-rotten-chips-out.png", "img/inv-rotten-chips-in.png", "img/inv-rotten-chips-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Expired Crisps", "Go on, have a bite!"),
    stack: 5,
    loot: LOOTID.rottenchips,
    wait: 5,
    idWeapon: 33,     
    score: 20
}, {
    id: IID.electronicpart,
    img: {
        src: ["img/inv-electronic-part-out.png", "img/inv-electronic-part-in.png", "img/inv-electronic-part-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Electronic Parts", "Break TV's and Computers to find it"),
    stack: 255,
    loot: LOOTID.electronicpart,
    score: 100
}, {
    id: IID.junk,
    img: {
        src: ["img/inv-junk-out.png", "img/inv-junk-in.png", "img/inv-junk-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Junk", "Find it in houses"),
    stack: 255,
    loot: LOOTID.junk,
    score: 40
}, {
    id: IID.wires,
    img: {
        src: ["img/inv-wires-out.png", "img/inv-wires-in.png", "img/inv-wires-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Big Wire", "Break big computers in power AREAS (in the city)"),
    stack: 255,
    loot: LOOTID.wires,
    score: 40
}, {
    id: IID.energycell,
    img: {
        src: ["img/inv-small-energy-cells-out.png", "img/inv-small-energy-cells-in.png", "img/inv-small-energy-cells-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Energy Cells", "Used for energy weapons/buildings", SKILLS.__SURVIVAL__, [
        [IID.alloys, 1],
        [IID.shapeduranium, 1]
    ], 30, [
        [AREAS.teslabench, 28000]
    ], 6),
    stack: 255,
    loot: LOOTID.energycell
}, {
    id: IID.laserpistol,
    img: {
        src: ["img/inv-laser-pistol-out.png", "img/inv-laser-pistol-in.png", "img/inv-laser-pistol-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Laser Pistol", "Bullets are faster.", SKILLS.__WEAPON__, [
        [IID.shapeduranium, 2],
        [IID.wires, 1],
        [IID.electronicpart, 2],
        [IID.alloys, 1],
        [IID.shapedmetal, 4]
    ], 1, [
        [AREAS.teslabench, 180000]
    ], 14),
    idWeapon: 34,     
    bullet: IID.energycell,
    stack: 1,
    loot: LOOTID.laserpistol,
    wait: 10
}, {
    id: IID.teslabench,
    img: {
        src: ["img/inv-workbench3-out.png", "img/inv-workbench3-in.png", "img/inv-workbench3-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Tesla Bench", "Allow you to make powerful items", SKILLS.__SURVIVAL__, [
        [IID.alloys, 4],
        [IID.shapedmetal, 6],
        [IID.electronicpart, 3],
        [IID.wires, 4],
        [IID.shapeduranium, 2]
    ], 1, [
        [AREAS.researchbench, 120000]
    ], 10, IID.researchbench),
    idWeapon: 21,     
    fuel: 60000,
    zid: 0,
    z: 1,
    area: AREAS.teslabench,
    stack: 255,
    loot: LOOTID.teslabench,
    wait: 10,
    delay: 1000,
    width: [100, 260, 100, 260],
    height: [260, 100, 260, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, -80, 0, -80],
    _y: [-80, 0, -80, 0],
    iTile: [-1, 0, -1, 0],
    jTile: [0, -1, 0, -1],
    blueprint: {
        src: "img/day-clear-blue-workbench3.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-workbench3.png",
        W: {
            isLoaded: 0
        }
    },
    xLight: [-20.5, -101.5, 20.5, 101.5],
    yLight: [101.5, -20.5, -101, 20.5],
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__AI_CONSTRUCTOR__,
    wire: 0,
    subtype: 0,
    collision: 1,
    areaEffect: 0,
    draw: Render.teslaBench,
    packetId: 16,
    interact: {
        src: "img/e-workbench3.png",
        W: {
            isLoaded: 0
        }
    },
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: [{
        src: "img/day-workbench3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-workbench3-1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-workbench3-2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-workbench3-3.png",
        W: {
            isLoaded: 0
        }
    }],
    light: [{
        src: "img/day-tesla-light0.png",
        W: {
            isLoaded: 0
        }
    }, 0, {
        src: "img/day-tesla-light1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tesla-light2.png",
        W: {
            isLoaded: 0
        }
    }, 0, {
        src: "img/day-tesla-light3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tesla-light4.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-tesla-light5.png",
        W: {
            isLoaded: 0
        }
    }, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    particles: PARTICLESID.__METAL__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 3000,
    score: 0
}, {
    id: IID.alloys,
    img: {
        src: ["img/inv-alloys-out.png", "img/inv-alloys-in.png", "img/inv-alloys-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Alloys", "To craft powerful items", SKILLS.__MINERAL__, [
        [IID.steel, 1],
        [IID.junk, 1],
        [IID.sulfur, 1]
    ], 1, [
        [AREAS.smelter, 10000]
    ]),
    stack: 255,
    loot: LOOTID.alloys
}, {
    id: IID.sulfuraxe,
    img: {
        src: ["img/inv-sulfur-axe-out.png", "img/inv-sulfur-axe-in.png", "img/inv-sulfur-axe-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Sulfur Axe", "You look cool with it.", SKILLS.__TOOL__, [
        [IID.stoneaxe, 1],
        [IID.alloys, 8],
        [IID.shapedmetal, 10],
        [IID.sulfur, 20]
    ], 1, [
        [AREAS.researchbench, 200000]
    ], 10, IID.stoneaxe),
    idWeapon: 35,     
    stack: 1,
    loot: LOOTID.sulfuraxe,
    wait: 10
}, {
    id: IID.landmine,
    img: {
        src: ["img/inv-landmine-out.png", "img/inv-landmine-in.png", "img/inv-landmine-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Landmine", "When you feel it, it's too late", SKILLS.__WEAPON__, [
        [IID.shapedmetal, 4],
        [IID.junk, 1],
        [IID.sulfur, 2],
        [IID.animalfat, 2]
    ], 1, [
        [AREAS.researchbench, 40000]
    ], 9),
    stack: 20,
    loot: LOOTID.landmine,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [50, 50, 50, 50],
    height: [50, 50, 50, 50],
    _x: [25, 25, 25, 25],
    _y: [25, 25, 25, 25],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-landmine.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-landmine.png",
        W: {
            isLoaded: 0
        }
    },
    door: 0,
    explosion: 1,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 0,
    damage: 200,
    damageBuilding: 400,
    areaEffect: 0,
    draw: Render.landmine,
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: [{
        src: "img/day-landmine-0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-landmine-1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-landmine-2.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__KAKI__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 5,
    score: 0
}, {
    id: IID.dynamite,
    img: {
        src: ["img/inv-dynamite-out.png", "img/inv-dynamite-in.png", "img/inv-dynamite-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Dynamite", "Get out of here, it gonna blow!", SKILLS.__WEAPON__, [
        [IID.string, 1],
        [IID.animalfat, 2],
        [IID.sulfur, 2],
        [IID.junk, 1]
    ], 1, [
        [AREAS.researchbench, 40000]
    ], 9),
    stack: 10,
    loot: LOOTID.dynamite,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-dynamite.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-dynamite.png",
        W: {
            isLoaded: 0
        }
    },
    door: 0,
    explosion: 1,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 0,
    damage: 180,
    damageBuilding: 1400,
    areaEffect: 0,
    draw: Render.dynamite,
    impact: SOUNDID.pillow,
    destroy: SOUNDID.__NO_SOUND__,
    building: [{
        src: "img/day-dynamite.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/dynamite-yellow.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__RED_STEEL__,
    particlesDist: 80,
    timelife: 5000,
    life: 100,
    score: 0
}, {
    id: IID.c4bomb,
    img: {
        src: ["img/inv-C4-out.png", "img/inv-C4-in.png", "img/inv-C4-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("C4", "Explode when you hit the trigger!", SKILLS.__WEAPON__, [
        [IID.dynamite, 2],
        [IID.smallwire, 1],
        [IID.alloys, 2],
        [IID.electronicpart, 1]
    ], 1, [
        [AREAS.researchbench, 60000]
    ], 16, IID.dynamite),
    stack: 5,
    loot: LOOTID.c4bomb,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-C4.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-C4.png",
        W: {
            isLoaded: 0
        }
    },
    door: 0,
    explosion: 1,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    damage: 255,
    damageBuilding: 6000,
    collision: 0,
    areaEffect: 0,
    draw: Render.dynamite,
    impact: SOUNDID.pillow,
    destroy: SOUNDID.__NO_SOUND__,
    building: [{
        src: "img/day-C4.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/C4-red.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__KAKI__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 100,
    score: 0
}, {
    id: IID.joystic,
    img: {
        src: ["img/inv-joystick-out.png", "img/inv-joystick-in.png", "img/inv-joystick-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("C4 Trigger", "Don't press the button or else...", SKILLS.__WEAPON__, [
        [IID.shapedmetal, 5],
        [IID.electronicpart, 1],
        [IID.energycell, 8],
        [IID.smallwire, 1]
    ], 1, [
        [AREAS.researchbench, 100000]
    ], 16, IID.c4bomb),
    stack: 1,
    loot: LOOTID.joystic,
    wait: 10,
    idWeapon: 36,     
    score: 0
}, {
    id: IID.composter,
    img: {
        src: ["img/inv-composter-out.png", "img/inv-composter-in.png", "img/inv-composter-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Compost", "Allows to accelerate rotting", SKILLS.__SURVIVAL__, [
        [IID.shapedmetal, 4],
        [IID.electronicpart, 1]
    ], 1, [
        [AREAS.researchbench, 100000]
    ], 8),
    idWeapon: 21,     
    fuel: 10000,
    zid: 0,
    z: 1,
    area: AREAS.composter,
    stack: 255,
    loot: LOOTID.composter,
    wait: 10,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-composter.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-composter.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    areaEffect: 0,
    draw: Render.compost,
    packetId: 16,
    interact: {
        src: "img/e-composter.png",
        W: {
            isLoaded: 0
        }
    },
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: [{
        src: "img/day-composter-off.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-composter.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__METAL__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 500,
    score: 0
}, {
    id: IID.metalhelmet,
    img: {
        src: ["img/inv-metal-helmet-out.png", "img/inv-metal-helmet-in.png", "img/inv-metal-helmet-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Metal Helmet", "Protects you from melee weapons", SKILLS.__CLOTHE__, [
        [IID.shapedmetal, 3],
        [IID.animaltendon, 3],
        [IID.leather, 3],
        [IID.nails, 80]
    ], 1, [
        [AREAS.workbench, 70000]
    ]),
    idClothe: 7,
    stack: 1,
    loot: LOOTID.metalhelmet,
    wait: 10,
    warm: 0,
    def: 0.15,
    bul: 0,
    ene: 0,
    boom: 0,
    rad: 0,
    speed: -0.01
}, {
    id: IID.weldinghelmet,
    img: {
        src: ["img/inv-welding-helmet-out.png", "img/inv-welding-helmet-in.png", "img/inv-welding-helmet-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Welding Helmet", "Protects you from melee weapons", SKILLS.__CLOTHE__, [
        [IID.shapedmetal, 10],
        [IID.alloys, 2],
        [IID.leather, 3],
        [IID.nails, 160],
        [IID.metalhelmet, 1]
    ], 1, [
        [AREAS.researchbench, 140000]
    ], 7),
    idClothe: 8,
    stack: 1,
    loot: LOOTID.weldinghelmet,
    wait: 10,
    warm: 0,
    def: 0.4,
    bul: 0,
    ene: 0,
    boom: 0.05,
    rad: 0,
    speed: -0.02
}, {
    id: IID.gladiatorhelmet,
    img: {
        src: ["img/inv-gladiator-helmet-out.png", "img/inv-gladiator-helmet-in.png", "img/inv-gladiator-helmet-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Gladiator Helmet", "Strength and honor.", SKILLS.__CLOTHE__, [
        [IID.shapedmetal, 12],
        [IID.alloys, 6],
        [IID.leather, 4],
        [IID.nails, 255],
        [IID.weldinghelmet, 1]
    ], 1, [
        [AREAS.researchbench, 300000]
    ], 17, IID.weldinghelmet),
    idClothe: 9,
    stack: 1,
    loot: LOOTID.gladiatorhelmet,
    wait: 10,
    warm: 0,
    def: 0.6,
    bul: 0.1,
    ene: 0,
    boom: 0.2,
    rad: 0,
    speed: -0.03
}, {
    id: IID.leatherjacket,
    img: {
        src: ["img/inv-leather-jacket-out.png", "img/inv-leather-jacket-in.png", "img/inv-leather-jacket-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Leather Jacket", "Protects you from guns", SKILLS.__CLOTHE__, [
        [IID.string, 2],
        [IID.leather, 4]
    ], 1, [
        [AREAS.weavingmachine, 70000]
    ]),
    idClothe: 10,
    stack: 1,
    loot: LOOTID.leatherjacket,
    wait: 10,
    warm: 0.0006,
    def: 0,
    bul: 0.2,
    ene: 0,
    boom: 0,
    rad: 0,
    speed: 0
}, {
    id: IID.kevlarsuit,
    img: {
        src: ["img/inv-kevlar-suit-out.png", "img/inv-kevlar-suit-in.png", "img/inv-kevlar-suit-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Kevlar Suit", "Protects you from guns", SKILLS.__CLOTHE__, [
        [IID.shapedmetal, 6],
        [IID.string, 4],
        [IID.leather, 6],
        [IID.alloys, 2],
        [IID.leatherjacket, 1]
    ], 1, [
        [AREAS.weavingmachine, 100000]
    ], 12),
    idClothe: 11,
    stack: 1,
    loot: LOOTID.kevlarsuit,
    wait: 10,
    warm: 0,
    def: 0,
    bul: 0.4,
    ene: 0,
    boom: 0,
    rad: 0,
    speed: 0
}, {
    id: IID.SWATsuit,
    img: {
        src: ["img/inv-SWAT-suit-out.png", "img/inv-SWAT-suit-in.png", "img/inv-SWAT-suit-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("SWAT Suit", "Protects you from guns", SKILLS.__CLOTHE__, [
        [IID.shapedmetal, 10],
        [IID.string, 10],
        [IID.leather, 10],
        [IID.alloys, 4],
        [IID.kevlarsuit, 1]
    ], 1, [
        [AREAS.weavingmachine, 200000]
    ], 18, IID.kevlarsuit),
    idClothe: 12,
    stack: 1,
    loot: LOOTID.SWATsuit,
    wait: 10,
    warm: 0,
    def: 0.1,
    bul: 0.7,
    ene: 0,
    boom: 0.1,
    rad: 0,
    speed: -0.01
}, {
    id: IID.protectivesuit,
    img: {
        src: ["img/inv-protective-suit-out.png", "img/inv-protective-suit-in.png", "img/inv-protective-suit-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Protective Suit", "Protects you from explosives", SKILLS.__CLOTHE__, [
        [IID.shapedmetal, 6],
        [IID.string, 6],
        [IID.leather, 6],
        [IID.alloys, 2]
    ], 1, [
        [AREAS.weavingmachine, 200000]
    ], 12, IID.lightweightskill),
    idClothe: 13,
    stack: 1,
    loot: LOOTID.protectivesuit,
    wait: 10,
    warm: 0.00085,
    def: 0,
    bul: 0,
    ene: 0,
    boom: 0.9,
    rad: 0,
    speed: -0.03
}, {
    id: IID.tesla1,
    img: {
        src: ["img/inv-tesla-0-out.png", "img/inv-tesla-0-in.png", "img/inv-tesla-0-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Power Armor", "Protects you from energy weapons", SKILLS.__CLOTHE__, [
        [IID.shapedmetal, 20],
        [IID.shapeduranium, 2],
        [IID.electronicpart, 1],
        [IID.wires, 2],
        [IID.alloys, 2]
    ], 1, [
        [AREAS.teslabench, 150000]
    ], 10),
    idClothe: 14,
    stack: 1,
    loot: LOOTID.tesla1,
    wait: 10,
    warm: 0,
    def: 0,
    bul: 0,
    ene: 0.3,
    boom: 0,
    rad: 0,
    speed: 0
}, {
    id: IID.tesla2,
    img: {
        src: ["img/inv-tesla-armor-out.png", "img/inv-tesla-armor-in.png", "img/inv-tesla-armor-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Tesla Armor", "Protects you from energy weapons", SKILLS.__CLOTHE__, [
        [IID.tesla1, 1],
        [IID.shapeduranium, 10],
        [IID.electronicpart, 5],
        [IID.wires, 5],
        [IID.alloys, 10]
    ], 1, [
        [AREAS.teslabench, 300000]
    ], 18, IID.tesla1, 3),
    idClothe: 15,
    stack: 1,
    loot: LOOTID.tesla2,
    wait: 10,
    warm: 0.00085,
    def: 0.2,
    bul: 0.2,
    ene: 0.75,
    boom: 0.2,
    rad: 0.01,
    speed: -0.02
}, {
    id: IID.woodespike,
    img: {
        src: ["img/inv-wood-spike-out.png", "img/inv-wood-spike-in.png", "img/inv-wood-spike-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Wooden Spike", "Hurt and slow down", SKILLS.__BUILDING__, [
        [IID.wood, 80]
    ], 1, [
        [AREAS.workbench, 25000]
    ]),
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    stack: 40,
    loot: LOOTID.woodespike,
    wait: 10,
    delay: 1000,
    width: [50, 50, 50, 50],
    height: [50, 50, 50, 50],
    _x: [25, 25, 25, 25],
    _y: [25, 25, 25, 25],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-wood-spike.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-wood-spike.png",
        W: {
            isLoaded: 0
        }
    },
    door: 0,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.spike,
    hidden: [{
        src: "img/day-wood-spike-cover1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-spike-cover2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-spike-cover3.png",
        W: {
            isLoaded: 0
        }
    }],
    deployed: [{
        src: "img/day-wood-spike-1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-spike-2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-wood-spike-3.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__WOOD__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 200,
    score: 0
}, {
    id: IID.lasersubmachine,
    img: {
        src: ["img/inv-laser-submachine-out.png", "img/inv-laser-submachine-in.png", "img/inv-laser-submachine-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Laser Submachine", "It's the best weapon", SKILLS.__WEAPON__, [
        [IID.alloys, 10],
        [IID.shapedmetal, 6],
        [IID.shapeduranium, 6],
        [IID.wires, 2],
        [IID.electronicpart, 3]
    ], 1, [
        [AREAS.teslabench, 180000]
    ], 14, IID.laserpistol, 2),
    idWeapon: 37,     
    bullet: IID.energycell,
    stack: 1,
    loot: LOOTID.lasersubmachine,
    wait: 10
}, {
    id: IID.granade,
    img: {
        src: ["img/inv-grenade-out.png", "img/inv-grenade-in.png", "img/inv-grenade-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Grenade", "Explodes when you throw it away.", SKILLS.__WEAPON__, [
        [IID.shapedmetal, 2],
        [IID.junk, 2],
        [IID.sulfur, 2],
        [IID.animalfat, 2]
    ], 2, [
        [AREAS.researchbench, 30000]
    ], 10),
    idWeapon: 38,     
    damage: 130,
    damageBuilding: 400,
    stack: 10,
    loot: LOOTID.granade,
    wait: 10
}, {
    id: IID.superhammer,
    img: {
        src: ["img/inv-super-hammer-out.png", "img/inv-super-hammer-in.png", "img/inv-super-hammer-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Super Hammer", "Destroy indestructible walls."),
    idWeapon: 39,     
    stack: 1,
    loot: LOOTID.superhammer,
    wait: 10
}, {
    id: IID.ghoulblood,
    img: {
        src: ["img/inv-ghoul-blood-out.png", "img/inv-ghoul-blood-in.png", "img/inv-ghoul-blood-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Ghoul Blood", "Find it on speedy ghouls"),
    stack: 255,
    loot: LOOTID.ghoulblood,
    score: 100
}, 

{
    id: IID.camouflage,
    img: {
        src: ["img/inv-camouflage-gear-out.png", "img/inv-camouflage-gear-in.png", "img/inv-camouflage-gear-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Camouflage Gear", "Hide you in the forest", SKILLS.__CLOTHE__, [
        [IID.wood, 90],
        [IID.string, 2],
        [IID.leather, 2]
    ], 1, [
        [AREAS.weavingmachine, 40000]
    ]),
    idClothe: 16,
    stack: 1,
    loot: LOOTID.camouflage,
    wait: 10,
    warm: 0,
    def: 0,
    bul: 0,
    ene: 0,
    boom: 0,
    rad: 0,
    speed: 0
},

{
    id: IID.agitator,
    img: {
        src: ["img/inv-agitator-out.png", "img/inv-agitator-in.png", "img/inv-agitator-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Agitator", "Allows to craft drugs", SKILLS.__SURVIVAL__, [
        [IID.shapedmetal, 6],
        [IID.electronicpart, 1]
    ], 1, [
        [AREAS.researchbench, 100000]
    ], 8),
    idWeapon: 21,     
    fuel: 100000,
    zid: 0,
    z: 1,
    area: AREAS.agitator,
    stack: 255,
    loot: LOOTID.agitator,
    wait: 10,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-agitator.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-agitator.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    areaEffect: 0,
    draw: Render.agitator,
    packetId: 16,
    interact: {
        src: "img/e-agitator.png",
        W: {
            isLoaded: 0
        }
    },
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: [{
        src: "img/day-agitator1-off.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-agitator1-on.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-agitator-1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-agitator-2.png",
        W: {
            isLoaded: 0
        }
    }],
    spine: [
        [-25.5, 21],
        [-21, -25.5],
        [25.5, -21],
        [21, 25.5]
    ],
    particles: PARTICLESID.__METAL__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 500,
    score: 0
}, {
    id: IID.ghouldrug,
    img: {
        src: ["img/inv-ghoul-drug-out.png", "img/inv-ghoul-drug-in.png", "img/inv-ghoul-drug-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Ghoul Drug", "Ghouls does not attack you.", SKILLS.__DRUG__, [
        [IID.syringe, 1],
        [IID.chemicalcomponent, 1],
        [IID.mushroom2, 1],
        [IID.mushroom3, 1],
        [IID.ghoulblood, 1]
    ], 1, [
        [AREAS.agitator, 30000]
    ], 10),
    idWeapon: 40,     
    stack: 5,
    loot: LOOTID.ghouldrug,
    wait: 10
}, {
    id: IID.mushroom,
    img: {
        src: ["img/inv-mushroom1-out.png", "img/inv-mushroom1-in.png", "img/inv-mushroom1-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Amanita", "Poisoned, really dangerous"),
    stack: 20,
    loot: LOOTID.mushroom,
    wait: 5,
    perish: 10,
    perishId: IID.rottenmushroom1,
    idWeapon: 41,     
    score: 24
}, {
    id: IID.mushroom2,
    img: {
        src: ["img/inv-mushroom2-out.png", "img/inv-mushroom2-in.png", "img/inv-mushroom2-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Boletus", "Can be eaten."),
    stack: 20,
    loot: LOOTID.mushroom2,
    wait: 5,
    perish: 10,
    perishId: IID.rottenmushroom2,
    idWeapon: 42,     
    score: 24
}, {
    id: IID.mushroom3,
    img: {
        src: ["img/inv-mushroom3-out.png", "img/inv-mushroom3-in.png", "img/inv-mushroom3-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Russula", "Can be eaten."),
    stack: 20,
    loot: LOOTID.mushroom3,
    wait: 5,
    perish: 10,
    perishId: IID.rottenmushroom3,
    idWeapon: 43,     
    score: 24
}, {
    id: IID.rottenmushroom1,
    img: {
        src: ["img/inv-rotten-mushroom1-out.png", "img/inv-rotten-mushroom1-in.png", "img/inv-rotten-mushroom1-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Rotten Mushroom", "Go on, have a bite!"),
    stack: 20,
    loot: LOOTID.rottenmushroom1,
    wait: 5,
    idWeapon: 44,     
    score: 20
}, {
    id: IID.rottenmushroom2,
    img: {
        src: ["img/inv-rotten-mushroom2-out.png", "img/inv-rotten-mushroom2-in.png", "img/inv-rotten-mushroom2-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Rotten Mushroom", "Go on, have a bite!"),
    stack: 20,
    loot: LOOTID.rottenmushroom2,
    wait: 5,
    idWeapon: 45,     
    score: 20
}, {
    id: IID.rottenmushroom3,
    img: {
        src: ["img/inv-rotten-mushroom3-out.png", "img/inv-rotten-mushroom3-in.png", "img/inv-rotten-mushroom3-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Rotten Mushroom", "Go on, have a bite!"),
    stack: 20,
    loot: LOOTID.rottenmushroom3,
    wait: 5,
    idWeapon: 46,     
    score: 20
}, {
    id: IID.lapadoine,
    img: {
        src: ["img/inv-lapadoine-out.png", "img/inv-lapadoine-in.png", "img/inv-lapadoine-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Lapadone", "You are faster a certain time.", SKILLS.__DRUG__, [
        [IID.syringe, 1],
        [IID.chemicalcomponent, 1],
        [IID.mushroom, 1],
        [IID.ghoulblood, 1]
    ], 1, [
        [AREAS.agitator, 45000]
    ], 14),
    idWeapon: 47,     
    stack: 5,
    loot: LOOTID.lapadoine,
    wait: 10
}, {
    id: IID.lapabot,
    img: {
        src: ["img/inv-lapabot-out.png", "img/inv-lapabot-in.png", "img/inv-lapabot-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("LapaBot", "Repair your base for you", SKILLS.__SURVIVAL__, [
        [IID.shapedmetal, 6],
        [IID.electronicpart, 1],
        [IID.smallwire, 1],
        [IID.alloys, 1]
    ], 1, [
        [AREAS.researchbench, 100000]
    ], 8),
    stack: 5,
    loot: LOOTID.lapabot,
    fruit: LOOTID.tomato,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [30, 30, 30, 30],
    height: [30, 30, 30, 30],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [35, 35, 35, 35],
    _y: [35, 35, 35, 35],
    blueprint: {
        src: "img/clear-blue-lapabot.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-lapabot.png",
        W: {
            isLoaded: 0
        }
    },
    door: 0,
    explosion: 0,
    behavior: BEHAVIOR.__AI_CONSTRUCTOR__,
    wire: 0,
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.construction,
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: [{
        src: "img/lapabot0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/lapabot1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/lapabot2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/lapabot3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/lapabot4.png",
        W: {
            isLoaded: 0
        }
    }],
    builder: {
        src: "img/day-lapabot-builder.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__METAL__,
    particlesDist: 68,
    timelife: ((5 * 8) * 60) * 1000,
    life: 250,
    score: 0,
    timelifeAI: 315360000000,
    idAI: AIID.__LAPABOT_REPAIR__,
    evolve: 20000,
    evolveMaxStep: 4,
    killConstructor: 1
}, {
    id: IID.smallwire,
    img: {
        src: ["img/inv-small-wire-out.png", "img/inv-small-wire-in.png", "img/inv-small-wire-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Small Wire", "Find it on TV's and computers in abandonned houses"),
    stack: 255,
    loot: LOOTID.smallwire,
    score: 40
}, {
    id: IID.pumpkin,
    img: {
        src: ["img/inv-pumpkin-out.png", "img/inv-pumpkin-in.png", "img/inv-pumpkin-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Pumpkin", "Eat it or craft a pumpkin ghoul"),
    stack: 20,
    loot: LOOTID.pumpkin,
    wait: 5,
    perish: 10,
    perishId: IID.rottenpumpkin,
    idWeapon: 48,     
    score: 24
}, {
    id: IID.rottenpumpkin,
    img: {
        src: ["img/inv-rotten-pumpkin-out.png", "img/inv-rotten-pumpkin-in.png", "img/inv-rotten-pumpkin-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Rotten Pumpkin", "You should not click"),
    stack: 20,
    loot: LOOTID.rottenpumpkin,
    wait: 5,
    idWeapon: 49,     
    score: 20
}, {
    id: IID.ghoulseed,
    img: {
        src: ["img/inv-ghoul5-out.png", "img/inv-ghoul5-in.png", "img/inv-ghoul5-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Ghoul Seed", "Plant your pumpkin pet", -1, [
        [IID.pumpkin, 1],
        [IID.ghoulblood, 1]
    ], 1, [
        [AREAS.firepart, 30000],
        [AREAS.bbq, 20000]
    ], 99),
    stack: 40,
    loot: LOOTID.ghoulseed,
    fruit: LOOTID.tomato,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [30, 30, 30, 30],
    height: [30, 30, 30, 30],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [35, 35, 35, 35],
    _y: [35, 35, 35, 35],
    blueprint: {
        src: "img/clear-blue-root.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-root.png",
        W: {
            isLoaded: 0
        }
    },
    door: 0,
    explosion: 0,
    behavior: BEHAVIOR.__AI_CONSTRUCTOR__,
    wire: 0,
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.orangeSeed,
    impact: SOUNDID.pillow,
    destroy: SOUNDID.pillowdes,
    building: [{
        src: "img/day-root0-ghoul.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-root1-ghoul.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-root2-ghoul.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-root3-ghoul.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-root4-ghoul.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__ORANGE__,
    particlesDist: 68,
    timelife: ((5 * 8) * 60) * 1000,
    life: 250,
    score: 0,
    timelifeAI: 120000,
    idAI: AIID.__PUMPKIN_GHOUL__,
    evolve: 15000,
    evolveMaxStep: 3,
    killConstructor: 0
}, {
    id: IID.extractor,
    img: {
        src: ["img/inv-extractor-out.png", "img/inv-extractor-in.png", "img/inv-extractor-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Extractor", "Allows you to extract minerals from the ground", SKILLS.__SURVIVAL__, [
        [IID.alloys, 2],
        [IID.shapedmetal, 10],
        [IID.shapeduranium, 2],
        [IID.smallwire, 2],
        [IID.electronicpart, 1]
    ], 1, [
        [AREAS.researchbench, 100000]
    ], 12),
    idWeapon: 21,     
    fuel: 740000,
    zid: 0,
    z: 1,
    area: AREAS.extractor,
    stack: 255,
    loot: LOOTID.extractor,
    wait: 10,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-extractor.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-extractor.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    areaEffect: 0,
    draw: Render.extractor,
    packetId: 16,
    interact: {
        src: "img/e-extractor.png",
        W: {
            isLoaded: 0
        }
    },
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: [{
        src: "img/day-extractor.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-extractor-rotate.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-extractor-off.png",
        W: {
            isLoaded: 0
        }
    }],
    spine: [
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0]
    ],
    particles: PARTICLESID.__METAL__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 500,
    score: 0
}, {
    id: IID.antidote,
    img: {
        src: ["img/inv-antidote-out.png", "img/inv-antidote-in.png", "img/inv-antidote-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Antidote", "Remove the withdrawal effects (pink skin)", SKILLS.__DRUG__, [
        [IID.syringe, 1],
        [IID.chemicalcomponent, 1],
        [IID.mushroom, 1],
        [IID.antidoteflower, 1]
    ], 1, [
        [AREAS.agitator, 45000]
    ], 14),
    idWeapon: 50,     
    stack: 5,
    loot: LOOTID.antidote,
    wait: 10
}, {
    id: IID.antidoteflower,
    img: {
        src: ["img/inv-antidote-flower-out.png", "img/inv-antidote-flower-in.png", "img/inv-antidote-flower-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Rare Flower", "Use it to make an antidote"),
    stack: 5,
    loot: LOOTID.antidoteflower,
    score: 400
}, {
    id: IID.treeseed,
    img: {
        src: ["img/inv-seed-tree-out.png", "img/inv-seed-tree-in.png", "img/inv-seed-tree-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Tree Seed", "Plant your forest", SKILLS.__PLANT__, [
        [IID.acorn, 1]
    ], 5, [
        [AREAS.firepart, 60000],
        [AREAS.bbq, 40000]
    ]),
    stack: 100,
    loot: LOOTID.treeseed,
    fruit: LOOTID.orange,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [30, 30, 30, 30],
    height: [30, 30, 30, 30],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [35, 35, 35, 35],
    _y: [35, 35, 35, 35],
    blueprint: {
        src: "img/clear-blue-plant-tree.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-plant-tree.png",
        W: {
            isLoaded: 0
        }
    },
    door: 0,
    explosion: 0,
    behavior: BEHAVIOR.__SEED_RESOURCE__,
    wire: 0,
    subtype: 0,
    collision: 1,
    areaEffect: 0,
    draw: Render.treeSeed,
    impact: SOUNDID.wood,
    destroy: SOUNDID.wooddes,
    building: [{
        src: "img/day-plant-tree0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-plant-tree1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-plant-tree2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-plant-tree3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-plant4-orange.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__WOOD__,
    particlesDist: 68,
    timelife: ((5 * 8) * 60) * 1000,
    life: 150,
    score: 0
}, {
    id: IID.acorn,
    img: {
        src: ["img/inv-acorn-out.png", "img/inv-acorn-in.png", "img/inv-acorn-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Acorn", "Eat it or plant a tree"),
    stack: 20,
    loot: LOOTID.acorn,
    wait: 5,
    perish: 3,
    perishId: IID.rottenacorn,
    idWeapon: 51,     
    score: 24
}, {
    id: IID.rottenacorn,
    img: {
        src: ["img/inv-rotten-acorn-out.png", "img/inv-rotten-acorn-in.png", "img/inv-rotten-acorn-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Rotten Acorn", "Not really good"),
    stack: 20,
    loot: LOOTID.rottenacorn,
    wait: 5,
    idWeapon: 52,     
    score: 20
}, {
    id: IID.lasersniper,
    img: {
        src: ["img/inv-laser-sniper-out.png", "img/inv-laser-sniper-in.png", "img/inv-laser-sniper-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Laser Sniper", "Faster than a sniper", SKILLS.__WEAPON__, [
        [IID.alloys, 8],
        [IID.shapedmetal, 6],
        [IID.shapeduranium, 5],
        [IID.wires, 3],
        [IID.electronicpart, 3]
    ], 1, [
        [AREAS.teslabench, 180000]
    ], 14, IID.laserpistol, 2),
    idWeapon: 53,     
    bullet: IID.energycell,
    stack: 1,
    loot: LOOTID.lasersniper,
    wait: 10
}, {
    id: IID.halbot,
    img: {
        src: ["img/inv-hal-bot-out.png", "img/inv-hal-bot-in.png", "img/inv-hal-bot-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("HAL Bot", "Protect you", SKILLS.__SURVIVAL__, [
        [IID.shapedmetal, 6],
        [IID.electronicpart, 1],
        [IID.smallwire, 1],
        [IID.alloys, 1]
    ], 1, [
        [AREAS.researchbench, 100000]
    ], 8),
    stack: 5,
    loot: LOOTID.halbot,
    fruit: LOOTID.tomato,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [30, 30, 30, 30],
    height: [30, 30, 30, 30],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [35, 35, 35, 35],
    _y: [35, 35, 35, 35],
    blueprint: {
        src: "img/clear-blue-hal-bot.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-hal-bot.png",
        W: {
            isLoaded: 0
        }
    },
    door: 0,
    explosion: 0,
    behavior: BEHAVIOR.__AI_CONSTRUCTOR__,
    wire: 0,
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.construction,
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: [{
        src: "img/hal-bot0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/hal-bot1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/hal-bot2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/hal-bot3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/hal-bot4.png",
        W: {
            isLoaded: 0
        }
    }],
    builder: {
        src: "img/day-hal-bot-builder.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__METAL__,
    particlesDist: 68,
    timelife: ((5 * 8) * 60) * 1000,
    life: 400,
    score: 0,
    timelifeAI: 315360000000,
    idAI: AIID.__HAL_BOT__,
    evolve: 8000,
    evolveMaxStep: 4,
    killConstructor: 1
}, {
    id: IID.teslabot,
    img: {
        src: ["img/inv-tesla-bot-out.png", "img/inv-tesla-bot-in.png", "img/inv-tesla-bot-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Tesla Bot", "Protect you", SKILLS.__SURVIVAL__, [
        [IID.shapeduranium, 3],
        [IID.electronicpart, 1],
        [IID.smallwire, 3],
        [IID.wires, 3],
        [IID.alloys, 3]
    ], 1, [
        [AREAS.teslabench, 200000]
    ], 16),
    stack: 5,
    loot: LOOTID.teslabot,
    fruit: LOOTID.tomato,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [30, 30, 30, 30],
    height: [30, 30, 30, 30],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [35, 35, 35, 35],
    _y: [35, 35, 35, 35],
    blueprint: {
        src: "img/clear-blue-tesla-bot.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-tesla-bot.png",
        W: {
            isLoaded: 0
        }
    },
    door: 0,
    explosion: 0,
    behavior: BEHAVIOR.__AI_CONSTRUCTOR__,
    wire: 0,
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.construction,
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: [{
        src: "img/tesla-bot0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/tesla-bot1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/tesla-bot2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/tesla-bot3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/tesla-bot4.png",
        W: {
            isLoaded: 0
        }
    }],
    builder: {
        src: "img/day-lapabot-builder.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__METAL__,
    particlesDist: 68,
    timelife: ((5 * 8) * 60) * 1000,
    life: 500,
    score: 0,
    timelifeAI: 315360000000,
    idAI: AIID.__TESLA_BOT__,
    evolve: 20000,
    evolveMaxStep: 4,
    killConstructor: 1
}, {
    id: IID.cable,
    img: {
        src: ["img/inv-wire0-out.png", "img/inv-wire0-in.png", "img/inv-wire0-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Cable", "Create automatic mechanisms", SKILLS.__LOGIC__, [
        [IID.smallwire, 1]
    ], 3, [
        [AREAS.weldingmachine, 15000]
    ]),
    stack: 255,
    loot: LOOTID.cable,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-wire0.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-wire0.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__LOGIC__,
    gate: 0,
    wire: [
        [1, 1, 0, 0],
        [0, 0, 1, 1],
        [1, 1, 0, 0],
        [0, 0, 1, 1]
    ],
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.hiddenBuilding,
    impact: SOUNDID.pillow,
    destroy: SOUNDID.pillowdes,
    building: {
        src: "img/day-wire0.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__BARELRED__,
    particlesDist: 40,
    timelife: 315360000000,
    life: 250,
    score: 0
}, {
    id: IID.cable2,
    img: {
        src: ["img/inv-wire1-out.png", "img/inv-wire1-in.png", "img/inv-wire1-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Cable", "Create automatic mechanisms", SKILLS.__LOGIC__, [
        [IID.smallwire, 1]
    ], 3, [
        [AREAS.weldingmachine, 15000]
    ]),
    stack: 255,
    loot: LOOTID.cable2,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-wire1.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-wire1.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__LOGIC__,
    gate: 0,
    wire: [
        [1, 1, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1]
    ],
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.hiddenBuilding,
    impact: SOUNDID.pillow,
    destroy: SOUNDID.pillowdes,
    building: {
        src: "img/day-wire1.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__BARELRED__,
    particlesDist: 40,
    timelife: 315360000000,
    life: 250,
    score: 0
}, {
    id: IID.cable3,
    img: {
        src: ["img/inv-wire2-out.png", "img/inv-wire2-in.png", "img/inv-wire2-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Cable", "Create automatic mechanisms", SKILLS.__LOGIC__, [
        [IID.smallwire, 1]
    ], 3, [
        [AREAS.weldingmachine, 15000]
    ]),
    stack: 255,
    loot: LOOTID.cable3,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-wire2.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-wire2.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__LOGIC__,
    gate: 0,
    wire: [
        [0, 1, 0, 1],
        [0, 1, 1, 0],
        [1, 0, 1, 0],
        [1, 0, 0, 1]
    ],
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.hiddenBuilding,
    impact: SOUNDID.pillow,
    destroy: SOUNDID.pillowdes,
    building: {
        src: "img/day-wire2.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__BARELRED__,
    particlesDist: 40,
    timelife: 315360000000,
    life: 250,
    score: 0
}, {
    id: IID.cable4,
    img: {
        src: ["img/inv-wire3-out.png", "img/inv-wire3-in.png", "img/inv-wire3-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Cable", "Create automatic mechanisms", SKILLS.__LOGIC__, [
        [IID.smallwire, 1]
    ], 3, [
        [AREAS.weldingmachine, 15000]
    ]),
    stack: 255,
    loot: LOOTID.cable4,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-wire3.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-wire3.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__LOGIC__,
    gate: 0,
    wire: [
        [0, 1, 1, 1],
        [1, 1, 1, 0],
        [1, 0, 1, 1],
        [1, 1, 0, 1]
    ],
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.hiddenBuilding,
    impact: SOUNDID.pillow,
    destroy: SOUNDID.pillowdes,
    building: {
        src: "img/day-wire3.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__BARELRED__,
    particlesDist: 40,
    timelife: 315360000000,
    life: 250,
    score: 0
}, {
    id: IID.switch,
    img: {
        src: ["img/inv-switch-out.png", "img/inv-switch-in.png", "img/inv-switch-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Switch", "Turn on/off mechanisms", SKILLS.__LOGIC__, [
        [IID.shapedmetal, 1],
        [IID.smallwire, 1]
    ], 3, [
        [AREAS.weldingmachine, 15000]
    ]),
    stack: 255,
    loot: LOOTID.switch,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-switch.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-switch.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__LOGIC__,
    gate: 1,
    wire: [
        [1, 1, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1]
    ],
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.switchOff,
    packetId: 37,
    interact: {
        src: "img/e-turnon.png",
        W: {
            isLoaded: 0
        }
    },
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: [{
        src: "img/day-switch-off.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-switch-on.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__METAL__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 250,
    score: 0
}, {
    id: IID.orgate,
    img: {
        src: ["img/inv-switch-or-out.png", "img/inv-switch-or-in.png", "img/inv-switch-or-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Gate OR", "Activate only if an entry is on.", SKILLS.__LOGIC__, [
        [IID.shapedmetal, 1],
        [IID.smallwire, 1]
    ], 3, [
        [AREAS.weldingmachine, 15000]
    ]),
    stack: 255,
    loot: LOOTID.orgate,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-switch-or.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-switch-or.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__LOGIC__,
    gate: 1,
    wire: [
        [1, 0, 0, 0],
        [0, 0, 0, 1],
        [0, 1, 0, 0],
        [0, 0, 1, 0]
    ],
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.hiddenBuilding,
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: {
        src: "img/day-switch-or.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__METAL__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 250,
    score: 0
}, {
    id: IID.andgate,
    img: {
        src: ["img/inv-switch-and-out.png", "img/inv-switch-and-in.png", "img/inv-switch-and-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Gate AND", "Activate only if all entries are on.", SKILLS.__LOGIC__, [
        [IID.shapedmetal, 1],
        [IID.smallwire, 1]
    ], 3, [
        [AREAS.weldingmachine, 15000]
    ]),
    stack: 255,
    loot: LOOTID.andgate,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-switch-and.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-switch-and.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__LOGIC__,
    gate: 1,
    wire: [
        [1, 0, 0, 0],
        [0, 0, 0, 1],
        [0, 1, 0, 0],
        [0, 0, 1, 0]
    ],
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.hiddenBuilding,
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: {
        src: "img/day-switch-and.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__METAL__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 250,
    score: 0
}, {
    id: IID.notgate,
    img: {
        src: ["img/inv-switch-reverse-out.png", "img/inv-switch-reverse-in.png", "img/inv-switch-reverse-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Gate NOT", "Activate only if no entry is on.", SKILLS.__LOGIC__, [
        [IID.shapedmetal, 1],
        [IID.smallwire, 1]
    ], 3, [
        [AREAS.weldingmachine, 15000]
    ]),
    stack: 255,
    loot: LOOTID.notgate,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-switch-reverse.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-switch-reverse.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__LOGIC__,
    gate: 1,
    wire: [
        [1, 0, 1, 1],
        [1, 1, 0, 1],
        [0, 1, 1, 1],
        [1, 1, 1, 0]
    ],
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.hiddenBuilding,
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: {
        src: "img/day-switch-reverse.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__METAL__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 250,
    score: 0
}, {
    id: IID.lamp,
    img: {
        src: ["img/inv-lamp-white-out.png", "img/inv-lamp-white-in.png", "img/inv-lamp-white-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Lamp", "Turn on when connected, damage ghoul", SKILLS.__LOGIC__, [
        [IID.shapedmetal, 1],
        [IID.smallwire, 1]
    ], 3, [
        [AREAS.weldingmachine, 15000]
    ]),
    stack: 255,
    loot: LOOTID.lamp,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-lamp.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-lamp.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__LOGIC__,
    gate: 0,
    wire: [
        [1, 1, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1]
    ],
    subtype: 0,
    collision: 2,
    radius: 22,
    areaEffect: 0,
    draw: Render.lamp,
    VvmvM: Render.lampLight,
    packetId: 36,
    interact: {
        src: "img/e-light.png",
        W: {
            isLoaded: 0
        }
    },
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: {
        src: "img/day-lamp-off.png",
        W: {
            isLoaded: 0
        }
    },
    buildingOn: [{
        src: "img/day-lamp-white.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-lamp-yellow.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-lamp-green.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-lamp-clear-blue.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-lamp-purple.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-lamp-pink.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-lamp-orange.png",
        W: {
            isLoaded: 0
        }
    }],
    buildingTop: [{
        src: "img/day-lamp-light-white.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-lamp-light-yellow.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-lamp-light-green.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-lamp-light-clear-blue.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-lamp-light-purple.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-lamp-light-pink.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-lamp-light-orange.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__METAL__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 600,
    score: 0
}, {
    id: IID.cablewall,
    img: {
        src: ["img/inv-cable-wall-out.png", "img/inv-cable-wall-in.png", "img/inv-cable-wall-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Cable  - Wall", "Wall that can be connected to a cable", SKILLS.__LOGIC__, [
        [IID.shapedmetal, 8],
        [IID.smallwire, 1]
    ], 1, [
        [AREAS.weldingmachine, 15000]
    ], 7),
    stack: 255,
    loot: LOOTID.cablewall,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: 0,
    z: 1,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-cable-wall.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-cable-wall.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__LOGIC__,
    gate: 0,
    wire: [
        [1, 1, 0, 0],
        [0, 0, 1, 1],
        [1, 1, 0, 0],
        [0, 0, 1, 1]
    ],
    subtype: 0,
    collision: 1,
    areaEffect: 0,
    draw: Render.breakable,
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: [{
        src: "img/day-cable-wall.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-cable-wall1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-cable-wall2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-cable-wall3.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__METAL__,
    particlesDist: 40,
    timelife: 315360000000,
    life: 15000,
    score: 0
}, {
    id: IID.autodoor,
    img: {
        src: ["img/inv-automatic-door-out.png", "img/inv-automatic-door-in.png", "img/inv-automatic-door-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Automatic Door", "Connect it to a switch to open and close it.", SKILLS.__LOGIC__, [
        [IID.shapedmetal, 8],
        [IID.smallwire, 2],
        [IID.electronicpart, 1]
    ], 1, [
        [AREAS.weldingmachine, 15000]
    ], 7),
    stack: 255,
    loot: LOOTID.autodoor,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: 0,
    z: 1,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-automatic-door.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-automatic-door.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__LOGIC__,
    gate: 0,
    wire: [
        [0, 1, 1, 1],
        [1, 1, 1, 0],
        [1, 0, 1, 1],
        [1, 1, 0, 1]
    ],
    subtype: 0,
    collision: 1,
    areaEffect: 0,
    draw: Render.automaticDoor,
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: [
        [{
            src: "img/day-automatic-door-off.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-automatic-door1-off.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-automatic-door2-off.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-automatic-door3-off.png",
            W: {
                isLoaded: 0
            }
        }],
        [{
            src: "img/day-automatic-door-on.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-automatic-door1-on.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-automatic-door2-on.png",
            W: {
                isLoaded: 0
            }
        }, {
            src: "img/day-automatic-door3-on.png",
            W: {
                isLoaded: 0
            }
        }]
    ],
    particles: PARTICLESID.__METAL__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 15000,
    score: 0
}, {
    id: IID.platform,
    img: {
        src: ["img/inv-platform-out.png", "img/inv-platform-in.png", "img/inv-platform-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Platform", "Weight detector", SKILLS.__LOGIC__, [
        [IID.shapedmetal, 1],
        [IID.smallwire, 1]
    ], 3, [
        [AREAS.weldingmachine, 15000]
    ]),
    stack: 255,
    loot: LOOTID.platform,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-platform-off.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-platform-off.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__LOGIC__,
    gate: 1,
    wire: [
        [1, 1, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1]
    ],
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.defaultBuilding,
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: {
        src: "img/day-platform-off.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__FRIDGE__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 250,
    score: 0
}, {
    id: IID.stonecave,
    img: {
        src: ["img/inv-stone-cave-out.png", "img/inv-stone-cave-in.png", "img/inv-stone-cave-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Stone Cave", "Build mountains.", -1, [
        [IID.stone, 140]
    ], 1, [
        [AREAS.workbench, 30000]
    ], 99),
    idWeapon: 21,     
    fuel: -1,
    zid: 1,
    z: 1,
    stack: 255,
    loot: LOOTID.stonecave,
    wait: 10,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-stone-cave.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-stone-cave.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 1,
    idWall: IID.stonecave,
    lowWall: 0,
    door: 0,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    areaEffect: 0,
    draw: Render.wall,
    drawFloor: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    broken: [{
        src: "img/day-stone-cave-broken0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave-broken1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave-broken2.png",
        W: {
            isLoaded: 0
        }
    }],
    impact: SOUNDID.stone,
    destroy: SOUNDID.stonedes,
    building: [{
        src: "img/day-stone-cave0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave4.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave5.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave6.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave7.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave8.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave9.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave10.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave11.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave12.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave13.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave14.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave15.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave16.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave17.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave18.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave19.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave20.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave21.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave22.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave23.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave24.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave25.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave26.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave27.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave28.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave29.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave30.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave31.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave32.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave33.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave34.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave35.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave36.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave37.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave38.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave39.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave40.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave41.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave42.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave43.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave44.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave45.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-stone-cave46.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__STONE__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 300,
    score: 0
}, {
    id: IID.bunkerwall,
    img: {
        src: ["img/inv-bunker-wall-out.png", "img/inv-bunker-wall-in.png", "img/inv-bunker-wall-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Bunker Wall", "Good old memory of the wasteland.", -1, [
        [IID.stone, 150],
        [IID.shapedmetal, 12]
    ], 1, [
        [AREAS.workbench, 30000]
    ], 99),
    idWeapon: 21,     
    fuel: -1,
    zid: 1,
    z: 1,
    stack: 255,
    loot: LOOTID.bunkerwall,
    wait: 10,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-bunker-wall.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-bunker-wall.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 1,
    idWall: IID.stonecave,
    lowWall: 0,
    door: 0,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    areaEffect: 0,
    draw: Render.wall,
    drawFloor: [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    broken: [{
        src: "img/day-bunker-wall-broken0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall-broken1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall-broken2.png",
        W: {
            isLoaded: 0
        }
    }],
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: [{
        src: "img/day-bunker-wall0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall4.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall5.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall6.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall7.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall8.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall9.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall10.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall11.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall12.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall13.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall14.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall15.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall16.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall17.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall18.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall19.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall20.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall21.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall22.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall23.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall24.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall25.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall26.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall27.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall28.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall29.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall30.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall31.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall32.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall33.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall34.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall35.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall36.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall37.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall38.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall39.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall40.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall41.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall42.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall43.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall44.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall45.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-bunker-wall46.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__STEEL__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 10000,
    score: 0
}, {
    id: IID.mustardfloor,
    img: {
        src: ["img/inv-mustard-floor-out.png", "img/inv-mustard-floor-in.png", "img/inv-mustard-floor-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Golden Floor", "Players can't spawn on it", SKILLS.__BUILDING__, [
        [IID.leather, 2]
    ], 2, [
        [AREAS.workbench, 15000]
    ]),
    stack: 255,
    loot: LOOTID.mustardfloor,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: 2,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-stone-floor.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-stone-floor.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 1,
    idWall: IID.mustardfloor,
    lowWall: 0,
    door: 0,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.groundFloor,
    broken: [{
        src: "img/day-mustard-floor-broken0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-broken1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-broken2.png",
        W: {
            isLoaded: 0
        }
    }],
    impact: SOUNDID.__NO_SOUND__,
    destroy: SOUNDID.pillowdes,
    building: [{
        src: "img/day-mustard-floor-0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-4.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-5.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-6.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-7.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-8.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-9.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-10.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-11.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-12.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-13.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-14.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-15.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-16.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-17.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-18.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-19.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-20.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-21.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-22.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-23.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-24.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-25.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-26.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-27.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-28.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-29.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-30.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-31.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-32.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-33.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-34.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-35.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-36.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-37.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-38.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-39.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-40.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-41.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-42.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-43.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-44.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-45.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-mustard-floor-46.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__GOLD__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 3000,
    score: 0
}, {
    id: IID.redfloor,
    img: {
        src: ["img/inv-red-floor-out.png", "img/inv-red-floor-in.png", "img/inv-red-floor-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Red floor", "Players can't spawn on it", SKILLS.__BUILDING__, [
        [IID.leather, 2]
    ], 2, [
        [AREAS.workbench, 15000]
    ]),
    stack: 255,
    loot: LOOTID.redfloor,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: 2,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/day-clear-blue-stone-floor.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/day-redprint-stone-floor.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 1,
    idWall: IID.redfloor,
    lowWall: 0,
    door: 0,
    broke: 1,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.groundFloor,
    broken: [{
        src: "img/day-red-floor-broken0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-broken1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-broken2.png",
        W: {
            isLoaded: 0
        }
    }],
    impact: SOUNDID.__NO_SOUND__,
    destroy: SOUNDID.pillowdes,
    building: [{
        src: "img/day-red-floor-0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-3.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-4.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-5.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-6.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-7.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-8.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-9.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-10.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-11.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-12.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-13.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-14.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-15.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-16.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-17.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-18.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-19.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-20.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-21.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-22.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-23.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-24.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-25.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-26.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-27.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-28.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-29.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-30.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-31.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-32.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-33.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-34.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-35.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-36.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-37.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-38.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-39.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-40.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-41.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-42.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-43.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-44.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-45.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-red-floor-46.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__MUSHROOM1__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 3000,
    score: 0
}, {
    id: IID.weldingmachine,
    img: {
        src: ["img/inv-welding-machine-out.png", "img/inv-welding-machine-in.png", "img/inv-welding-machine-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Welding Machine", "Allow you to make logic gates", SKILLS.__SURVIVAL__, [
        [IID.junk, 2],
        [IID.shapedmetal, 4],
        [IID.electronicpart, 1]
    ], 1, [
        [AREAS.workbench, 50000]
    ]),
    idWeapon: 21,     
    fuel: -1,
    zid: 0,
    z: 1,
    area: AREAS.weldingmachine,
    stack: 255,
    loot: LOOTID.weldingmachine,
    wait: 10,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-welding-machine.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-welding-machine.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__NO__,
    wire: 0,
    subtype: 0,
    collision: 1,
    areaEffect: 0,
    draw: Render.workbench,
    packetId: 16,
    interact: {
        src: "img/e-welding-machine.png",
        W: {
            isLoaded: 0
        }
    },
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: {
        src: "img/day-welding-machine.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__METAL__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 500,
    score: 0
}, {
    id: IID.cable4,
    img: {
        src: ["img/inv-wire4-out.png", "img/inv-wire4-in.png", "img/inv-wire4-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Cable  - Bridge", "Create automatic mechanisms", SKILLS.__LOGIC__, [
        [IID.smallwire, 1]
    ], 3, [
        [AREAS.weldingmachine, 15000]
    ]),
    stack: 255,
    loot: LOOTID.cable4,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-wire4.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-wire4.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__LOGIC__,
    gate: 0,
    wire: [
        [1, 1, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1]
    ],
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.hiddenBuilding,
    impact: SOUNDID.pillow,
    destroy: SOUNDID.pillowdes,
    building: {
        src: "img/day-wire4.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__BARELRED__,
    particlesDist: 40,
    timelife: 315360000000,
    life: 250,
    score: 0
}, {
    id: IID.__GATE_TIMER__,
    img: {
        src: ["img/inv-timer-out.png", "img/inv-timer-in.png", "img/inv-timer-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Gate Timer", "Emit a signal regularly.", SKILLS.__LOGIC__, [
        [IID.shapedmetal, 1],
        [IID.smallwire, 1]
    ], 3, [
        [AREAS.weldingmachine, 15000]
    ]),
    stack: 255,
    loot: LOOTID.__GATE_TIMER__,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-timer.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-timer.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__LOGIC__,
    gate: 1,
    wire: [
        [1, 1, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1]
    ],
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.timerGate,
    packetId: 38,
    interact: {
        src: "img/e-light.png",
        W: {
            isLoaded: 0
        }
    },
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: [{
        src: "img/day-timer-0.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-timer-1.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-timer-2.png",
        W: {
            isLoaded: 0
        }
    }, {
        src: "img/day-timer-3.png",
        W: {
            isLoaded: 0
        }
    }],
    particles: PARTICLESID.__METAL__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 250,
    score: 0
}, {
    id: IID.xorgate,
    img: {
        src: ["img/inv-xor-out.png", "img/inv-xor-in.png", "img/inv-xor-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Gate Xor", "Activate only if only one entry is on.", SKILLS.__LOGIC__, [
        [IID.shapedmetal, 1],
        [IID.smallwire, 1]
    ], 3, [
        [AREAS.weldingmachine, 15000]
    ]),
    stack: 255,
    loot: LOOTID.xorgate,
    wait: 10,
    idWeapon: 21,     
    fuel: -1,
    zid: -1,
    z: 0,
    delay: 1000,
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    xCenter: [0, 0, 0, 0],
    yCenter: [0, 0, 0, 0],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    blueprint: {
        src: "img/clear-blue-xor.png",
        W: {
            isLoaded: 0
        }
    },
    redprint: {
        src: "img/redprint-xor.png",
        W: {
            isLoaded: 0
        }
    },
    wall: 0,
    lowWall: 0,
    door: 0,
    broke: 0,
    explosion: 0,
    behavior: BEHAVIOR.__LOGIC__,
    gate: 1,
    wire: [
        [1, 0, 0, 0],
        [0, 0, 0, 1],
        [0, 1, 0, 0],
        [0, 0, 1, 0]
    ],
    subtype: 0,
    collision: 0,
    areaEffect: 0,
    draw: Render.hiddenBuilding,
    impact: SOUNDID.metal,
    destroy: SOUNDID.metaldes,
    building: {
        src: "img/day-xor.png",
        W: {
            isLoaded: 0
        }
    },
    particles: PARTICLESID.__METAL__,
    particlesDist: 80,
    timelife: 315360000000,
    life: 250,
    score: 0
},



{
    id: IID.skilleye1,
    img: {
        src: ["img/skill-eye1-out.png", "img/skill-eye1-in.png", "img/skill-eye1-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Vision 1", "Improve your vision", SKILLS.__SKILL__, window.undefined, window.undefined, window.undefined, 0),
    scale: -0.25
},

{
    id: IID.skilleye2,
    img: {
        src: ["img/skill-eye2-out.png", "img/skill-eye2-in.png", "img/skill-eye2-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Vision 2", "Improve your vision", SKILLS.__SKILL__, window.undefined, window.undefined, window.undefined, 5, IID.skilleye1),
    scale: -0.35
},

{
    id: IID.skilleye3,
    img: {
        src: ["img/skill-eye3-out.png", "img/skill-eye3-in.png", "img/skill-eye3-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Vision 3", "Improve your vision", SKILLS.__SKILL__, window.undefined, window.undefined, window.undefined, 7, IID.skilleye2),
    scale: -0.45
},


{
    id: IID.builderskill1,
    img: {
        src: ["img/skill-builder1-out.png", "img/skill-builder1-in.png", "img/skill-builder1-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Builder 1", "Multiplies some craft by two", SKILLS.__SKILL__, window.undefined, window.undefined, window.undefined, 6, window.undefined, 2)
}, {
    id: IID.builderskill2,
    img: {
        src: ["img/skill-builder2-out.png", "img/skill-builder2-in.png", "img/skill-builder2-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Builder 2", "Repair much faster", SKILLS.__SKILL__, window.undefined, window.undefined, window.undefined, 18, IID.builderskill1)
},



{
    id: IID.inventoryskill1,
    img: {
        src: ["img/skill-inv1-out.png", "img/skill-inv1-in.png", "img/skill-inv1-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Inventory 1", "Add a slot in your inventory", SKILLS.__SKILL__, window.undefined, window.undefined, window.undefined, 0),
    bag: 1
},

{
    id: IID.inventoryskill2,
    img: {
        src: ["img/skill-inv2-out.png", "img/skill-inv2-in.png", "img/skill-inv2-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Inventory 2", "Add a slot in your inventory", SKILLS.__SKILL__, window.undefined, window.undefined, window.undefined, 5, IID.inventoryskill1),
    bag: 1
},

{
    id: IID.inventoryskill3,
    img: {
        src: ["img/skill-inv3-out.png", "img/skill-inv3-in.png", "img/skill-inv3-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Inventory 3", "Add a slot in your bag", SKILLS.__SKILL__, window.undefined, window.undefined, window.undefined, 7, IID.inventoryskill2),
    bag: 1
},

{
    id: IID.inventoryskill4,
    img: {
        src: ["img/skill-inv4-out.png", "img/skill-inv4-in.png", "img/skill-inv4-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Inventory 4", "Add two slots in your bag", SKILLS.__SKILL__, window.undefined, window.undefined, window.undefined, 10, IID.inventoryskill3, 2),
    bag: 2
},

{
    id: IID.inventoryskill5,
    img: {
        src: ["img/skill-inv5-out.png", "img/skill-inv5-in.png", "img/skill-inv5-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Inventory 5", "Add three slots in your bag", SKILLS.__SKILL__, window.undefined, window.undefined, window.undefined, 12, IID.inventoryskill4, 3),
    bag: 3
},



    
{
    id: IID.lightweightskill,
    img: {
        src: ["img/skill-lightweight-out.png", "img/skill-lightweight-in.png", "img/skill-lightweight-click.png"],
        W: [{
            isLoaded: 0
        }, {
            isLoaded: 0
        }, {
            isLoaded: 0
        }]
    },
    detail: new Detail("Light Weight", "Less likely to trigger traps.", SKILLS.__SKILL__, window.undefined, window.undefined, window.undefined, 8)
}];

COUNTER = 0;
var FURNITUREID = {
    __SOFA0__:              COUNTER++,
    __SOFA1__:              COUNTER++,
    __SOFA2__:              COUNTER++,
    __SOFA3__:              COUNTER++,
    __SOFA4__:              COUNTER++,
    __BED0__:               COUNTER++,
    __BED1__:               COUNTER++,
    __TABLE0__:             COUNTER++,
    __TV0__:                COUNTER++,
    __COMPUTER0__:          COUNTER++,
    __CHAIR0__:             COUNTER++,
    __WASHBASIN0__:         COUNTER++,
    __FURNITURE0__:         COUNTER++,
    __FURNITURE1__:         COUNTER++,
    __FURNITURE2__:         COUNTER++,
    __FURNITURE3__:         COUNTER++,
    __CARTON0__:            COUNTER++,
    __CARTON1__:            COUNTER++,
    __SAFE0__:              COUNTER++,
    __FRIDGE0__:            COUNTER++,
    __FRIDGE1__:            COUNTER++,
    __TOILET0__:            COUNTER++,
    __LITTLETABLE0__:       COUNTER++,
    __PLOT0__:              COUNTER++,
    __BAREL0__:             COUNTER++,
    __BAREL1__:             COUNTER++,
    __GARBAGE0__:           COUNTER++,
    __CUPBOARD0__:          COUNTER++,
    __PHARMA0__:            COUNTER++,
    __AMMOBOX0__:           COUNTER++,
    __AMMOLOCKER0__:        COUNTER++,
    __AMMOLOCKER1__:        COUNTER++,
    __AMMOLOCKER2__:        COUNTER++,
    __MACHINE0__:           COUNTER++,
    __MACHINE1__:           COUNTER++,
    __USINE_BOX0__:         COUNTER++,
    __USINE_BOX1__:         COUNTER++,
    __USINE_BOX2__:         COUNTER++,
    __USINE_BOX3__:         COUNTER++,
    __DISTRIBUTOR0__:       COUNTER++,
    __CASH0__:              COUNTER++,
    __RENFORCED__:          COUNTER++,
    __SOFA6__:              COUNTER++,
    __GOLD_CHAIR0__:        COUNTER++,
    __GREEN_CHAIR0__:       COUNTER++,
    __WOOD_CHAIR0__:        COUNTER++,
    __TABLE1__:             COUNTER++,
    __SMALL_LIGHT__:        COUNTER++,
    __BED2__:               COUNTER++,
    __FURNITURE4__:         COUNTER++,
    __FURNITURE5__:         COUNTER++,
    __FURNITURE6__:         COUNTER++,
    __CHAIR1__:             COUNTER++,
    __CHAIR2__:             COUNTER++,
    __DISTRIBUTOR1__:       COUNTER++,
    __SHOWER0__:            COUNTER++,
    __TABLE2__:             COUNTER++,
    __BLOOD_TRANS__:        COUNTER++,
    __ENERGY_BOX0__:        COUNTER++
};

COUNTER = 0;
var ROAD = items[IID.__ROAD__].subtype;
ROAD[COUNTER] = {
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    impact: SOUNDID.__NO_SOUND__,
    destroy: SOUNDID.__NO_SOUND__,
    building: {
        src: "img/day-road0.png",
        W: {
            isLoaded: 0
        }
    },
    detail: new Detail("", "", -1, [
        [IID.stone, 100]
    ]),
    life: 100000000,
    score: 0,
    particles: PARTICLESID.__NOTHING__,
    particlesDist: 70,
    angle: window.Math.PI,
    usable: 0,
    fridge: 0,
    loot: null,
    collision: 0,
    z: 0,
    zid: 2,
    areaEffect: 0,
    timelife: 315360000000
};
for (var i = 0; i < 45; i++) {
    COUNTER++;
    ROAD[COUNTER] = window.JSON.parse(window.JSON.stringify(ROAD[0]));
    ROAD[COUNTER].building.src = ("img/day-road" + COUNTER) + ".png";
}
var VV = items[IID.MMnVW].subtype;
VV[FURNITUREID.__SOFA0__] = {
    width: [100, 100, 100, 100],
    height: [100, 100, 100, 100],
    _x: [0, 0, 0, 0],
    _y: [0, 0, 0, 0],
    impact: SOUNDID.pillow,
    destroy: SOUNDID.pillowdes,
    building: {
        src: "img/day-sofa0.png",
        W: {
            isLoaded: 0
        }
    },
    detail: new Detail("", "", -1, [
        [IID.wood, 99],
        [IID.leather, 9],
        [IID.string, 6]
    ]),
    life: 450,
    score: 0,
    particles: PARTICLESID.__SOFA0__,
    particlesDist: 70,
    angle: window.Math.PI,
    usable: 0,
    fridge: 0,
    loot: null,
    collision: 1,
    z: 1,
    zid: 0,
    areaEffect: 0,
    packetId: 25,
    explosion: 0,
    damage: 0,
    damageBuilding: 0,
    timelife: 315360000000
};
VV[FURNITUREID.__SOFA1__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__SOFA0__]));
VV[FURNITUREID.__SOFA1__].building.src = "img/day-sofa1.png";
VV[FURNITUREID.__SOFA1__].particles = PARTICLESID.__SOFA1__;
VV[FURNITUREID.__SOFA2__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__SOFA1__]));
VV[FURNITUREID.__SOFA2__].building.src = "img/day-sofa2.png";
VV[FURNITUREID.__SOFA3__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__SOFA0__]));
VV[FURNITUREID.__SOFA3__].building.src = "img/day-sofa3.png";
VV[FURNITUREID.__SOFA3__].particles = PARTICLESID.__SOFA2__;
VV[FURNITUREID.__SOFA4__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__SOFA3__]));
VV[FURNITUREID.__SOFA4__].building.src = "img/day-sofa4.png";
VV[FURNITUREID.__SOFA6__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__SOFA3__]));
VV[FURNITUREID.__SOFA6__].building.src = "img/day-sofa6.png";
VV[FURNITUREID.__RENFORCED__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__SOFA0__]));
VV[FURNITUREID.__RENFORCED__].building.src = "img/day-renforced-door.png";
VV[FURNITUREID.__RENFORCED__].particles = PARTICLESID.__STEEL__;
VV[FURNITUREID.__RENFORCED__].detail = new Detail("", "", -1, [
    [IID.shapedmetal, 40]
]);
VV[FURNITUREID.__RENFORCED__].life = 7000;
VV[FURNITUREID.__MACHINE0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__SOFA0__]));
VV[FURNITUREID.__MACHINE0__].building.src = "img/day-electronic-box0.png";
VV[FURNITUREID.__MACHINE0__].impact = SOUNDID.metal;
VV[FURNITUREID.__MACHINE0__].destroy = SOUNDID.metaldes;
VV[FURNITUREID.__MACHINE0__].particles = PARTICLESID.__STEEL__;
VV[FURNITUREID.__MACHINE0__].detail = new Detail("", "", -1, [
    [IID.energycell, 8],
    [IID.electronicpart, 4],
    [IID.shapedmetal, 4],
    [IID.junk, 12]
]);
VV[FURNITUREID.__MACHINE0__].width = [100, 100, 100, 100];
VV[FURNITUREID.__MACHINE0__].height = [100, 100, 100, 100];
VV[FURNITUREID.__MACHINE0__]._x = [0, 0, 0, 0];
VV[FURNITUREID.__MACHINE0__]._y = [0, 0, 0, 0];
VV[FURNITUREID.__MACHINE0__].life = 800;
VV[FURNITUREID.__MACHINE1__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__MACHINE0__]));
VV[FURNITUREID.__MACHINE1__].building.src = "img/day-electronic-box1.png";
VV[FURNITUREID.__MACHINE1__].width = [120, 120, 120, 120];
VV[FURNITUREID.__MACHINE1__].height = [120, 120, 120, 120];
VV[FURNITUREID.__MACHINE1__]._x = [-10, -10, -10, -10];
VV[FURNITUREID.__MACHINE1__]._y = [-10, -10, -10, -10];
VV[FURNITUREID.__MACHINE1__].detail = new Detail("", "", -1, [
    [IID.energycell, 16],
    [IID.electronicpart, 16],
    [IID.wires, 8],
    [IID.shapedmetal, 16]
]);
VV[FURNITUREID.__MACHINE1__].life = 1400;
VV[FURNITUREID.__BED0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__SOFA0__]));
VV[FURNITUREID.__BED0__].building.src = "img/day-bed0.png";
VV[FURNITUREID.__BED0__].particles = PARTICLESID.__BED0__;
VV[FURNITUREID.__BED0__].detail = new Detail("", "", -1, [
    [IID.wood, 200],
    [IID.leather, 20]
]);
VV[FURNITUREID.__BED1__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__BED0__]));
VV[FURNITUREID.__BED1__].building.src = "img/day-bed1.png";
VV[FURNITUREID.__BED1__].particles = PARTICLESID.__BED1__;
VV[FURNITUREID.__BED2__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__BED0__]));
VV[FURNITUREID.__BED2__].building.src = "img/day-bed2.png";
VV[FURNITUREID.__BED2__].particles = PARTICLESID.__GREY_STEEL__;
VV[FURNITUREID.__BED2__].detail = new Detail("", "", -1, [
    [IID.shapedmetal, 12],
    [IID.leather, 20],
    [IID.animalfat, 12]
]);
VV[FURNITUREID.__TABLE0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__SOFA0__]));
VV[FURNITUREID.__TABLE0__].building.src = "img/day-table0.png";
VV[FURNITUREID.__TABLE0__].impact = SOUNDID.wood;
VV[FURNITUREID.__TABLE0__].destroy = SOUNDID.wooddes;
VV[FURNITUREID.__TABLE0__].particles = PARTICLESID.__WOOD__;
VV[FURNITUREID.__TABLE0__].detail = new Detail("", "", -1, [
    [IID.wood, 200]
]);
VV[FURNITUREID.__TABLE1__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__TABLE0__]));
VV[FURNITUREID.__TABLE1__].building.src = "img/day-table1.png";
VV[FURNITUREID.__TABLE1__].width = [100, 290, 100, 280];
VV[FURNITUREID.__TABLE1__].height = [280, 100, 280, 100];
VV[FURNITUREID.__TABLE1__].iTile = [-1, 0, -1, 0];
VV[FURNITUREID.__TABLE1__].jTile = [0, -1, 0, -1];
VV[FURNITUREID.__TABLE1__]._x = [0, -90, 0, -90];
VV[FURNITUREID.__TABLE1__]._y = [-90, 0, -90, 0];
VV[FURNITUREID.__TABLE2__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__TABLE0__]));
VV[FURNITUREID.__TABLE2__].building.src = "img/day-table2.png";
VV[FURNITUREID.__TABLE2__].impact = SOUNDID.metal;
VV[FURNITUREID.__TABLE2__].destroy = SOUNDID.metaldes;
VV[FURNITUREID.__TABLE2__].particles = PARTICLESID.__STEEL__;
VV[FURNITUREID.__TABLE2__].detail = new Detail("", "", -1, [
    [IID.shapedmetal, 8]
]);
VV[FURNITUREID.__TV0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__SOFA0__]));
VV[FURNITUREID.__TV0__].building.src = "img/day-tv0.png";
VV[FURNITUREID.__TV0__].impact = SOUNDID.metal;
VV[FURNITUREID.__TV0__].destroy = SOUNDID.metaldes;
VV[FURNITUREID.__TV0__].particles = PARTICLESID.__SAFE0__;
VV[FURNITUREID.__TV0__].detail = new Detail("", "", -1, [
    [IID.electronicpart, 4],
    [IID.shapedmetal, 16],
    [IID.smallwire, 4],
    [IID.junk, 12]
]);
VV[FURNITUREID.__COMPUTER0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__SOFA0__]));
VV[FURNITUREID.__COMPUTER0__].building.src = "img/day-computer0.png";
VV[FURNITUREID.__COMPUTER0__].impact = SOUNDID.metal;
VV[FURNITUREID.__COMPUTER0__].destroy = SOUNDID.metaldes;
VV[FURNITUREID.__COMPUTER0__].particles = PARTICLESID.__METAL__;
VV[FURNITUREID.__COMPUTER0__].detail = new Detail("", "", -1, [
    [IID.smallwire, 4],
    [IID.shapedmetal, 16],
    [IID.junk, 12],
    [IID.electronicpart, 4]
]);
VV[FURNITUREID.__CHAIR0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__COMPUTER0__]));
VV[FURNITUREID.__CHAIR0__].building.src = "img/day-chair0.png";
VV[FURNITUREID.__CHAIR0__].detail = new Detail("", "", -1, [
    [IID.leather, 8],
    [IID.shapedmetal, 8]
]);
VV[FURNITUREID.__CHAIR1__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__COMPUTER0__]));
VV[FURNITUREID.__CHAIR1__].building.src = "img/day-chair1.png";
VV[FURNITUREID.__CHAIR1__].detail = new Detail("", "", -1, [
    [IID.leather, 8],
    [IID.shapedmetal, 8]
]);
VV[FURNITUREID.__CHAIR2__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__COMPUTER0__]));
VV[FURNITUREID.__CHAIR2__].building.src = "img/day-chair2.png";
VV[FURNITUREID.__CHAIR2__].detail = new Detail("", "", -1, [
    [IID.leather, 8],
    [IID.shapedmetal, 8]
]);
VV[FURNITUREID.__WASHBASIN0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__SOFA0__]));
VV[FURNITUREID.__WASHBASIN0__].building.src = "img/day-washbasin0.png";
VV[FURNITUREID.__WASHBASIN0__].impact = SOUNDID.wood;
VV[FURNITUREID.__WASHBASIN0__].destroy = SOUNDID.wooddes;
VV[FURNITUREID.__WASHBASIN0__].particles = PARTICLESID.__WOODLIGHT__;
VV[FURNITUREID.__WASHBASIN0__].detail = new Detail("", "", -1, [
    [IID.wood, 150],
    [IID.shapedmetal, 8]
]);
VV[FURNITUREID.__PHARMA0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__WASHBASIN0__]));
VV[FURNITUREID.__PHARMA0__].building.src = "img/day-pharma0.png";
VV[FURNITUREID.__PHARMA0__].detail = new Detail("", "", -1, [
    [IID.shapedmetal, 8],
    [IID.stone, 60]
]);
VV[FURNITUREID.__PHARMA0__].impact = SOUNDID.stone;
VV[FURNITUREID.__PHARMA0__].destroy = SOUNDID.stonedes;
VV[FURNITUREID.__PHARMA0__].particles = PARTICLESID.__TOILET__;
VV[FURNITUREID.__PHARMA0__].usable = 1;
VV[FURNITUREID.__PHARMA0__].loot = [
    [IID.bandage, 1, 0.1],
    [IID.medkit, 1, 0.03],
    [IID.radway, 1, 0.05],
    [IID.chemicalcomponent, 2, 0.2],
    [IID.syringe, 1, 0.1]
];
VV[FURNITUREID.__SHOWER0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__WASHBASIN0__]));
VV[FURNITUREID.__SHOWER0__].building.src = "img/day-shower0.png";
VV[FURNITUREID.__SHOWER0__].detail = new Detail("", "", -1, [
    [IID.shapedmetal, 8],
    [IID.stone, 60]
]);
VV[FURNITUREID.__SHOWER0__].impact = SOUNDID.stone;
VV[FURNITUREID.__SHOWER0__].destroy = SOUNDID.stonedes;
VV[FURNITUREID.__SHOWER0__].particles = PARTICLESID.__TOILET__;
VV[FURNITUREID.__SHOWER0__].width = [70, 100, 70, 100];
VV[FURNITUREID.__SHOWER0__].height = [100, 70, 100, 70];
VV[FURNITUREID.__SHOWER0__]._x = [0, 0, 30, 0];
VV[FURNITUREID.__SHOWER0__]._y = [0, 0, 0, 30];
VV[FURNITUREID.__FURNITURE0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__WASHBASIN0__]));
VV[FURNITUREID.__FURNITURE0__].building.src = "img/day-furniture0.png";
VV[FURNITUREID.__FURNITURE0__].width = [50, 100, 50, 100];
VV[FURNITUREID.__FURNITURE0__].height = [100, 50, 100, 50];
VV[FURNITUREID.__FURNITURE0__]._x = [0, 0, 50, 0];
VV[FURNITUREID.__FURNITURE0__]._y = [0, 0, 0, 50];
VV[FURNITUREID.__FURNITURE0__].detail = new Detail("", "", -1, [
    [IID.wood, 200]
]);
VV[FURNITUREID.__FURNITURE0__].usable = 1;
VV[FURNITUREID.__FURNITURE0__].loot = [
    [IID.headscarf, 1, 0.004],
    [IID.gazmask, 1, 0.004],
    [IID.pistol, 1, 0.005],
    [IID.bullet9mm, 30, 0.02],
    [IID.bandage, 1, 0.05],
    [IID.tomatoseed, 1, 0.08],
    [IID.nails, 40, 0.1],
    [IID.seedorange, 2, 0.1],
    [IID.sleepingbag, 1, 0.01],
    [IID.energycell, 4, 0.05],
    [IID.junk, 1, 0.2],
    [IID.string, 2, 0.1]
];
VV[FURNITUREID.__FURNITURE1__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FURNITURE0__]));
VV[FURNITUREID.__FURNITURE1__].building.src = "img/day-furniture1.png";
VV[FURNITUREID.__FURNITURE1__].width = [70, 100, 70, 100];
VV[FURNITUREID.__FURNITURE1__].height = [100, 70, 100, 70];
VV[FURNITUREID.__FURNITURE1__]._x = [0, 0, 30, 0];
VV[FURNITUREID.__FURNITURE1__]._y = [0, 0, 0, 30];
VV[FURNITUREID.__FURNITURE2__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FURNITURE0__]));
VV[FURNITUREID.__FURNITURE2__].building.src = "img/day-furniture2.png";
VV[FURNITUREID.__FURNITURE2__].width = [70, 70, 70, 70];
VV[FURNITUREID.__FURNITURE2__].height = [70, 70, 70, 70];
VV[FURNITUREID.__FURNITURE2__]._x = [15, 15, 15, 15];
VV[FURNITUREID.__FURNITURE2__]._y = [15, 15, 15, 15];
VV[FURNITUREID.__FURNITURE2__].detail = new Detail("", "", -1, [
    [IID.wood, 100]
]);
VV[FURNITUREID.__FURNITURE3__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FURNITURE2__]));
VV[FURNITUREID.__FURNITURE3__].building.src = "img/day-furniture3.png";
VV[FURNITUREID.__FURNITURE4__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FURNITURE1__]));
VV[FURNITUREID.__FURNITURE4__].building.src = "img/day-furniture4.png";
VV[FURNITUREID.__FURNITURE4__].impact = SOUNDID.metal;
VV[FURNITUREID.__FURNITURE4__].destroy = SOUNDID.metaldes;
VV[FURNITUREID.__FURNITURE4__].particles = PARTICLESID.__GREY_STEEL__;
VV[FURNITUREID.__FURNITURE4__].loot = [
    [IID.headscarf, 1, 0.004],
    [IID.gazmask, 1, 0.004],
    [IID.pistol, 1, 0.005],
    [IID.bullet9mm, 30, 0.02],
    [IID.bandage, 1, 0.05],
    [IID.smallwire, 4, 0.1],
    [IID.lamp, 1, 0.08],
    [IID.platform, 1, 0.08],
    [IID.sleepingbag, 1, 0.01],
    [IID.energycell, 8, 0.05],
    [IID.junk, 2, 0.2],
    [IID.string, 2, 0.1]
];
VV[FURNITUREID.__FURNITURE5__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FURNITURE2__]));
VV[FURNITUREID.__FURNITURE5__].building.src = "img/day-furniture5.png";
VV[FURNITUREID.__FURNITURE5__].impact = SOUNDID.metal;
VV[FURNITUREID.__FURNITURE5__].destroy = SOUNDID.metaldes;
VV[FURNITUREID.__FURNITURE5__].particles = PARTICLESID.__GREY_STEEL__;
VV[FURNITUREID.__FURNITURE5__].loot = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FURNITURE4__].loot));
VV[FURNITUREID.__FURNITURE6__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FURNITURE5__]));
VV[FURNITUREID.__FURNITURE6__].building.src = "img/day-furniture6.png";
VV[FURNITUREID.__CARTON0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FURNITURE2__]));
VV[FURNITUREID.__CARTON0__].impact = SOUNDID.pillow;
VV[FURNITUREID.__CARTON0__].destroy = SOUNDID.pillowdes;
VV[FURNITUREID.__CARTON0__].building.src = "img/day-carton-box0.png";
VV[FURNITUREID.__CARTON0__].detail = new Detail("", "", -1, []);
VV[FURNITUREID.__CARTON0__].usable = 1;
VV[FURNITUREID.__CARTON0__].loot = [
    [IID.can, 1, 0.1],
    [IID.junk, 2, 0.2],
    [IID.headscarf, 1, 0.003],
    [IID.gazmask, 1, 0.003],
    [IID.nailgun, 1, 0.01],
    [IID.pistol, 1, 0.005],
    [IID.bullet9mm, 30, 0.02],
    [IID.bandage, 1, 0.08],
    [IID.tomatoseed, 1, 0.1],
    [IID.nails, 40, 0.02],
    [IID.seedorange, 2, 0.1],
    [IID.energycell, 4, 0.08],
    [IID.electronicpart, 1, 0.1]
];
VV[FURNITUREID.__CARTON1__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__CARTON0__]));
VV[FURNITUREID.__CARTON1__].building.src = "img/day-carton-box1.png";
VV[FURNITUREID.__GOLD_CHAIR0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__CARTON0__]));
VV[FURNITUREID.__GOLD_CHAIR0__].building.src = "img/day-gold-chair0.png";
VV[FURNITUREID.__GOLD_CHAIR0__].detail = new Detail("", "", -1, [
    [IID.wood, 40]
]);
VV[FURNITUREID.__GOLD_CHAIR0__].usable = 0;
VV[FURNITUREID.__GOLD_CHAIR0__].particles = PARTICLESID.__GOLD__;
VV[FURNITUREID.__GREEN_CHAIR0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__GOLD_CHAIR0__]));
VV[FURNITUREID.__GREEN_CHAIR0__].building.src = "img/day-green-chair0.png";
VV[FURNITUREID.__GREEN_CHAIR0__].particles = PARTICLESID.__KAKI__;
VV[FURNITUREID.__WOOD_CHAIR0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__GOLD_CHAIR0__]));
VV[FURNITUREID.__WOOD_CHAIR0__].building.src = "img/day-wood-chair0.png";
VV[FURNITUREID.__WOOD_CHAIR0__].impact = SOUNDID.wood;
VV[FURNITUREID.__WOOD_CHAIR0__].destroy = SOUNDID.wooddes;
VV[FURNITUREID.__WOOD_CHAIR0__].particles = PARTICLESID.__WOODLIGHT__;
VV[FURNITUREID.__PLOT0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FURNITURE2__]));
VV[FURNITUREID.__PLOT0__].building.src = "img/day-plot0.png";
VV[FURNITUREID.__PLOT0__].particles = PARTICLESID.__PLOT__;
VV[FURNITUREID.__PLOT0__].collision = 2;
VV[FURNITUREID.__PLOT0__].radius = 30;
VV[FURNITUREID.__PLOT0__].detail = new Detail("", "", -1, [
    [IID.stone, 40],
    [IID.wood, 40]
]);
VV[FURNITUREID.__PLOT0__].usable = 0;
VV[FURNITUREID.__BLOOD_TRANS__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__PLOT0__]));
VV[FURNITUREID.__BLOOD_TRANS__].impact = SOUNDID.metal;
VV[FURNITUREID.__BLOOD_TRANS__].destroy = SOUNDID.metaldes;
VV[FURNITUREID.__BLOOD_TRANS__].building.src = "img/day-blood-transfusion.png";
VV[FURNITUREID.__BLOOD_TRANS__].particles = PARTICLESID.__GREY_STEEL__;
var wNMNN = window.console;
wNMNN.log = wNMNN.info = wNMNN.error = wNMNN.warn = wNMNN.debug = wNMNN.NWVnW = wNMNN.trace = wNMNN.time = wNMNN.timeEnd = function() {};
VV[FURNITUREID.__BLOOD_TRANS__].detail = new Detail("", "", -1, [
    [IID.junk, 2],
    [IID.shapedmetal, 1],
    [IID.syringe, 1]
]);
VV[FURNITUREID.__BAREL0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FURNITURE2__]));
VV[FURNITUREID.__BAREL0__].building.src = "img/day-barel0.png";
VV[FURNITUREID.__BAREL0__].impact = SOUNDID.metal;
VV[FURNITUREID.__BAREL0__].destroy = SOUNDID.__NO_SOUND__;
VV[FURNITUREID.__BAREL0__].particles = PARTICLESID.__BARELRED__;
VV[FURNITUREID.__BAREL0__].explosion = 1;
VV[FURNITUREID.__BAREL0__].damage = 250;
VV[FURNITUREID.__BAREL0__].damageBuilding = 5000;
VV[FURNITUREID.__BAREL0__].collision = 2;
VV[FURNITUREID.__BAREL0__].radius = 30;
VV[FURNITUREID.__BAREL0__].detail = new Detail("", "", -1, [
    [IID.shapedmetal, 8]
]);
VV[FURNITUREID.__BAREL0__].usable = 1;
VV[FURNITUREID.__BAREL0__].life = 100;
VV[FURNITUREID.__BAREL0__].loot = [
    [IID.gasoline, 1, 0.2]
];
VV[FURNITUREID.__BAREL1__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FURNITURE2__]));
VV[FURNITUREID.__BAREL1__].building.src = "img/day-barel1.png";
VV[FURNITUREID.__BAREL1__].impact = SOUNDID.metal;
VV[FURNITUREID.__BAREL1__].destroy = SOUNDID.__NO_SOUND__;
VV[FURNITUREID.__BAREL1__].particles = PARTICLESID.__BARELGREEN__;
VV[FURNITUREID.__BAREL1__].explosion = 1;
VV[FURNITUREID.__BAREL1__].damage = 300;
VV[FURNITUREID.__BAREL1__].damageBuilding = 10000;
VV[FURNITUREID.__BAREL1__].collision = 2;
VV[FURNITUREID.__BAREL1__].radius = 30;
VV[FURNITUREID.__BAREL1__].life = 300;
VV[FURNITUREID.__BAREL1__].detail = new Detail("", "", -1, [
    [IID.uranium, 8],
    [IID.shapedmetal, 8]
]);
VV[FURNITUREID.__BAREL1__].usable = 0;
VV[FURNITUREID.__BAREL1__].areaEffect = __RADIATION__;
VV[FURNITUREID.__GARBAGE0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FURNITURE2__]));
VV[FURNITUREID.__GARBAGE0__].building.src = "img/day-garbage-bag0.png";
VV[FURNITUREID.__GARBAGE0__].impact = SOUNDID.pillow;
VV[FURNITUREID.__GARBAGE0__].destroy = SOUNDID.pillowdes;
VV[FURNITUREID.__GARBAGE0__].particles = PARTICLESID.__GARBAGE0__;
VV[FURNITUREID.__GARBAGE0__].collision = 2;
VV[FURNITUREID.__GARBAGE0__].radius = 30;
VV[FURNITUREID.__GARBAGE0__].detail = new Detail("", "", -1, []);
VV[FURNITUREID.__GARBAGE0__].loot = [
    [IID.can, 1, 0.08],
    [IID.syringe, 1, 0.05],
    [IID.gazmask, 1, 0.02],
    [IID.pistol, 1, 0.01],
    [IID.bullet9mm, 30, 0.02],
    [IID.nails, 40, 0.1],
    [IID.seedorange, 2, 0.1],
    [IID.tomatoseed, 1, 0.1],
    [IID.rottentomato, 1, 0.15],
    [IID.rottenorange, 1, 0.15],
    [IID.rottensteak, 1, 0.15],
    [IID.junk, 3, 0.4]
];
VV[FURNITUREID.__FRIDGE0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FURNITURE0__]));
VV[FURNITUREID.__FRIDGE0__].building.src = "img/day-fridge0.png";
VV[FURNITUREID.__FRIDGE0__].impact = SOUNDID.metal;
VV[FURNITUREID.__FRIDGE0__].destroy = SOUNDID.metaldes;
VV[FURNITUREID.__FRIDGE0__].particles = PARTICLESID.__METAL__;
VV[FURNITUREID.__FRIDGE0__].detail = new Detail("", "", -1, [
    [IID.shapedmetal, 16],
    [IID.sulfur, 16]
]);
VV[FURNITUREID.__FRIDGE0__].fridge = 1;
VV[FURNITUREID.__FRIDGE0__].loot = [
    [IID.soda, 1, 0.1],
    [IID.tomatosoup, 1, 0.1],
    [IID.chips, 1, 0.01],
    [IID.rottentomato, 1, 0.15],
    [IID.rottenorange, 1, 0.15],
    [IID.rottensteak, 1, 0.15],
    [IID.rottenchips, 1, 0.01]
];
VV[FURNITUREID.__FRIDGE1__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FRIDGE0__]));
VV[FURNITUREID.__FRIDGE1__].building.src = "img/day-fridge1.png";
VV[FURNITUREID.__FRIDGE1__].particles = PARTICLESID.__FRIDGE__;
VV[FURNITUREID.__DISTRIBUTOR0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FURNITURE0__]));
VV[FURNITUREID.__DISTRIBUTOR0__].building.src = "img/day-vending-machine0.png";
VV[FURNITUREID.__DISTRIBUTOR0__].impact = SOUNDID.metal;
VV[FURNITUREID.__DISTRIBUTOR0__].destroy = SOUNDID.metaldes;
VV[FURNITUREID.__DISTRIBUTOR0__].particles = PARTICLESID.__RED_STEEL__;
VV[FURNITUREID.__DISTRIBUTOR0__].detail = new Detail("", "", -1, [
    [IID.shapedmetal, 16],
    [IID.sulfur, 16]
]);
VV[FURNITUREID.__DISTRIBUTOR0__].fridge = 1;
VV[FURNITUREID.__DISTRIBUTOR0__].loot = [
    [IID.soda, 1, 0.04],
    [IID.chips, 1, 0.04]
];
VV[FURNITUREID.__DISTRIBUTOR1__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__DISTRIBUTOR0__]));
VV[FURNITUREID.__DISTRIBUTOR1__].building.src = "img/day-distributor0.png";
VV[FURNITUREID.__DISTRIBUTOR1__].particles = PARTICLESID.__GREY_STEEL__;
VV[FURNITUREID.__DISTRIBUTOR1__].detail = new Detail("", "", -1, [
    [IID.shapedmetal, 16],
    [IID.sulfur, 16]
]);
VV[FURNITUREID.__DISTRIBUTOR1__].fridge = 1;
VV[FURNITUREID.__DISTRIBUTOR1__].loot = [
    [IID.soda, 1, 0.04],
    [IID.chips, 1, 0.04],
    [IID.tomatosoup, 1, 0.04]
];
VV[FURNITUREID.__CASH0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FURNITURE1__]));
VV[FURNITUREID.__CASH0__].building.src = "img/day-cash-machine0.png";
VV[FURNITUREID.__CASH0__].impact = SOUNDID.metal;
VV[FURNITUREID.__CASH0__].destroy = SOUNDID.metaldes;
VV[FURNITUREID.__CASH0__].particles = PARTICLESID.__GREY_STEEL__;
VV[FURNITUREID.__CASH0__].detail = new Detail("", "", -1, [
    [IID.shapedmetal, 16],
    [IID.electronicpart, 4]
]);
VV[FURNITUREID.__CASH0__].loot = [
    [IID.junk, 1, 0.05]
];
VV[FURNITUREID.__CUPBOARD0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FURNITURE0__]));
VV[FURNITUREID.__CUPBOARD0__].building.src = "img/day-cupboard0.png";
VV[FURNITUREID.__CUPBOARD0__].particles = PARTICLESID.__WOOD__;
VV[FURNITUREID.__USINE_BOX0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FURNITURE0__]));
VV[FURNITUREID.__USINE_BOX0__].impact = SOUNDID.metal;
VV[FURNITUREID.__USINE_BOX0__].destroy = SOUNDID.metaldes;
VV[FURNITUREID.__USINE_BOX0__].building.src = "img/day-electronic-box2.png";
VV[FURNITUREID.__USINE_BOX0__].particles = PARTICLESID.__STEEL__;
VV[FURNITUREID.__USINE_BOX0__].detail = new Detail("", "", -1, [
    [IID.shapedmetal, 16]
]);
VV[FURNITUREID.__USINE_BOX0__].width = [70, 70, 70, 70];
VV[FURNITUREID.__USINE_BOX0__].height = [70, 70, 70, 70];
VV[FURNITUREID.__USINE_BOX0__]._x = [15, 15, 15, 15];
VV[FURNITUREID.__USINE_BOX0__]._y = [15, 15, 15, 15];
VV[FURNITUREID.__USINE_BOX0__].loot = [
    [IID.electronicpart, 2, 0.1],
    [IID.junk, 2, 0.1],
    [IID.energycell, 20, 0.05],
    [IID.syringe, 2, 0.1],
    [IID.chemicalcomponent, 4, 0.1],
    [IID.radway, 1, 0.03],
    [IID.alloys, 1, 0.01]
];
VV[FURNITUREID.__USINE_BOX1__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__USINE_BOX0__]));
VV[FURNITUREID.__USINE_BOX1__].building.src = "img/day-electronic-box3.png";
VV[FURNITUREID.__USINE_BOX1__].detail = new Detail("", "", -1, [
    [IID.shapedmetal, 16],
    [IID.electronicpart, 4]
]);
if (window.NVMWV) {
    var NwvwW = window['Math'].acos;
    window['Math'].acos = window['Math'].asin;
    window['Math'].asin = NwvwW;
};
VV[FURNITUREID.__USINE_BOX1__].loot = [
    [IID.electronicpart, 2, 0.1],
    [IID.junk, 4, 0.1],
    [IID.energycell, 20, 0.05],
    [IID.wires, 1, 0.03],
    [IID.shapeduranium, 5, 0.01],
    [IID.radway, 2, 0.1],
    [IID.syringe, 3, 0.1],
    [IID.chemicalcomponent, 5, 0.1],
    [IID.laserpistol, 1, 0.005],
    [IID.alloys, 2, 0.05]
];
VV[FURNITUREID.__ENERGY_BOX0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__USINE_BOX1__]));
VV[FURNITUREID.__ENERGY_BOX0__].building.src = "img/day-energy-box0.png";
VV[FURNITUREID.__ENERGY_BOX0__].particles = PARTICLESID.__KAKI__;
VV[FURNITUREID.__ENERGY_BOX0__].detail = new Detail("", "", -1, [
    [IID.shapedmetal, 16],
    [IID.electronicpart, 4]
]);
VV[FURNITUREID.__ENERGY_BOX0__].loot = [
    [IID.electronicpart, 2, 0.1],
    [IID.junk, 4, 0.1],
    [IID.energycell, 20, 0.05],
    [IID.smallwire, 8, 0.03],
    [IID.shapeduranium, 5, 0.01],
    [IID.radway, 2, 0.1],
    [IID.syringe, 3, 0.1],
    [IID.chemicalcomponent, 5, 0.1],
    [IID.laserpistol, 1, 0.005],
    [IID.alloys, 2, 0.05]
];
VV[FURNITUREID.__USINE_BOX2__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__USINE_BOX0__]));
VV[FURNITUREID.__USINE_BOX2__].building.src = "img/day-electronic-box4.png";
VV[FURNITUREID.__USINE_BOX2__].loot = [
    [IID.electronicpart, 2, 0.1],
    [IID.junk, 4, 0.1],
    [IID.energycell, 20, 0.05],
    [IID.wires, 1, 0.03],
    [IID.shapeduranium, 2, 0.01],
    [IID.radway, 1, 0.1],
    [IID.syringe, 3, 0.1],
    [IID.chemicalcomponent, 5, 0.1],
    [IID.alloys, 1, 0.01],
    [IID.dynamite, 1, 0.008]
];
VV[FURNITUREID.__USINE_BOX3__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__USINE_BOX0__]));
VV[FURNITUREID.__USINE_BOX3__].building.src = "img/day-electronic-box5.png";
VV[FURNITUREID.__AMMOBOX0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FURNITURE0__]));
VV[FURNITUREID.__AMMOBOX0__].building.src = "img/day-ammo-box.png";
VV[FURNITUREID.__AMMOBOX0__].particles = PARTICLESID.__WOODLIGHT__;
VV[FURNITUREID.__AMMOBOX0__].loot = [
    [IID.mp5, 1, 0.001], 
    [IID.ak47, 1, 0.001], 
    [IID.shotgun, 1, 0.001], 
    [IID.sawedoff, 1, 0.001], 
    [IID.deserteagle, 1, 0.001], 
    [IID.sniper, 1, 0.001],
    [IID.sniperbullet, 50, 0.01],
    [IID.energycell, 20, 0.01],
    [IID.laserpistol, 1, 0.0008],
    [IID.dynamite, 2, 0.005],
    [IID.c4bomb, 1, 0.001],
    [IID.joystic, 1, 0.001],
    [IID.landmine, 3, 0.005],
    [IID.bulletshotgun, 30, 0.01],
    [IID.pistol, 1, 0.003],
    [IID.bullet9mm, 50, 0.01],
    [IID.crossbow, 1, 0.003],
    [IID.crossarrow, 50, 0.01],
    [IID.stoneaxe, 1, 0.005],
    [IID.metalhelmet, 1, 0.005],
    [IID.weldinghelmet, 1, 0.002],
    [IID.gladiatorhelmet, 1, 0.001],
    [IID.leatherjacket, 1, 0.005],
    [IID.kevlarsuit, 1, 0.002],
    [IID.SWATsuit, 1, 0.001],
    [IID.tesla1, 1, 0.002],
    [IID.tesla2, 1, 0.001],
    [IID.lapadoine, 1, 0.0005],
    [IID.lasersubmachine, 1, 0.0005]
];
VV[FURNITUREID.__AMMOLOCKER1__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__AMMOBOX0__]));
VV[FURNITUREID.__AMMOLOCKER1__].impact = SOUNDID.metal;
VV[FURNITUREID.__AMMOLOCKER1__].destroy = SOUNDID.metaldes;
VV[FURNITUREID.__AMMOLOCKER1__].building.src = "img/day-ammo-locker1.png";
VV[FURNITUREID.__AMMOLOCKER1__].particles = PARTICLESID.__GREY_STEEL__;
VV[FURNITUREID.__AMMOLOCKER1__].detail = new Detail("", "", -1, [
    [IID.shapedmetal, 32],
    [IID.sulfur, 12]
]);
VV[FURNITUREID.__AMMOLOCKER2__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__AMMOBOX0__]));
VV[FURNITUREID.__AMMOLOCKER2__].impact = SOUNDID.metal;
VV[FURNITUREID.__AMMOLOCKER2__].destroy = SOUNDID.metaldes;
VV[FURNITUREID.__AMMOLOCKER2__].building.src = "img/day-ammo-locker2.png";
VV[FURNITUREID.__AMMOLOCKER2__].particles = PARTICLESID.__GREY_STEEL__;
VV[FURNITUREID.__AMMOLOCKER2__].detail = new Detail("", "", -1, [
    [IID.shapedmetal, 32],
    [IID.sulfur, 12]
]);
VV[FURNITUREID.__AMMOLOCKER0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__AMMOBOX0__]));
VV[FURNITUREID.__AMMOLOCKER0__].impact = SOUNDID.metal;
VV[FURNITUREID.__AMMOLOCKER0__].destroy = SOUNDID.metaldes;
VV[FURNITUREID.__AMMOLOCKER0__].building.src = "img/day-ammo-locker0.png";
VV[FURNITUREID.__AMMOLOCKER0__].particles = PARTICLESID.__BLUE_STEEL__;
VV[FURNITUREID.__AMMOLOCKER0__].width = [70, 50, 70, 50];
VV[FURNITUREID.__AMMOLOCKER0__].height = [50, 70, 50, 70];
VV[FURNITUREID.__AMMOLOCKER0__]._x = [0, 25, 30, 25];
VV[FURNITUREID.__AMMOLOCKER0__]._y = [25, 0, 25, 30];
VV[FURNITUREID.__AMMOLOCKER0__].detail = new Detail("", "", -1, [
    [IID.shapedmetal, 32],
    [IID.sulfur, 12]
]);
VV[FURNITUREID.__SAFE0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FURNITURE0__]));
VV[FURNITUREID.__SAFE0__].impact = SOUNDID.metal;
VV[FURNITUREID.__SAFE0__].destroy = SOUNDID.metaldes;
VV[FURNITUREID.__SAFE0__].building.src = "img/day-safe0.png";
VV[FURNITUREID.__SAFE0__].particles = PARTICLESID.__SAFE0__;
VV[FURNITUREID.__SAFE0__].detail = new Detail("", "", -1, [
    [IID.shapedmetal, 32],
    [IID.sulfur, 32]
]);
VV[FURNITUREID.__SAFE0__].loot = [
    [IID.chapka, 1, 0.008],
    [IID.coat, 1, 0.002],
    [IID.radiationsuit, 1, 0.002],
    [IID.gazprotection, 1, 0.02],
    [IID.sawedoff, 1, 0.002],
    [IID.mp5, 1, 0.002],
    [IID.ak47, 1, 0.002],
    [IID.shotgun, 1, 0.002],
    [IID.deserteagle, 1, 0.002],
    [IID.sniper, 1, 0.002],
    [IID.sniperbullet, 50, 0.02],
    [IID.bulletshotgun, 30, 0.02],
    [IID.dynamite, 1, 0.01],
    [IID.landmine, 1, 0.01],
    [IID.pistol, 1, 0.04],
    [IID.bullet9mm, 40, 0.06],
    [IID.crossbow, 1, 0.05],
    [IID.crossarrow, 50, 0.05]
];
VV[FURNITUREID.__LITTLETABLE0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FRIDGE0__]));
VV[FURNITUREID.__LITTLETABLE0__].building.src = "img/day-little-table0.png";
VV[FURNITUREID.__LITTLETABLE0__].width = [50, 50, 50, 50];
VV[FURNITUREID.__LITTLETABLE0__].height = [50, 50, 50, 50];
VV[FURNITUREID.__LITTLETABLE0__]._x = [25, 25, 25, 25];
VV[FURNITUREID.__LITTLETABLE0__]._y = [25, 25, 25, 25];
VV[FURNITUREID.__LITTLETABLE0__].detail = new Detail("", "", -1, [
    [IID.shapedmetal, 8]
]);
VV[FURNITUREID.__LITTLETABLE0__].usable = 0;
VV[FURNITUREID.__SMALL_LIGHT__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FURNITURE2__]));
VV[FURNITUREID.__SMALL_LIGHT__].building.src = "img/day-small-light-off.png";
VV[FURNITUREID.__SMALL_LIGHT__].particles = PARTICLESID.__GREY_STEEL__;
VV[FURNITUREID.__TOILET0__] = window.JSON.parse(window.JSON.stringify(VV[FURNITUREID.__FRIDGE0__]));
VV[FURNITUREID.__TOILET0__].impact = SOUNDID.stone;
VV[FURNITUREID.__TOILET0__].destroy = SOUNDID.stonedes;
VV[FURNITUREID.__TOILET0__].particles = PARTICLESID.__TOILET__;
VV[FURNITUREID.__TOILET0__].building.src = "img/day-toilet0.png";
VV[FURNITUREID.__TOILET0__].width = [50, 70, 50, 70];
VV[FURNITUREID.__TOILET0__].height = [70, 50, 70, 50];
VV[FURNITUREID.__TOILET0__]._x = [25, 30, 25, 0];
VV[FURNITUREID.__TOILET0__]._y = [0, 25, 30, 25];
VV[FURNITUREID.__TOILET0__].particles = PARTICLESID.__TOILET__;
VV[FURNITUREID.__TOILET0__].detail = new Detail("", "", -1, [
    [IID.shapedmetal, 4],
    [IID.stone, 100]
]);
VV[FURNITUREID.__TOILET0__].usable = 1;
VV[FURNITUREID.__TOILET0__].loot = [
    [IID.syringe, 1, 0.2],
    [IID.chemicalcomponent, 1, 0.02],
    [IID.ghoulblood, 1, 0.005],
    [IID.lapadoine, 1, 0.002]
];
var LOOT = [{
    id: LOOTID.mvnnv,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wood0.png",
    idItem: IID.wood,
    amount: 1,
    scale: 0.85,
    angle: 0
}, {
    id: LOOTID.wWvMW,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wood1.png",
    idItem: IID.wood,
    amount: 2,
    scale: 0.85,
    angle: 0
}, {
    id: LOOTID.wood,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wood2.png",
    idItem: IID.wood,
    amount: 3,
    scale: 0.85,
    angle: 0
}, {
    id: LOOTID.mnVVV,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-stone0.png",
    idItem: IID.stone,
    amount: 1,
    scale: 1.2,
    angle: 0
}, {
    id: LOOTID.vWVMv,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-stone1.png",
    idItem: IID.stone,
    amount: 2,
    scale: 1.2,
    angle: 0
}, {
    id: LOOTID.stone,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-stone2.png",
    idItem: IID.stone,
    amount: 3,
    scale: 1.2,
    angle: 0
}, {
    id: LOOTID.steel,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-steel.png",
    idItem: IID.steel,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.animalfat,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-animal-fat.png",
    idItem: IID.animalfat,
    amount: 1,
    scale: 1,
    angle: 0
}, {
    id: LOOTID.animaltendon,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-animal-tendon.png",
    idItem: IID.animaltendon,
    amount: 1,
    scale: 1,
    angle: 0
}, {
    id: LOOTID.string,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-string.png",
    idItem: IID.string,
    amount: 1,
    scale: 0.7,
    angle: 0
}, {
    id: LOOTID.leather,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-leather-boar.png",
    idItem: IID.leather,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.shapedmetal,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-shaped-metal.png",
    idItem: IID.shapedmetal,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.rawsteak,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-raw-steak.png",
    idItem: IID.rawsteak,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.cookedsteak,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-cooked-steak.png",
    idItem: IID.cookedsteak,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.rottensteak,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-rotten-steak.png",
    idItem: IID.rottensteak,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.orange,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-orange.png",
    idItem: IID.orange,
    amount: 1,
    scale: 1,
    angle: 0
}, {
    id: LOOTID.rottenorange,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-rotten-orange.png",
    idItem: IID.rottenorange,
    amount: 1,
    scale: 1,
    angle: 0
}, {
    id: LOOTID.seedorange,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-seed-orange.png",
    idItem: IID.seedorange,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.hachet,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-hachet.png",
    idItem: IID.hachet,
    amount: 1,
    scale: 0.9,
    angle: 0.5
}, {
    id: LOOTID.stonepickaxe,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-stone-pickaxe.png",
    idItem: IID.stonepickaxe,
    amount: 1,
    scale: 0.7,
    angle: 0.3
}, {
    id: LOOTID.steelpickaxe,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-steel-pickaxe.png",
    idItem: IID.steelpickaxe,
    amount: 1,
    scale: 0.7,
    angle: 0.3
}, {
    id: LOOTID.stoneaxe,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-stone-axe.png",
    idItem: IID.stoneaxe,
    amount: 1,
    scale: 0.7,
    angle: 0.5
}, {
    id: LOOTID.workbench,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-workbench.png",
    idItem: IID.workbench,
    amount: 1,
    scale: 0.7,
    angle: 0
}, {
    id: LOOTID.spear,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wood-spear.png",
    idItem: IID.spear,
    amount: 1,
    scale: 0.6,
    angle: 0.6
}, {
    id: LOOTID.bow,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wood-bow.png",
    idItem: IID.bow,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.pistol,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-9mm.png",
    idItem: IID.pistol,
    amount: 1,
    scale: 1,
    angle: -0.1
}, {
    id: LOOTID.deserteagle,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-desert-eagle.png",
    idItem: IID.deserteagle,
    amount: 1,
    scale: 1,
    angle: -0.1
}, {
    id: LOOTID.shotgun,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-shotgun.png",
    idItem: IID.shotgun,
    amount: 1,
    scale: 0.7,
    angle: -0.5
}, {
    id: LOOTID.ak47,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-ak47.png",
    idItem: IID.ak47,
    amount: 1,
    scale: 0.7,
    angle: -0.5
}, {
    id: LOOTID.sniper,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-sniper.png",
    idItem: IID.sniper,
    amount: 1,
    scale: 0.7,
    angle: -0.5
}, {
    id: LOOTID.woodenwall,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wood-wall.png",
    idItem: IID.woodenwall,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.stonewall,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-stone-wall.png",
    idItem: IID.stonewall,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.steelwall,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-steel-wall.png",
    idItem: IID.steelwall,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.wooddoor,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wood-door.png",
    idItem: IID.wooddoor,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.stonedoor,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-stone-door.png",
    idItem: IID.stonedoor,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.steeldoor,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-steel-door.png",
    idItem: IID.steeldoor,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.campfire,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-campfire.png",
    idItem: IID.campfire,
    amount: 1,
    scale: 0.7,
    angle: 0
}, {
    id: LOOTID.bullet9mm,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-bullet-9mm.png",
    idItem: IID.bullet9mm,
    amount: 1,
    scale: 1,
    angle: 0
}, {
    id: LOOTID.bulletshotgun,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-bullet-shotgun.png",
    idItem: IID.bulletshotgun,
    amount: 1,
    scale: 1,
    angle: 0
}, {
    id: LOOTID.sniperbullet,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-bullet-sniper.png",
    idItem: IID.sniperbullet,
    amount: 1,
    scale: 1.1,
    angle: 0
}, {
    id: LOOTID.medkit,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-medikit.png",
    idItem: IID.medkit,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.bandage,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-bandage.png",
    idItem: IID.bandage,
    amount: 1,
    scale: 1,
    angle: 0
}, {
    id: LOOTID.soda,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-soda.png",
    idItem: IID.soda,
    amount: 1,
    scale: 1.2,
    angle: 0
}, {
    id: LOOTID.mp5,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-MP5.png",
    idItem: IID.mp5,
    amount: 1,
    scale: 0.8,
    angle: -0.5
}, {
    id: LOOTID.headscarf,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-headscarf.png",
    idItem: IID.headscarf,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.chapka,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-chapka.png",
    idItem: IID.chapka,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.coat,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-coat.png",
    idItem: IID.coat,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.gazmask,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-gaz-mask.png",
    idItem: IID.gazmask,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.gazprotection,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-gaz-protection.png",
    idItem: IID.gazprotection,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.radiationsuit,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-radiation-suit.png",
    idItem: IID.radiationsuit,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.woodarrow,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wood-arrow.png",
    idItem: IID.woodarrow,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.campfirebbq,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-campfire-bbq.png",
    idItem: IID.campfirebbq,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.smelter,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-smelter.png",
    idItem: IID.smelter,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.wooddoor1,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wood-door1.png",
    idItem: IID.wooddoor1,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.stonedoor1,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-stone-door1.png",
    idItem: IID.stonedoor1,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.steeldoor1,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-steel-door1.png",
    idItem: IID.steeldoor1,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.sulfur,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-sulfur.png",
    idItem: IID.sulfur,
    amount: 1,
    scale: 1,
    angle: 0
}, {
    id: LOOTID.shapeduranium,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-shaped-uranium.png",
    idItem: IID.shapeduranium,
    amount: 1,
    scale: 1,
    angle: 0
}, {
    id: LOOTID.researchbench,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-workbench2.png",
    idItem: IID.researchbench,
    amount: 1,
    scale: 1,
    angle: 0
}, {
    id: LOOTID.uranium,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-uranium.png",
    idItem: IID.uranium,
    amount: 1,
    scale: 1,
    angle: 0
}, {
    id: LOOTID.weavingmachine,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-weaving-machine.png",
    idItem: IID.weavingmachine,
    amount: 1,
    scale: 1,
    angle: 0
}, {
    id: LOOTID.gasoline,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-gasoline.png",
    idItem: IID.gasoline,
    amount: 1,
    scale: 1,
    angle: 0
}, {
    id: LOOTID.sulfurpickaxe,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-sulfur-pickaxe.png",
    idItem: IID.sulfurpickaxe,
    amount: 1,
    scale: 0.7,
    angle: 0.3
}, {
    id: LOOTID.chest,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-chest.png",
    idItem: IID.chest,
    amount: 1,
    scale: 0.7,
    angle: 0.3
}, {
    id: LOOTID.fridge,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-fridge.png",
    idItem: IID.fridge,
    amount: 1,
    scale: 0.7,
    angle: 0.3
}, {
    id: LOOTID.woodfloor1,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wood-floor.png",
    idItem: IID.woodfloor1,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.hammer,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-hammer.png",
    idItem: IID.hammer,
    amount: 1,
    scale: 0.7,
    angle: 0.3
}, {
    id: LOOTID.sleepingbag,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-sleeping-bag.png",
    idItem: IID.sleepingbag,
    amount: 1,
    scale: 0.7,
    angle: 0.3
}, {
    id: LOOTID.repairhammer,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-repair-hammer.png",
    idItem: IID.repairhammer,
    amount: 1,
    scale: 0.7,
    angle: 0.3
}, {
    id: LOOTID.nails,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-nails.png",
    idItem: IID.nails,
    amount: 1,
    scale: 0.7,
    angle: 0.3
}, {
    id: LOOTID.woodfloor2,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wood-floor-light.png",
    idItem: IID.woodfloor2,
    amount: 1,
    scale: 0.7,
    angle: 0.3
}, {
    id: LOOTID.smallwoodwall,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wood-smallwall.png",
    idItem: IID.smallwoodwall,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.smallstonewall,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-stone-smallwall.png",
    idItem: IID.smallstonewall,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.smallsteelwall,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-steel-smallwall.png",
    idItem: IID.smallsteelwall,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.tomatosoup,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-tomato-soup.png",
    idItem: IID.tomatosoup,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.syringe,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-syringe.png",
    idItem: IID.syringe,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.chemicalcomponent,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-chemical-component.png",
    idItem: IID.chemicalcomponent,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.radway,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-radaway.png",
    idItem: IID.radway,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.tomatoseed,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-seed-tomato.png",
    idItem: IID.tomatoseed,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.tomato,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-tomato.png",
    idItem: IID.tomato,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.rottentomato,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-rotten-tomato.png",
    idItem: IID.rottentomato,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.can,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-can.png",
    idItem: IID.can,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.crossbow,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wood-crossbow.png",
    idItem: IID.crossbow,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.crossarrow,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wood-crossarrow.png",
    idItem: IID.crossarrow,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.nailgun,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-nail-gun.png",
    idItem: IID.nailgun,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.sawedoff,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-sawed-off-shotgun.png",
    idItem: IID.sawedoff,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.stonefloor1,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-stone-floor.png",
    idItem: IID.stonefloor1,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.stonefloor2,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-tiling-floor.png",
    idItem: IID.stonefloor2,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.chips,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-chips.png",
    idItem: IID.chips,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.rottenchips,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-rotten-chips.png",
    idItem: IID.rottenchips,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.electronicpart,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-electronic-part.png",
    idItem: IID.electronicpart,
    amount: 1,
    scale: 1,
    angle: 0
}, {
    id: LOOTID.junk,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-junk.png",
    idItem: IID.junk,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.wires,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wires.png",
    idItem: IID.wires,
    amount: 1,
    scale: 1,
    angle: 0
}, {
    id: LOOTID.energycell,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-small-energy-cells.png",
    idItem: IID.energycell,
    amount: 1,
    scale: 1,
    angle: 0
}, {
    id: LOOTID.laserpistol,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-laser-pistol.png",
    idItem: IID.laserpistol,
    amount: 1,
    scale: 1,
    angle: 0
}, {
    id: LOOTID.teslabench,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-workbench3.png",
    idItem: IID.teslabench,
    amount: 1,
    scale: 0.9,
    angle: 0
}, {
    id: LOOTID.alloys,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-alloys.png",
    idItem: IID.alloys,
    amount: 1,
    scale: 1,
    angle: 0
}, {
    id: LOOTID.sulfuraxe,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-sulfur-axe.png",
    idItem: IID.sulfuraxe,
    amount: 1,
    scale: 0.7,
    angle: 0.5
}, {
    id: LOOTID.landmine,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-landmine.png",
    idItem: IID.landmine,
    amount: 1,
    scale: 0.7,
    angle: 0.5
}, {
    id: LOOTID.dynamite,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-dynamite.png",
    idItem: IID.dynamite,
    amount: 1,
    scale: 0.7,
    angle: 0.5
}, {
    id: LOOTID.c4bomb,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-C4.png",
    idItem: IID.c4bomb,
    amount: 1,
    scale: 0.7,
    angle: 0.5
}, {
    id: LOOTID.joystic,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-joystick.png",
    idItem: IID.joystic,
    amount: 1,
    scale: 0.7,
    angle: 0.5
}, {
    id: LOOTID.composter,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-composter.png",
    idItem: IID.composter,
    amount: 1,
    scale: 0.7,
    angle: 0.5
}, {
    id: LOOTID.metalhelmet,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-metal-helmet.png",
    idItem: IID.metalhelmet,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.weldinghelmet,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-welding-helmet.png",
    idItem: IID.weldinghelmet,
    amount: 1,
    scale: 0.7,
    angle: 0
}, {
    id: LOOTID.gladiatorhelmet,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-gladiator-helmet.png",
    idItem: IID.gladiatorhelmet,
    amount: 1,
    scale: 0.7,
    angle: 0
}, {
    id: LOOTID.leatherjacket,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-leather-jacket.png",
    idItem: IID.leatherjacket,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.kevlarsuit,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-kevlar-suit.png",
    idItem: IID.kevlarsuit,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.SWATsuit,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-SWAT-suit.png",
    idItem: IID.SWATsuit,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.protectivesuit,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-protective-suit.png",
    idItem: IID.protectivesuit,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.tesla1,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-tesla-0.png",
    idItem: IID.tesla1,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.tesla2,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-tesla-armor.png",
    idItem: IID.tesla2,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.woodespike,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wood-spike.png",
    idItem: IID.woodespike,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.lasersubmachine,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-laser-submachine.png",
    idItem: IID.lasersubmachine,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.granade,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-grenade.png",
    idItem: IID.granade,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.superhammer,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-super-hammer.png",
    idItem: IID.superhammer,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.ghoulblood,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-ghoul-blood.png",
    idItem: IID.ghoulblood,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.camouflage,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-camouflage-gear.png",
    idItem: IID.camouflage,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.agitator,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-agitator.png",
    idItem: IID.agitator,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.ghouldrug,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-ghoul-drug.png",
    idItem: IID.ghouldrug,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.mushroom,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-mushroom1.png",
    idItem: IID.mushroom,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.mushroom2,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-mushroom2.png",
    idItem: IID.mushroom2,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.mushroom3,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-mushroom3.png",
    idItem: IID.mushroom3,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.rottenmushroom1,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-rotten-mushroom1.png",
    idItem: IID.rottenmushroom1,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.rottenmushroom2,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-rotten-mushroom2.png",
    idItem: IID.rottenmushroom2,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.rottenmushroom3,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-rotten-mushroom3.png",
    idItem: IID.rottenmushroom3,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.lapadoine,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-lapadoine.png",
    idItem: IID.lapadoine,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.lapabot,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-lapabot.png",
    idItem: IID.lapabot,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.smallwire,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-small-wire.png",
    idItem: IID.smallwire,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.pumpkin,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-pumpkin.png",
    idItem: IID.pumpkin,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.rottenpumpkin,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-rotten-pumpkin.png",
    idItem: IID.rottenpumpkin,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.ghoulseed,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-ghoul5.png",
    idItem: IID.ghoulseed,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.extractor,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-extractor.png",
    idItem: IID.extractor,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.antidote,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-antidote.png",
    idItem: IID.antidote,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.antidoteflower,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-antidote-flower.png",
    idItem: IID.antidoteflower,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.treeseed,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-seed-tree.png",
    idItem: IID.treeseed,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.acorn,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-acorn.png",
    idItem: IID.acorn,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.rottenacorn,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-rotten-acorn.png",
    idItem: IID.rottenacorn,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.lasersniper,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-laser-sniper.png",
    idItem: IID.lasersniper,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.halbot,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-hal-bot.png",
    idItem: IID.halbot,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.teslabot,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-tesla-bot.png",
    idItem: IID.teslabot,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.cable,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wire0.png",
    idItem: IID.cable,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.cable2,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wire1.png",
    idItem: IID.cable2,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.cable3,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wire2.png",
    idItem: IID.cable3,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.cable4,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wire3.png",
    idItem: IID.cable4,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.switch,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-switch.png",
    idItem: IID.switch,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.orgate,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-switch-or.png",
    idItem: IID.orgate,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.andgate,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-switch-and.png",
    idItem: IID.andgate,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.notgate,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-switch-reverse.png",
    idItem: IID.notgate,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.lamp,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-lamp-white.png",
    idItem: IID.lamp,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.cablewall,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-cable-wall.png",
    idItem: IID.cablewall,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.autodoor,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-automatic-door.png",
    idItem: IID.autodoor,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.platform,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-platform.png",
    idItem: IID.platform,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.stonecave,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-stone-cave.png",
    idItem: IID.stonecave,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.bunkerwall,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-bunker-wall.png",
    idItem: IID.bunkerwall,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.mustardfloor,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-mustard-floor.png",
    idItem: IID.mustardfloor,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.redfloor,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-red-floor.png",
    idItem: IID.redfloor,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.weldingmachine,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-welding-machine.png",
    idItem: IID.weldingmachine,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.cable4,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-wire4.png",
    idItem: IID.cable4,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.__GATE_TIMER__,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-timer.png",
    idItem: IID.__GATE_TIMER__,
    amount: 1,
    scale: 0.8,
    angle: 0
}, {
    id: LOOTID.xorgate,
    W: {
        isLoaded: 0
    },
    src: "img/day-ground-xor.png",
    idItem: IID.xorgate,
    amount: 1,
    scale: 0.8,
    angle: 0
}];
var COUNTER = 0;

var object = {
    WOOD:           COUNTER++,
    STONE:          COUNTER++,
    STEEL:          COUNTER++,
    URANIUM:        COUNTER++,
    SULFUR:         COUNTER++,
    LEAFTREE:       COUNTER++,
    ORANGETREE:     COUNTER++,
    TOMATOTREE:     COUNTER++,
    BOAR:           COUNTER++,
    DEER:           COUNTER++,
    MUSHROOM1:      COUNTER++,
    MUSHROOM2:      COUNTER++,
    MUSHROOM3:      COUNTER++,
    WHITE_FLOWER:   COUNTER++
};

var __TOP   = 8;
var __DOWN  = 9;
var __MID   = 10;
var __STOP  = 11;

var RESOURCES = [];
RESOURCES[object.WOOD] = {
    loot: [LOOTID.wood, LOOTID.wWvMW, LOOTID.mvnnv],
    rare: [0.2, 0.4, 1],
    tool: [-1, IID.hachet, IID.stoneaxe, IID.sulfuraxe],
    effect: [1, 2, 4, 5],
    areaEffect: 0,
    type: [{
        life: 200,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-wood1.png"
        },
        particlesDist: 100,
        particle: 5,
        units: 0,
        unitsMax: 80,
        collision: 1,
        z: __TOP,
        radius: 80
    }, {
        life: 150,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-wood0.png"
        },
        particlesDist: 75,
        particle: 5,
        units: 0,
        unitsMax: 80,
        collision: 1,
        z: __TOP,
        radius: 55
    }, {
        life: 120,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-wood2.png"
        },
        particlesDist: 70,
        particle: 5,
        units: 0,
        unitsMax: 80,
        collision: 1,
        z: __TOP,
        radius: 48
    }, {
        life: 100,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-wood3.png"
        },
        particlesDist: 60,
        particle: 5,
        units: 0,
        unitsMax: 80,
        collision: 1,
        z: __TOP,
        radius: 37
    }, {
        life: 75,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-wood4.png"
        },
        particlesDist: 50,
        particle: 5,
        units: 0,
        unitsMax: 80,
        collision: 1,
        z: __TOP,
        radius: 30
    }],
    particles: PARTICLESID.__WOOD__,
    impact: SOUNDID.wood,
    destroy: SOUNDID.wooddes,
    score: 5
};
RESOURCES[object.LEAFTREE] = {
    loot: [LOOTID.acorn, LOOTID.wood, LOOTID.wWvMW, LOOTID.mvnnv],
    rare: [0.015, 0.2, 0.4, 1],
    tool: [-1, IID.hachet, IID.stoneaxe, IID.sulfuraxe],
    effect: [1, 2, 4, 5],
    areaEffect: 0,
    type: [{
        life: 250,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-tree0.png"
        },
        imgTop: {
            W: {
                isLoaded: 0
            },
            src: "img/day-treeleaf0.png"
        },
        imgFull: {
            W: {
                isLoaded: 0
            },
            src: "img/day-tree-and-leaf0.png"
        },
        particlesDist: 145,
        particle: 5,
        units: 0,
        unitsMax: 800,
        collision: 1,
        z: __STOP,
        radius: 70
    }, {
        life: 250,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-tree1.png"
        },
        imgTop: {
            W: {
                isLoaded: 0
            },
            src: "img/day-treeleaf1.png"
        },
        imgFull: {
            W: {
                isLoaded: 0
            },
            src: "img/day-tree-and-leaf1.png"
        },
        particlesDist: 128,
        particle: 5,
        units: 0,
        unitsMax: 800,
        collision: 1,
        z: __STOP,
        radius: 52
    }, {
        life: 150,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-tree2.png"
        },
        imgTop: {
            W: {
                isLoaded: 0
            },
            src: "img/day-treeleaf2.png"
        },
        imgFull: {
            W: {
                isLoaded: 0
            },
            src: "img/day-tree-and-leaf2.png"
        },
        particlesDist: 114,
        particle: 5,
        units: 0,
        unitsMax: 800,
        collision: 1,
        z: __STOP,
        radius: 42
    }, {
        life: 75,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-tree3.png"
        },
        imgTop: {
            W: {
                isLoaded: 0
            },
            src: "img/day-treeleaf3.png"
        },
        imgFull: {
            W: {
                isLoaded: 0
            },
            src: "img/day-tree-and-leaf3.png"
        },
        particlesDist: 90,
        particle: 5,
        units: 0,
        unitsMax: 800,
        collision: 1,
        z: __STOP,
        radius: 34
    }, {
        life: 250,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-tree4.png"
        },
        imgTop: {
            W: {
                isLoaded: 0
            },
            src: "img/day-treeleaf4.png"
        },
        imgFull: {
            W: {
                isLoaded: 0
            },
            src: "img/day-tree-and-leaf4.png"
        },
        particlesDist: 147,
        particle: 5,
        units: 0,
        unitsMax: 800,
        collision: 1,
        z: __STOP,
        radius: 54
    }],
    particles: PARTICLESID.__LEAFTREE__,
    impact: SOUNDID.wood,
    destroy: SOUNDID.wooddes,
    score: 5
};
RESOURCES[object.STONE] = {
    loot: [LOOTID.stone, LOOTID.vWVMv, LOOTID.mnVVV],
    rare: [0.1, 0.3, 1],
    tool: [IID.hachet, IID.stonepickaxe, IID.steelpickaxe, IID.sulfurpickaxe],
    effect: [1, 3, 4, 5],
    areaEffect: 0,
    type: [{
        life: 1000,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-stone0.png"
        },
        particlesDist: 80,
        particle: 5,
        units: 0,
        unitsMax: 115,
        collision: 1,
        z: __MID,
        radius: 60
    }, {
        life: 800,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-stone2.png"
        },
        particlesDist: 80,
        particle: 5,
        units: 0,
        unitsMax: 115,
        collision: 1,
        z: __MID,
        radius: 58
    }, {
        life: 600,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-stone1.png"
        },
        particlesDist: 74,
        particle: 5,
        units: 0,
        unitsMax: 115,
        collision: 1,
        z: __MID,
        radius: 54
    }, {
        life: 400,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-stone3.png"
        },
        particlesDist: 65,
        particle: 5,
        units: 0,
        unitsMax: 115,
        collision: 1,
        z: __DOWN,
        radius: 45
    }, {
        life: 200,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-stone4.png"
        },
        particlesDist: 63,
        particle: 5,
        units: 0,
        unitsMax: 115,
        collision: 1,
        z: __DOWN,
        radius: 43
    }, {
        life: 150,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-stone5.png"
        },
        particlesDist: 61,
        particle: 5,
        units: 0,
        unitsMax: 115,
        collision: 1,
        z: __DOWN,
        radius: 41
    }],
    particles: PARTICLESID.__STONE__,
    impact: SOUNDID.stone2,
    destroy: SOUNDID.stonedes,
    score: 15
};
RESOURCES[object.STEEL] = {
    loot: [LOOTID.steel, LOOTID.stone, LOOTID.vWVMv, LOOTID.mnVVV],
    rare: [0.4, 0.45, 0.6, 1],
    tool: [IID.stonepickaxe, IID.steelpickaxe, IID.sulfurpickaxe],
    effect: [1, 2, 3],
    areaEffect: 0,
    type: [{
        life: 1200,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-steel0.png"
        },
        particlesDist: 81,
        particle: 5,
        units: 0,
        unitsMax: 22,
        collision: 1,
        z: __MID,
        radius: 61
    }, {
        life: 1000,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-steel1.png"
        },
        particlesDist: 81,
        particle: 5,
        units: 0,
        unitsMax: 22,
        collision: 1,
        z: __MID,
        radius: 61
    }, {
        life: 300,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-steel2.png"
        },
        particlesDist: 62,
        particle: 5,
        units: 0,
        unitsMax: 22,
        collision: 1,
        z: __DOWN,
        radius: 42
    }, {
        life: 500,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-steel3.png"
        },
        particlesDist: 70,
        particle: 5,
        units: 0,
        unitsMax: 22,
        collision: 1,
        z: __MID,
        radius: 50
    }],
    particles: PARTICLESID.__STEEL__,
    impact: SOUNDID.stone2,
    destroy: SOUNDID.stonedes,
    score: 40
};
RESOURCES[object.SULFUR] = {
    loot: [LOOTID.sulfur, LOOTID.stone, LOOTID.vWVMv, LOOTID.mnVVV],
    rare: [0.4, 0.45, 0.6, 1],
    tool: [IID.steelpickaxe, IID.sulfurpickaxe],
    effect: [1, 2],
    areaEffect: 0,
    type: [{
        life: 1000,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-sulfur0.png"
        },
        particlesDist: 62,
        particle: 5,
        units: 0,
        unitsMax: 22,
        collision: 1,
        z: __MID,
        radius: 42
    }, {
        life: 400,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-sulfur1.png"
        },
        particlesDist: 70,
        particle: 5,
        units: 0,
        unitsMax: 22,
        collision: 1,
        z: __DOWN,
        radius: 50
    }, {
        life: 400,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-sulfur2.png"
        },
        particlesDist: 58,
        particle: 5,
        units: 0,
        unitsMax: 22,
        collision: 1,
        z: __DOWN,
        radius: 38
    }],
    particles: PARTICLESID.__SULFUR__,
    impact: SOUNDID.stone2,
    destroy: SOUNDID.stonedes,
    score: 70
};
RESOURCES[object.URANIUM] = {
    loot: [LOOTID.uranium, LOOTID.stone, LOOTID.vWVMv, LOOTID.mnVVV],
    rare: [0.3, 0.45, 0.6, 1],
    tool: [IID.sulfurpickaxe],
    effect: [1],
    areaEffect: __RADIATION__,
    type: [{
        life: 6000,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-uranium0.png"
        },
        particlesDist: 104,
        particle: 5,
        units: 0,
        unitsMax: 5,
        collision: 1,
        z: __MID,
        radius: 75
    }, {
        life: 4000,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-uranium1.png"
        },
        particlesDist: 75,
        particle: 5,
        units: 0,
        unitsMax: 5,
        collision: 1,
        z: __MID,
        radius: 55
    }, {
        life: 2000,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-uranium2.png"
        },
        particlesDist: 62,
        particle: 5,
        units: 0,
        unitsMax: 5,
        collision: 1,
        z: __DOWN,
        radius: 42
    }],
    particles: PARTICLESID.__URANIUM__,
    impact: SOUNDID.stone2,
    destroy: SOUNDID.stonedes,
    score: 140
};
RESOURCES[object.ORANGETREE] = {
    loot: [LOOTID.seedorange, LOOTID.orange],
    rare: [0.05, 1],
    tool: [-1],
    effect: [1],
    areaEffect: 0,
    type: [{
        life: 80,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-orange-tree-leaf0.png"
        },
        imgTop: {
            W: {
                isLoaded: 0
            },
            src: "img/day-orange0.png"
        },
        imgFull: {
            W: {
                isLoaded: 0
            },
            src: "img/day-orange-tree0.png"
        },
        particlesDist: 68,
        particle: 5,
        units: 0,
        unitsMax: 20,
        collision: 1,
        z: __DOWN,
        radius: 38
    }, {
        life: 100,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-orange-tree-leaf1.png"
        },
        imgTop: {
            W: {
                isLoaded: 0
            },
            src: "img/day-orange1.png"
        },
        imgFull: {
            W: {
                isLoaded: 0
            },
            src: "img/day-orange-tree1.png"
        },
        particlesDist: 70,
        particle: 5,
        units: 0,
        unitsMax: 20,
        collision: 1,
        z: __DOWN,
        radius: 37
    }, {
        life: 120,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-orange-tree-leaf2.png"
        },
        imgTop: {
            W: {
                isLoaded: 0
            },
            src: "img/day-orange2.png"
        },
        imgFull: {
            W: {
                isLoaded: 0
            },
            src: "img/day-orange-tree2.png"
        },
        particlesDist: 78,
        particle: 5,
        units: 0,
        unitsMax: 20,
        collision: 1,
        z: __DOWN,
        radius: 45
    }],
    particles: PARTICLESID.__ORANGE__,
    impact: SOUNDID.__NO_SOUND__,
    destroy: SOUNDID.__NO_SOUND__,
    score: 50
};
RESOURCES[object.TOMATOTREE] = {
    loot: [LOOTID.tomatoseed, LOOTID.tomato],
    rare: [0.05, 1],
    tool: [-1],
    effect: [1],
    areaEffect: 0,
    type: [{
        life: 80,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-tomato-tree-leaf0.png"
        },
        imgTop: {
            W: {
                isLoaded: 0
            },
            src: "img/day-tomato0.png"
        },
        imgFull: {
            W: {
                isLoaded: 0
            },
            src: "img/day-tomato-tree0.png"
        },
        particlesDist: 68,
        particle: 5,
        units: 0,
        unitsMax: 16,
        collision: 1,
        z: __DOWN,
        radius: 38
    }, {
        life: 100,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-tomato-tree-leaf1.png"
        },
        imgTop: {
            W: {
                isLoaded: 0
            },
            src: "img/day-tomato1.png"
        },
        imgFull: {
            W: {
                isLoaded: 0
            },
            src: "img/day-tomato-tree1.png"
        },
        particlesDist: 70,
        particle: 5,
        units: 0,
        unitsMax: 16,
        collision: 1,
        z: __DOWN,
        radius: 37
    }, {
        life: 120,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-tomato-tree-leaf2.png"
        },
        imgTop: {
            W: {
                isLoaded: 0
            },
            src: "img/day-tomato2.png"
        },
        imgFull: {
            W: {
                isLoaded: 0
            },
            src: "img/day-tomato-tree2.png"
        },
        particlesDist: 78,
        particle: 5,
        units: 0,
        unitsMax: 16,
        collision: 1,
        z: __DOWN,
        radius: 45
    }],
    particles: PARTICLESID.__TOMATO__,
    impact: SOUNDID.__NO_SOUND__,
    destroy: SOUNDID.__NO_SOUND__,
    score: 50
};
RESOURCES[object.BOAR] = {
    loot: [LOOTID.rawsteak, LOOTID.animalfat, LOOTID.leather],
    rare: [0.25, 0.85, 1],
    tool: [IID.hachet, IID.stoneaxe, IID.sulfuraxe],
    effect: [1, 3, 4],
    areaEffect: 0,
    type: [{
        life: 250,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-boar-dead.png"
        },
        particlesDist: 70,
        particle: 5,
        units: 0,
        unitsMax: 18,
        collision: 1,
        z: __DOWN,
        radius: 47
    }],
    particles: PARTICLESID.__BLOOD__,
    impact: SOUNDID.__NO_SOUND__,
    destroy: SOUNDID.__NO_SOUND__,
    score: 40
};
RESOURCES[object.DEER] = {
    loot: [LOOTID.rawsteak, LOOTID.animaltendon, LOOTID.leather, LOOTID.animalfat],
    rare: [0.28, 0.7, 0.85, 1],
    tool: [IID.hachet, IID.stoneaxe, IID.sulfuraxe],
    effect: [1, 3, 4],
    areaEffect: 0,
    type: [{
        life: 200,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-deer-dead.png"
        },
        particlesDist: 73,
        particle: 5,
        units: 0,
        unitsMax: 18,
        collision: 1,
        z: __DOWN,
        radius: 53
    }],
    particles: PARTICLESID.__BLOOD__,
    impact: SOUNDID.__NO_SOUND__,
    destroy: SOUNDID.__NO_SOUND__,
    score: 40
};
RESOURCES[object.MUSHROOM1] = {
    loot: [LOOTID.mushroom],
    rare: [1],
    tool: [-1],
    effect: [1],
    areaEffect: 0,
    type: [{
        life: 1,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-mushroom1.png"
        },
        particlesDist: 18,
        particle: 2,
        units: 0,
        unitsMax: 2,
        collision: 0,
        z: __DOWN,
        radius: 32
    }, {
        life: 1,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-mushroom2.png"
        },
        particlesDist: 18,
        particle: 2,
        units: 0,
        unitsMax: 2,
        collision: 0,
        z: __DOWN,
        radius: 32
    }, {
        life: 1,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-mushroom3.png"
        },
        particlesDist: 18,
        particle: 2,
        units: 0,
        unitsMax: 2,
        collision: 0,
        z: __DOWN,
        radius: 32
    }, {
        life: 1,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-mushroom4.png"
        },
        particlesDist: 18,
        particle: 2,
        units: 0,
        unitsMax: 2,
        collision: 0,
        z: __DOWN,
        radius: 32
    }],
    particles: PARTICLESID.__MUSHROOM1__,
    impact: SOUNDID.__NO_SOUND__,
    destroy: SOUNDID.__NO_SOUND__,
    score: 40
};
RESOURCES[object.WHITE_FLOWER] = {
    loot: [LOOTID.antidoteflower],
    rare: [1],
    tool: [-1],
    effect: [1],
    areaEffect: 0,
    type: [{
        life: 1,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-antidote-tree.png"
        },
        particlesDist: 18,
        particle: 2,
        units: 0,
        unitsMax: 1,
        collision: 0,
        z: __DOWN,
        radius: 32
    }],
    particles: PARTICLESID.flower,
    impact: SOUNDID.__NO_SOUND__,
    destroy: SOUNDID.__NO_SOUND__,
    score: 1000
};
RESOURCES[object.MUSHROOM2] = {
    loot: [LOOTID.mushroom2],
    rare: [1],
    tool: [-1],
    effect: [1],
    areaEffect: 0,
    type: [{
        life: 1,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-mushroom5.png"
        },
        particlesDist: 18,
        particle: 2,
        units: 0,
        unitsMax: 6,
        collision: 0,
        z: __DOWN,
        radius: 32
    }, {
        life: 1,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-mushroom6.png"
        },
        particlesDist: 18,
        particle: 2,
        units: 0,
        unitsMax: 6,
        collision: 0,
        z: __DOWN,
        radius: 32
    }, {
        life: 1,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-mushroom7.png"
        },
        particlesDist: 18,
        particle: 2,
        units: 0,
        unitsMax: 6,
        collision: 0,
        z: __DOWN,
        radius: 32
    }, {
        life: 1,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-mushroom8.png"
        },
        particlesDist: 18,
        particle: 2,
        units: 0,
        unitsMax: 6,
        collision: 0,
        z: __DOWN,
        radius: 32
    }],
    particles: PARTICLESID.__MUSHROOM2__,
    impact: SOUNDID.__NO_SOUND__,
    destroy: SOUNDID.__NO_SOUND__,
    score: 40
};
RESOURCES[object.MUSHROOM3] = {
    loot: [LOOTID.mushroom3],
    rare: [1],
    tool: [-1],
    effect: [1],
    areaEffect: 0,
    type: [{
        life: 1,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-mushroom9.png"
        },
        particlesDist: 18,
        particle: 2,
        units: 0,
        unitsMax: 6,
        collision: 0,
        z: __DOWN,
        radius: 32
    }, {
        life: 1,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-mushroom10.png"
        },
        particlesDist: 18,
        particle: 2,
        units: 0,
        unitsMax: 6,
        collision: 0,
        z: __DOWN,
        radius: 32
    }, {
        life: 1,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-mushroom11.png"
        },
        particlesDist: 18,
        particle: 2,
        units: 0,
        unitsMax: 6,
        collision: 0,
        z: __DOWN,
        radius: 32
    }, {
        life: 1,
        W: {
            W: {
                isLoaded: 0
            },
            src: "img/day-mushroom12.png"
        },
        particlesDist: 18,
        particle: 2,
        units: 0,
        unitsMax: 6,
        collision: 0,
        z: __DOWN,
        radius: 32
    }],
    particles: PARTICLESID.__MUSHROOM3__,
    impact: SOUNDID.__NO_SOUND__,
    destroy: SOUNDID.__NO_SOUND__,
    score: 40
};

var LIGHTFIREX = [-26, 25, -7, 0];
var LIGHTFIREY = [-28, -15, 25, 0];
var LIGHTFIRE = [{
    src: "img/day-campfire-light-1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-campfire-light-2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-campfire-light-3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/day-campfire-light-down.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/ghoul-hurt.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/heal-player.png",
    W: {
        isLoaded: 0
    }
}];
var KARMA = [{
    src: "img/karma4.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/karma3.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/karma2.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/karma1.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/karma0.png",
    W: {
        isLoaded: 0
    }
}, {
    src: "img/karma5.png",
    W: {
        isLoaded: 0
    }
}];

var COUNTER = 0;
var HOUSEID = {
    __HOUSE0__:     COUNTER++,
    __HOUSE1__:     COUNTER++,
    __HOUSE2__:     COUNTER++,
    __HOUSE3__:     COUNTER++,
    __HOUSE4__:     COUNTER++,
    __HOUSE5__:     COUNTER++,
    __HOUSE6__:     COUNTER++,
    __HOUSE7__:     COUNTER++,
    __HOUSE8__:     COUNTER++,
    __HOUSE9__:     COUNTER++,
    __CITY0__:      COUNTER++,
    __BUNKER0__:    COUNTER++
};
var HOUSE = [];
var P = {};
try {
    if (exports !== window.undefined) {
        _EMP = {
            v: 0,
            b: 0,
            V: -1,
            r: 0
        };
        _WF = {
            v: IID.woodfloor1,
            b: 0,
            V: -1,
            r: 0
        };
        _LF = {
            v: IID.woodfloor2,
            b: 0,
            V: -1,
            r: 0
        };
        _SF = {
            v: IID.stonefloor1,
            b: 0,
            V: -1,
            r: 0
        };
        _TF = {
            v: IID.stonefloor2,
            b: 0,
            V: -1,
            r: 0
        };
        _GF = {
            v: IID.mustardfloor,
            b: 0,
            V: -1,
            r: 0
        };
        _RF = {
            v: IID.redfloor,
            b: 0,
            V: -1,
            r: 0
        };
        _WW = {
            v: 0,
            b: IID.woodenwall,
            V: -1,
            r: 0
        };
        _WWWF = {
            v: IID.woodfloor1,
            b: IID.woodenwall,
            V: -1,
            r: 0
        };
        _WWLF = {
            v: IID.woodfloor2,
            b: IID.woodenwall,
            V: -1,
            r: 0
        };
        _WWSF = {
            v: IID.stonefloor1,
            b: IID.woodenwall,
            V: -1,
            r: 0
        };
        _WWTF = {
            v: IID.stonefloor2,
            b: IID.woodenwall,
            V: -1,
            r: 0
        };
        _WWGF = {
            v: IID.mustardfloor,
            b: IID.woodenwall,
            V: -1,
            r: 0
        };
        _WWRF = {
            v: IID.redfloor,
            b: IID.woodenwall,
            V: -1,
            r: 0
        };
        _SW = {
            v: 0,
            b: IID.stonewall,
            V: -1,
            r: 0
        };
        _SWWF = {
            v: IID.woodfloor1,
            b: IID.stonewall,
            V: -1,
            r: 0
        };
        _SWLF = {
            v: IID.woodfloor2,
            b: IID.stonewall,
            V: -1,
            r: 0
        };
        _SWSF = {
            v: IID.stonefloor1,
            b: IID.stonewall,
            V: -1,
            r: 0
        };
        _SWTF = {
            v: IID.stonefloor2,
            b: IID.stonewall,
            V: -1,
            r: 0
        };
        _SWGF = {
            v: IID.mustardfloor,
            b: IID.stonewall,
            V: -1,
            r: 0
        };
        _SWRF = {
            v: IID.redfloor,
            b: IID.stonewall,
            V: -1,
            r: 0
        };
        _MW = {
            v: 0,
            b: IID.steelwall,
            V: -1,
            r: 0
        };
        _MWWF = {
            v: IID.woodfloor1,
            b: IID.steelwall,
            V: -1,
            r: 0
        };
        _MWLF = {
            v: IID.woodfloor2,
            b: IID.steelwall,
            V: -1,
            r: 0
        };
        _MWSF = {
            v: IID.stonefloor1,
            b: IID.steelwall,
            V: -1,
            r: 0
        };
        _MWTF = {
            v: IID.stonefloor2,
            b: IID.steelwall,
            V: -1,
            r: 0
        };
        _MWGF = {
            v: IID.mustardfloor,
            b: IID.steelwall,
            V: -1,
            r: 0
        };
        _MWRF = {
            v: IID.redfloor,
            b: IID.steelwall,
            V: -1,
            r: 0
        };
        _SC = {
            v: 0,
            b: IID.stonecave,
            V: -1,
            r: 0
        };
        _SCSF = {
            v: IID.stonefloor1,
            b: IID.stonecave,
            V: -1,
            r: 0
        };
        _SCTF = {
            v: IID.stonefloor2,
            b: IID.stonecave,
            V: -1,
            r: 0
        };
        _BW = {
            v: 0,
            b: IID.bunkerwall,
            V: -1,
            r: 0
        };
        _BWSF = {
            v: IID.stonefloor1,
            b: IID.bunkerwall,
            V: -1,
            r: 0
        };
        _BWTF = {
            v: IID.stonefloor2,
            b: IID.bunkerwall,
            V: -1,
            r: 0
        };
        HOUSE[HOUSEID.__HOUSE0__] = {
            width: 0,
            height: 0,
            radiation: 0,
            building: [
                [_EMP],
                [_EMP, _WWWF, _WWWF, _WWWF, {
                    v: 62,
                    b: 30,
                    V: -1,
                    r: 2
                }, {
                    v: 62,
                    b: 30,
                    V: -1,
                    r: 2
                }, _WWWF, _WWWF],
                [_EMP, _WWWF, {
                    v: 62,
                    b: 71,
                    V: 0,
                    r: 3
                }, _WF, _WF, _WF, {
                    v: 62,
                    b: 71,
                    V: 13,
                    r: 1
                }, _WWWF],
                [_EMP, _WWWF, {
                    v: 62,
                    b: 71,
                    V: 22,
                    r: 3
                }, _WF, _WF, _WF, _WF, {
                    v: 62,
                    b: 30,
                    V: -1,
                    r: 3
                }],
                [_EMP, _WWWF, {
                    v: 62,
                    b: 71,
                    V: 9,
                    r: 3
                }, {
                    v: 62,
                    b: 71,
                    V: 10,
                    r: 1
                }, _WF, _WF, _WF, {
                    v: 62,
                    b: 30,
                    V: -1,
                    r: 3
                }],
                [_EMP, _WWWF, {
                    v: 62,
                    b: 71,
                    V: 17,
                    r: 0
                }, _WF, _WF, _WF, {
                    v: 62,
                    b: 71,
                    V: 19,
                    r: 2
                }, _WWWF],
                [_EMP, _WWWF, _WWWF, _WWWF, _WWWF, _WWWF, _WWWF, _WWWF]
            ]
        };
        HOUSE[HOUSEID.__HOUSE1__] = {
            width: 0,
            height: 0,
            radiation: 0,
            building: [
                [_EMP],
                [_EMP, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, _SWLF, _SWLF, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 2
                }, _SWLF, _SWLF, _SWLF],
                [_EMP, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 1
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 23,
                    r: 0
                }, _SWLF, {
                    v: 67,
                    b: 71,
                    V: 28,
                    r: 3
                }, _LF, _LF, {
                    v: 67,
                    b: 71,
                    V: 21,
                    r: 1
                }, _SWLF],
                [_EMP, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 1
                }, _WF, _WF, _SWLF, {
                    v: 67,
                    b: 71,
                    V: 12,
                    r: 0
                }, _LF, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 1
                }],
                [_EMP, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 1
                }, _WF, _WF, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 3
                }, _LF, _LF, _LF, {
                    v: 67,
                    b: 71,
                    V: 15,
                    r: 1
                }, _SWLF],
                [_EMP, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, _SWWF, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 0
                }, _SWLF, _LF, {
                    v: 67,
                    b: 71,
                    V: 23,
                    r: 1
                }, _LF, {
                    v: 67,
                    b: 71,
                    V: 5,
                    r: 1
                }, _SWLF],
                [_EMP, {
                    v: 0,
                    b: 71,
                    V: 24,
                    r: 0
                }, _SWWF, _WF, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 2
                }, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 2
                }, _SWWF],
                [_EMP, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 0
                }, _SWWF, {
                    v: 62,
                    b: 71,
                    V: 23,
                    r: 2
                }, _WF, _WF, _WF, _WF, {
                    v: 62,
                    b: 71,
                    V: 14,
                    r: 1
                }, _SWWF],
                [_EMP, _EMP, _SWWF, {
                    v: 67,
                    b: 71,
                    V: 27,
                    r: 0
                }, _LF, _LF, {
                    v: 62,
                    b: 71,
                    V: 8,
                    r: 3
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 1,
                    r: 1
                }, _SWWF],
                [_EMP, _EMP, _SWWF, {
                    v: 67,
                    b: 71,
                    V: 27,
                    r: 0
                }, _LF, {
                    v: 67,
                    b: 71,
                    V: 7,
                    r: 0
                }, {
                    v: 62,
                    b: 71,
                    V: 23,
                    r: 0
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 2,
                    r: 1
                }, _SWWF],
                [_EMP, _EMP, _SWWF, {
                    v: 67,
                    b: 71,
                    V: 20,
                    r: 0
                }, _LF, _LF, _WF, _WF, _WF, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 1
                }],
                [_EMP, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 1
                }, _SWWF, _SWWF, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 0
                }, _SWWF, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 0
                }, _SWWF, _SWWF],
                [_EMP, _EMP, _EMP, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 2
                }, _EMP, {
                    v: 0,
                    b: 71,
                    V: 24,
                    r: 0
                }, _EMP, _EMP, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 0
                }, {
                    v: 0,
                    b: 71,
                    V: 17,
                    r: 0
                }]
            ]
        };
        HOUSE[HOUSEID.__HOUSE2__] = {
            width: 0,
            height: 0,
            radiation: 0,
            building: [
                [_EMP],
                [_EMP, _EMP, _EMP, _SWWF, _SWWF, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, _SWWF, _SWWF, _SWLF, _SWLF, _SWLF, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 2
                }, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 1
                }],
                [_EMP, _EMP, _EMP, _SWWF, {
                    v: 67,
                    b: 71,
                    V: 27,
                    r: 0
                }, _LF, _LF, {
                    v: 67,
                    b: 71,
                    V: 23,
                    r: 3
                }, _SWWF, {
                    v: 67,
                    b: 71,
                    V: 5,
                    r: 0
                }, {
                    v: 67,
                    b: 71,
                    V: 13,
                    r: 1
                }, _SWLF, _WF, _WF, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 1
                }],
                [_EMP, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, _SWWF, {
                    v: 67,
                    b: 71,
                    V: 20,
                    r: 0
                }, _LF, {
                    v: 67,
                    b: 71,
                    V: 7,
                    r: 3
                }, {
                    v: 67,
                    b: 71,
                    V: 16,
                    r: 2
                }, _SWWF, _LF, _LF, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 3
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 23,
                    r: 1
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 1
                }],
                [_EMP, _WF, {
                    v: 62,
                    b: 71,
                    V: 2,
                    r: 1
                }, _SWWF, {
                    v: 67,
                    b: 71,
                    V: 11,
                    r: 3
                }, _LF, _LF, _LF, _SWWF, _LF, {
                    v: 67,
                    b: 71,
                    V: 12,
                    r: 2
                }, _SWLF, _SWLF, _SWLF, _SW],
                [_EMP, _WF, _WF, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 1
                }, _WF, _WF, _WF, _WF, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 3
                }, _LF, _LF, _SWLF, {
                    v: 67,
                    b: 71,
                    V: 25,
                    r: 2
                }, {
                    v: 67,
                    b: 71,
                    V: 3,
                    r: 1
                }, _SWLF],
                [_EMP, _WF, _WF, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 1
                }, _WF, _WF, _WF, _WF, _SWWF, _LF, _LF, {
                    v: 67,
                    b: 51,
                    V: -1,
                    r: 1
                }, _LF, {
                    v: 67,
                    b: 71,
                    V: 18,
                    r: 2
                }, _SWLF],
                [_EMP, _WF, _WF, _SW, {
                    v: 62,
                    b: 71,
                    V: 3,
                    r: 3
                }, _WF, _WF, {
                    v: 62,
                    b: 71,
                    V: 16,
                    r: 2
                }, _SWWF, _SWLF, _SWLF, _SWLF, _SWLF, _SWLF, _SWLF],
                [_EMP, _WF, {
                    v: 62,
                    b: 71,
                    V: 26,
                    r: 0
                }, _SWWF, {
                    v: 0,
                    b: 71,
                    V: 4,
                    r: 3
                }, {
                    v: 62,
                    b: 71,
                    V: 22,
                    r: 1
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 8,
                    r: 1
                }, _SWWF, {
                    v: 0,
                    b: 71,
                    V: 24,
                    r: 1
                }, _EMP, {
                    v: 0,
                    b: 71,
                    V: 17,
                    r: 0
                }],
                [_EMP, _WF, {
                    v: 62,
                    b: 71,
                    V: 23,
                    r: 0
                }, _SWWF, {
                    v: 62,
                    b: 71,
                    V: 23,
                    r: 1
                }, _WF, _WF, {
                    v: 62,
                    b: 71,
                    V: 14,
                    r: 1
                }, _SWWF, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 1
                }],
                [_EMP, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, _SWWF, _SWWF, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 0
                }, _SWWF, _SWWF, {
                    v: 0,
                    b: 71,
                    V: 24,
                    r: 1
                }]
            ]
        };
        HOUSE[HOUSEID.__HOUSE3__] = {
            width: 0,
            height: 0,
            radiation: 0,
            building: [
                [_EMP],
                [_EMP, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 3
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 31,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 31,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, _SWLF, _SWLF, _SWLF, _SWLF],
                [_EMP, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 3
                }, {
                    v: 0,
                    b: 71,
                    V: 23,
                    r: 2
                }, _EMP, _EMP, _EMP, _EMP, _EMP, _SWLF, {
                    v: 67,
                    b: 71,
                    V: 21,
                    r: 0
                }, {
                    v: 67,
                    b: 71,
                    V: 28,
                    r: 0
                }, _SWLF],
                [_EMP, _SWWF, _SWWF, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 2
                }, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 2
                }, _SWWF, _SWWF, _EMP, _SWLF, _LF, _LF, _SWLF],
                [_EMP, _SWWF, {
                    v: 62,
                    b: 71,
                    V: 12,
                    r: 0
                }, _WF, _WF, _WF, _SWWF, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 2
                }, _SWLF, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 0
                }, _SWLF, _SWLF],
                [_EMP, _SWWF, _WF, {
                    v: 62,
                    b: 71,
                    V: 2,
                    r: 0
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 14,
                    r: 1
                }, _SWWF, _WF, _WF, _WF, _WF, _SWWF],
                [_EMP, _SWWF, {
                    v: 62,
                    b: 71,
                    V: 0,
                    r: 3
                }, {
                    v: 62,
                    b: 71,
                    V: 7,
                    r: 0
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 8,
                    r: 1
                }, _SWWF, _WF, {
                    v: 62,
                    b: 71,
                    V: 14,
                    r: 2
                }, {
                    v: 62,
                    b: 71,
                    V: 5,
                    r: 2
                }, _WF, _SWWF],
                [_EMP, _SWWF, _WF, {
                    v: 62,
                    b: 71,
                    V: 1,
                    r: 2
                }, _WF, _WF, _SWWF, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 2
                }, _SWWF, _SWWF, _SWWF, _SWWF, _SWLF],
                [_EMP, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 1
                }, _WF, _WF, _WF, _WF, _WF, _WF, _WF, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 3
                }, _LF, _LF, _SWLF],
                [_EMP, _SWWF, _WF, _WF, _WF, _WF, _WF, _WF, _WF, _SWLF, {
                    v: 67,
                    b: 71,
                    V: 25,
                    r: 3
                }, {
                    v: 67,
                    b: 71,
                    V: 18,
                    r: 3
                }, _SWLF],
                [_EMP, _SWWF, _SWWF, _SWWF, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 2
                }, _SWWF, _SWWF, _SWWF, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 2
                }, _SWLF, _SWLF, _SWLF, _SWLF],
                [_EMP, _SWWF, {
                    v: 62,
                    b: 71,
                    V: 20,
                    r: 1
                }, {
                    v: 62,
                    b: 71,
                    V: 11,
                    r: 0
                }, _WF, _WF, _SWWF, {
                    v: 67,
                    b: 71,
                    V: 24,
                    r: 0
                }, _LF, _LF, _LF, _LF, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 3
                }],
                [_EMP, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 1
                }, _WF, _WF, _WF, _WF, _SWWF, {
                    v: 67,
                    b: 71,
                    V: 23,
                    r: 0
                }, _LF, _LF, _LF, _LF, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 3
                }],
                [_EMP, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 1
                }, _WF, _WF, _WF, _WF, _SWWF, _SWWF, _SWWF, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }],
                [_EMP, _SWWF, {
                    v: 62,
                    b: 71,
                    V: 14,
                    r: 2
                }, {
                    v: 62,
                    b: 71,
                    V: 13,
                    r: 3
                }, {
                    v: 62,
                    b: 71,
                    V: 12,
                    r: 3
                }, _WF, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 1
                }, {
                    v: 67,
                    b: 71,
                    V: 12,
                    r: 2
                }, _SWWF],
                [_EMP, _SWWF, _SWWF, _SWWF, _SWWF, _SWWF, _SWLF, _SWWF, _SWWF]
            ]
        };
        HOUSE[HOUSEID.__HOUSE4__] = {
            width: 0,
            height: 0,
            radiation: 0,
            building: [
                [_EMP],
                [_EMP, _SWLF, _SWLF, _SWLF, _SWLF, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 2
                }, _SWLF, _SWLF, _SWLF, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, _SW],
                [_EMP, _SWLF, {
                    v: 67,
                    b: 71,
                    V: 12,
                    r: 0
                }, _LF, {
                    v: 67,
                    b: 71,
                    V: 5,
                    r: 0
                }, _LF, {
                    v: 67,
                    b: 71,
                    V: 11,
                    r: 1
                }, _SWLF, {
                    v: 67,
                    b: 71,
                    V: 13,
                    r: 0
                }, _LF, _LF, _SWLF],
                [_EMP, _SWLF, {
                    v: 67,
                    b: 71,
                    V: 13,
                    r: 0
                }, _LF, _LF, _LF, {
                    v: 67,
                    b: 71,
                    V: 19,
                    r: 2
                }, _SWLF, _LF, _LF, {
                    v: 67,
                    b: 71,
                    V: 21,
                    r: 1
                }, _SWLF],
                [_EMP, _SWLF, {
                    v: 67,
                    b: 71,
                    V: 9,
                    r: 3
                }, _LF, {
                    v: 67,
                    b: 71,
                    V: 7,
                    r: 1
                }, _LF, {
                    v: 67,
                    b: 71,
                    V: 26,
                    r: 3
                }, _SWLF, _LF, _LF, {
                    v: 67,
                    b: 71,
                    V: 28,
                    r: 1
                }, _SWLF],
                [_EMP, _SWLF, {
                    v: 67,
                    b: 71,
                    V: 13,
                    r: 0
                }, _LF, _LF, _LF, _LF, _SWLF, _LF, _SWLF, _SWLF, _SWLF],
                [_EMP, _SWLF, {
                    v: 67,
                    b: 71,
                    V: 9,
                    r: 3
                }, {
                    v: 67,
                    b: 71,
                    V: 10,
                    r: 1
                }, {
                    v: 67,
                    b: 71,
                    V: 12,
                    r: 3
                }, _LF, _LF, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 1
                }, _LF, _LF, {
                    v: 67,
                    b: 71,
                    V: 27,
                    r: 2
                }, _SWLF],
                [_EMP, _SWLF, _SWLF, _SWLF, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, _SWLF, _SWLF, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 0
                }, _SWLF, _SWLF, _SWLF],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 71,
                    V: 17,
                    r: 3
                }, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 3
                }]
            ]
        };
        HOUSE[HOUSEID.__HOUSE5__] = {
            width: 0,
            height: 0,
            radiation: 0,
            building: [
                [_EMP],
                [_EMP, _SWWF, _SWWF, _SWWF, _SWWF, _SWWF, _SWWF, _SWWF, _SWWF, _SWWF, _SWWF, _SWWF, _SWWF, _SWWF, _SWWF, _SWWF, _SWWF],
                [_EMP, _SWWF, {
                    v: 62,
                    b: 71,
                    V: 23,
                    r: 0
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 9,
                    r: 0
                }, {
                    v: 62,
                    b: 71,
                    V: 9,
                    r: 0
                }, {
                    v: 62,
                    b: 71,
                    V: 9,
                    r: 0
                }, {
                    v: 62,
                    b: 71,
                    V: 9,
                    r: 0
                }, _WF, _SWWF, {
                    v: 62,
                    b: 71,
                    V: 23,
                    r: 0
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 1,
                    r: 0
                }, {
                    v: 62,
                    b: 71,
                    V: 2,
                    r: 0
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 23,
                    r: 1
                }, _SWWF, {
                    v: 0,
                    b: 71,
                    V: 17,
                    r: 1
                }],
                [_EMP, _SWWF, _LF, _LF, {
                    v: 62,
                    b: 71,
                    V: 10,
                    r: 2
                }, {
                    v: 62,
                    b: 71,
                    V: 10,
                    r: 2
                }, {
                    v: 62,
                    b: 71,
                    V: 10,
                    r: 2
                }, {
                    v: 62,
                    b: 71,
                    V: 10,
                    r: 2
                }, _WF, _SWWF, {
                    v: 62,
                    b: 71,
                    V: 39,
                    r: 0
                }, _WF, _WF, _WF, _WF, _WF, _SWWF],
                [_EMP, _SWWF, {
                    v: 67,
                    b: 71,
                    V: 39,
                    r: 3
                }, _LF, _LF, _LF, _LF, _LF, _LF, {
                    v: 62,
                    b: 150,
                    V: -1,
                    r: 3
                }, _LF, _LF, _LF, _LF, _LF, _LF, {
                    v: 67,
                    b: 51,
                    V: -1,
                    r: 1
                }],
                [_EMP, _SWWF, {
                    v: 85,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 85,
                    b: 31,
                    V: -1,
                    r: 2
                }, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 1
                }, _LF, _LF, _LF, _LF, {
                    v: 62,
                    b: 150,
                    V: -1,
                    r: 3
                }, _LF, _LF, _LF, _LF, _LF, _LF, {
                    v: 67,
                    b: 51,
                    V: -1,
                    r: 3
                }],
                [_EMP, _SWWF, {
                    v: 85,
                    b: 71,
                    V: 28,
                    r: 3
                }, _TF, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 1
                }, {
                    v: 62,
                    b: 71,
                    V: 10,
                    r: 0
                }, {
                    v: 62,
                    b: 71,
                    V: 10,
                    r: 0
                }, {
                    v: 62,
                    b: 71,
                    V: 10,
                    r: 0
                }, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 3
                }, {
                    v: 62,
                    b: 149,
                    V: -1,
                    r: 0
                }, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 2
                }, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 62,
                    b: 71,
                    V: 40,
                    r: 1
                }, {
                    v: 62,
                    b: 71,
                    V: 7,
                    r: 0
                }, {
                    v: 62,
                    b: 71,
                    V: 7,
                    r: 1
                }, _SWWF],
                [_EMP, _SWWF, {
                    v: 85,
                    b: 71,
                    V: 21,
                    r: 3
                }, _TF, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 1
                }, {
                    v: 62,
                    b: 71,
                    V: 9,
                    r: 2
                }, {
                    v: 62,
                    b: 71,
                    V: 9,
                    r: 2
                }, {
                    v: 62,
                    b: 71,
                    V: 9,
                    r: 2
                }, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 3
                }, {
                    v: 62,
                    b: 142,
                    V: -1,
                    r: 3
                }, {
                    v: 62,
                    b: 140,
                    V: -1,
                    r: 3
                }, {
                    v: 62,
                    b: 140,
                    V: -1,
                    r: 1
                }, {
                    v: 62,
                    b: 140,
                    V: -1,
                    r: 1
                }, {
                    v: 62,
                    b: 144,
                    V: -1,
                    r: 0
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 8,
                    r: 1
                }, _SWWF],
                [_EMP, _SWWF, _SWWF, _SWWF, _SWWF, _SWWF, _SWWF, _SWWF, _SWWF, _SWTF, {
                    v: 0,
                    b: 71,
                    V: 41,
                    r: 2
                }, _SWTF, _SWTF, _SWTF, _SWWF, _SWWF, _SWWF],
                [_EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 3
                }, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 3
                }, _EMP, _EMP, _EMP, _SWTF, _TF, _TF, {
                    v: 85,
                    b: 71,
                    V: 18,
                    r: 2
                }, _SWTF, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 0
                }],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _SWTF, {
                    v: 85,
                    b: 71,
                    V: 25,
                    r: 1
                }, _TF, {
                    v: 85,
                    b: 71,
                    V: 19,
                    r: 2
                }, _SWTF],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _SWTF, _SWTF, _SWTF, _SWTF, _SWTF]
            ]
        };
        HOUSE[HOUSEID.__HOUSE6__] = {
            width: 0,
            height: 0,
            radiation: 0,
            building: [
                [_EMP],
                [_EMP, _WWWF, _WWWF, _WWWF, {
                    v: 67,
                    b: 50,
                    V: -1,
                    r: 2
                }, _WWWF, _WWWF, _WWWF],
                [_EMP, _WWWF, {
                    v: 62,
                    b: 71,
                    V: 9,
                    r: 0
                }, {
                    v: 62,
                    b: 71,
                    V: 8,
                    r: 0
                }, _LF, {
                    v: 62,
                    b: 71,
                    V: 13,
                    r: 1
                }, {
                    v: 62,
                    b: 71,
                    V: 6,
                    r: 0
                }, _WWWF],
                [_EMP, _WWWF, {
                    v: 62,
                    b: 71,
                    V: 10,
                    r: 2
                }, _WF, _LF, _WF, _WF, _WWWF],
                [_EMP, {
                    v: 67,
                    b: 50,
                    V: -1,
                    r: 1
                }, _LF, _LF, {
                    v: 67,
                    b: 148,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 144,
                    V: -1,
                    r: 0
                }, _LF, {
                    v: 67,
                    b: 50,
                    V: -1,
                    r: 3
                }],
                [_EMP, _WWWF, {
                    v: 62,
                    b: 71,
                    V: 28,
                    r: 3
                }, _WF, _LF, _WF, {
                    v: 62,
                    b: 71,
                    V: 19,
                    r: 2
                }, _WWWF],
                [_EMP, _WWWF, {
                    v: 62,
                    b: 71,
                    V: 21,
                    r: 3
                }, _WF, _LF, _WF, {
                    v: 62,
                    b: 71,
                    V: 26,
                    r: 2
                }, _WWWF],
                [_EMP, _WWWF, _WWWF, _WWWF, {
                    v: 67,
                    b: 50,
                    V: -1,
                    r: 0
                }, _WWWF, _WWWF, _WWWF]
            ]
        };
        HOUSE[HOUSEID.__HOUSE7__] = {
            width: 0,
            height: 0,
            radiation: 0,
            building: [
                [_EMP],
                [_EMP, _SW, _SW, _SW, _SW, _SW, _SW, _SW, _SW],
                [_EMP, _SW, {
                    v: 62,
                    b: 148,
                    V: -1,
                    r: 1
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 16,
                    r: 1
                }, {
                    v: 62,
                    b: 71,
                    V: 39,
                    r: 1
                }, _WF, {
                    v: 62,
                    b: 148,
                    V: -1,
                    r: 1
                }, _SW],
                [_EMP, _SW, {
                    v: 62,
                    b: 140,
                    V: -1,
                    r: 0
                }, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 0
                }, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 62,
                    b: 140,
                    V: -1,
                    r: 0
                }, _SW],
                [_EMP, _SW, {
                    v: 62,
                    b: 140,
                    V: -1,
                    r: 0
                }, {
                    v: 84,
                    b: 69,
                    V: -1,
                    r: 1
                }, _SF, _SF, {
                    v: 84,
                    b: 69,
                    V: -1,
                    r: 3
                }, {
                    v: 62,
                    b: 140,
                    V: -1,
                    r: 0
                }, _SW],
                [_EMP, _SW, {
                    v: 62,
                    b: 140,
                    V: -1,
                    r: 0
                }, {
                    v: 84,
                    b: 69,
                    V: -1,
                    r: 1
                }, _SF, _SF, {
                    v: 84,
                    b: 69,
                    V: -1,
                    r: 3
                }, {
                    v: 62,
                    b: 140,
                    V: -1,
                    r: 0
                }, _SW],
                [_EMP, _SW, {
                    v: 62,
                    b: 140,
                    V: -1,
                    r: 0
                }, {
                    v: 84,
                    b: 69,
                    V: -1,
                    r: 1
                }, _SF, _SF, {
                    v: 84,
                    b: 69,
                    V: -1,
                    r: 3
                }, {
                    v: 62,
                    b: 140,
                    V: -1,
                    r: 0
                }, _SW],
                [_EMP, _SW, {
                    v: 62,
                    b: 140,
                    V: -1,
                    r: 0
                }, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 2
                }, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 62,
                    b: 140,
                    V: -1,
                    r: 0
                }, _SW],
                [_EMP, _SW, {
                    v: 62,
                    b: 148,
                    V: -1,
                    r: 1
                }, {
                    v: 62,
                    b: 144,
                    V: -1,
                    r: 0
                }, _WF, _WF, {
                    v: 62,
                    b: 144,
                    V: -1,
                    r: 0
                }, {
                    v: 62,
                    b: 148,
                    V: -1,
                    r: 1
                }, _SW],
                [_EMP, _SW, _SW, _SW, {
                    v: 84,
                    b: 31,
                    V: -1,
                    r: 2
                }, {
                    v: 84,
                    b: 31,
                    V: -1,
                    r: 2
                }, _SW, _SW, _SW, {
                    v: 0,
                    b: 71,
                    V: 17,
                    r: 1
                }],
                [_EMP, _SW, {
                    v: 84,
                    b: 71,
                    V: 8,
                    r: 0
                }, {
                    v: 84,
                    b: 71,
                    V: 8,
                    r: 0
                }, _SF, _SF, {
                    v: 84,
                    b: 71,
                    V: 8,
                    r: 0
                }, {
                    v: 84,
                    b: 71,
                    V: 8,
                    r: 0
                }, _SW, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 1
                }],
                [_EMP, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 31,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 31,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }]
            ]
        };
        HOUSE[HOUSEID.__HOUSE8__] = {
            width: 0,
            height: 0,
            radiation: 0,
            building: [
                [_EMP],
                [_EMP, _LF, {
                    v: 67,
                    b: 148,
                    V: -1,
                    r: 0
                }, _LF, _LF, _LF, {
                    v: 67,
                    b: 151,
                    V: -1,
                    r: 3
                }, {
                    v: 67,
                    b: 148,
                    V: -1,
                    r: 3
                }, _EMP, _EMP, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 0
                }, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 3
                }, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 3
                }],
                [_EMP, _MWLF, {
                    v: 67,
                    b: 149,
                    V: -1,
                    r: 0
                }, _MWLF, {
                    v: 67,
                    b: 150,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 150,
                    V: -1,
                    r: 0
                }, _MWLF, {
                    v: 67,
                    b: 149,
                    V: -1,
                    r: 0
                }, _MWWF, _MWWF, _MW, _MW, _MW, _MW],
                [_EMP, _MW, {
                    v: 62,
                    b: 148,
                    V: -1,
                    r: 0
                }, {
                    v: 62,
                    b: 151,
                    V: -1,
                    r: 3
                }, {
                    v: 62,
                    b: 143,
                    V: -1,
                    r: 2
                }, {
                    v: 62,
                    b: 143,
                    V: -1,
                    r: 2
                }, {
                    v: 62,
                    b: 140,
                    V: -1,
                    r: 3
                }, {
                    v: 62,
                    b: 148,
                    V: -1,
                    r: 0
                }, {
                    v: 62,
                    b: 71,
                    V: 23,
                    r: 0
                }, _MWWF, {
                    v: 84,
                    b: 71,
                    V: 23,
                    r: 0
                }, {
                    v: 84,
                    b: 71,
                    V: 28,
                    r: 0
                }, {
                    v: 84,
                    b: 71,
                    V: 28,
                    r: 0
                }, _MW, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 3
                }],
                [_EMP, _MW, _WF, _LF, _LF, _LF, _LF, {
                    v: 62,
                    b: 142,
                    V: -1,
                    r: 3
                }, {
                    v: 62,
                    b: 146,
                    V: -1,
                    r: 3
                }, {
                    v: 62,
                    b: 32,
                    V: -1,
                    r: 3
                }, _SF, _SF, _SF, _MW],
                [_EMP, _MW, {
                    v: 62,
                    b: 71,
                    V: 4,
                    r: 3
                }, _LF, {
                    v: 67,
                    b: 71,
                    V: 7,
                    r: 3
                }, {
                    v: 67,
                    b: 71,
                    V: 7,
                    r: 3
                }, _LF, {
                    v: 62,
                    b: 71,
                    V: 3,
                    r: 1
                }, {
                    v: 0,
                    b: 149,
                    V: -1,
                    r: 0
                }, _MW, _MW, _TF, _TF, _MW],
                [_EMP, _MW, {
                    v: 62,
                    b: 71,
                    V: 3,
                    r: 3
                }, _LF, {
                    v: 67,
                    b: 71,
                    V: 7,
                    r: 3
                }, {
                    v: 67,
                    b: 71,
                    V: 7,
                    r: 3
                }, _LF, {
                    v: 62,
                    b: 71,
                    V: 4,
                    r: 1
                }, {
                    v: 0,
                    b: 149,
                    V: -1,
                    r: 0
                }, {
                    v: 85,
                    b: 71,
                    V: 21,
                    r: 3
                }, {
                    v: 85,
                    b: 32,
                    V: -1,
                    r: 3
                }, _TF, _TF, _MW],
                [_EMP, _MW, _WF, _LF, _LF, _LF, _LF, _WF, {
                    v: 0,
                    b: 149,
                    V: -1,
                    r: 0
                }, _MW, _MW, _MW, _MW, _MW],
                [_EMP, _MW, {
                    v: 62,
                    b: 71,
                    V: 23,
                    r: 3
                }, _WF, _WF, _WF, _WF, {
                    v: 62,
                    b: 71,
                    V: 23,
                    r: 3
                }, {
                    v: 0,
                    b: 149,
                    V: -1,
                    r: 0
                }, _MW],
                [_EMP, _MWLF, _MWLF, _MWLF, {
                    v: 67,
                    b: 52,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 52,
                    V: -1,
                    r: 2
                }, _MWLF, _MWLF, {
                    v: 0,
                    b: 149,
                    V: -1,
                    r: 0
                }, _MWLF],
                [_EMP, _MWLF, {
                    v: 67,
                    b: 71,
                    V: 27,
                    r: 1
                }, _LF, _LF, _LF, _LF, {
                    v: 67,
                    b: 71,
                    V: 16,
                    r: 1
                }, {
                    v: 67,
                    b: 144,
                    V: -1,
                    r: 3
                }, _MWLF],
                [_EMP, {
                    v: 67,
                    b: 70,
                    V: -1,
                    r: 1
                }, _LF, _WF, _WF, _WF, _LF, {
                    v: 67,
                    b: 71,
                    V: 13,
                    r: 0
                }, _LF, _MWLF],
                [_EMP, {
                    v: 67,
                    b: 70,
                    V: -1,
                    r: 1
                }, _LF, {
                    v: 62,
                    b: 71,
                    V: 4,
                    r: 3
                }, _WF, _WF, _LF, {
                    v: 67,
                    b: 71,
                    V: 9,
                    r: 3
                }, {
                    v: 67,
                    b: 71,
                    V: 10,
                    r: 1
                }, _MWLF, {
                    v: 0,
                    b: 71,
                    V: 17,
                    r: 3
                }],
                [_EMP, _MWLF, {
                    v: 67,
                    b: 71,
                    V: 27,
                    r: 0
                }, _WF, _WF, {
                    v: 62,
                    b: 71,
                    V: 3,
                    r: 2
                }, _LF, _LF, _LF, _MWLF, {
                    v: 0,
                    b: 71,
                    V: 24,
                    r: 2
                }],
                [_EMP, _MWLF, {
                    v: 67,
                    b: 71,
                    V: 18,
                    r: 0
                }, _LF, _LF, _LF, _LF, {
                    v: 67,
                    b: 71,
                    V: 23,
                    r: 0
                }, {
                    v: 67,
                    b: 71,
                    V: 12,
                    r: 3
                }, _MWLF],
                [_EMP, _MWLF, _MWLF, _MWLF, {
                    v: 67,
                    b: 70,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 70,
                    V: -1,
                    r: 0
                }, _MWLF, _MWLF, _MWLF, _MWLF]
            ]
        };
        HOUSE[HOUSEID.__HOUSE9__] = {
            width: 0,
            height: 0,
            radiation: 0,
            building: [
                [_EMP],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 151,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 148,
                    V: -1,
                    r: 0
                }, _EMP, {
                    v: 0,
                    b: 148,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 151,
                    V: -1,
                    r: 0
                }],
                [_EMP, _WW, _WW, {
                    v: 0,
                    b: 30,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 30,
                    V: -1,
                    r: 2
                }, _MWTF, _MWTF, {
                    v: 67,
                    b: 149,
                    V: -1,
                    r: 2
                }, {
                    v: 67,
                    b: 150,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 149,
                    V: -1,
                    r: 0
                }, _MWTF],
                [_EMP, _WW, {
                    v: 0,
                    b: 71,
                    V: 23,
                    r: 3
                }, _EMP, _EMP, _MWTF, {
                    v: 67,
                    b: 71,
                    V: 9,
                    r: 0
                }, {
                    v: 67,
                    b: 143,
                    V: -1,
                    r: 3
                }, {
                    v: 67,
                    b: 146,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 143,
                    V: -1,
                    r: 1
                }, _MWTF, {
                    v: 0,
                    b: 71,
                    V: 17,
                    r: 2
                }],
                [_EMP, _WW, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 3
                }, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 3
                }, {
                    v: 0,
                    b: 71,
                    V: 17,
                    r: 3
                }, _MWTF, {
                    v: 67,
                    b: 71,
                    V: 10,
                    r: 2
                }, {
                    v: 67,
                    b: 151,
                    V: -1,
                    r: 1
                }, _LF, {
                    v: 67,
                    b: 151,
                    V: -1,
                    r: 1
                }, _MWTF, _MWTF, _MWTF],
                [_EMP, _WW, {
                    v: 0,
                    b: 144,
                    V: -1,
                    r: 3
                }, {
                    v: 0,
                    b: 144,
                    V: -1,
                    r: 3
                }, {
                    v: 0,
                    b: 144,
                    V: -1,
                    r: 3
                }, _MWTF, _LF, _LF, _LF, _LF, {
                    v: 62,
                    b: 71,
                    V: 20,
                    r: 1
                }, {
                    v: 62,
                    b: 71,
                    V: 11,
                    r: 0
                }, {
                    v: 62,
                    b: 70,
                    V: -1,
                    r: 3
                }],
                [_EMP, _MWTF, {
                    v: 85,
                    b: 149,
                    V: -1,
                    r: 0
                }, {
                    v: 85,
                    b: 149,
                    V: -1,
                    r: 0
                }, {
                    v: 85,
                    b: 149,
                    V: -1,
                    r: 0
                }, _MWTF, {
                    v: 62,
                    b: 32,
                    V: -1,
                    r: 2
                }, _MWWF, {
                    v: 67,
                    b: 71,
                    V: 8,
                    r: 0
                }, _LF, _WF, _WF, {
                    v: 62,
                    b: 70,
                    V: -1,
                    r: 3
                }],
                [_EMP, {
                    v: 85,
                    b: 70,
                    V: -1,
                    r: 1
                }, {
                    v: 85,
                    b: 147,
                    V: -1,
                    r: 2
                }, {
                    v: 85,
                    b: 146,
                    V: -1,
                    r: 2
                }, {
                    v: 85,
                    b: 140,
                    V: -1,
                    r: 2
                }, _MWTF, _WF, {
                    v: 62,
                    b: 70,
                    V: -1,
                    r: 3
                }, _LF, _LF, _WF, _WF, {
                    v: 62,
                    b: 70,
                    V: -1,
                    r: 3
                }],
                [_EMP, _MWTF, {
                    v: 85,
                    b: 71,
                    V: 31,
                    r: 0
                }, {
                    v: 85,
                    b: 142,
                    V: -1,
                    r: 3
                }, {
                    v: 85,
                    b: 146,
                    V: -1,
                    r: 1
                }, {
                    v: 85,
                    b: 150,
                    V: -1,
                    r: 1
                }, {
                    v: 62,
                    b: 71,
                    V: 5,
                    r: 2
                }, {
                    v: 62,
                    b: 70,
                    V: -1,
                    r: 3
                }, {
                    v: 67,
                    b: 71,
                    V: 0,
                    r: 2
                }, _LF, {
                    v: 62,
                    b: 71,
                    V: 10,
                    r: 3
                }, {
                    v: 62,
                    b: 71,
                    V: 7,
                    r: 0
                }, {
                    v: 62,
                    b: 70,
                    V: -1,
                    r: 3
                }],
                [_EMP, _MWTF, _MWTF, _MWTF, _MWTF, _MWTF, _MWTF, _MWTF, _MWTF, {
                    v: 85,
                    b: 32,
                    V: -1,
                    r: 2
                }, _MWTF, _MWTF, _MWTF],
                [_EMP, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 0
                }, {
                    v: 0,
                    b: 71,
                    V: 17,
                    r: 0
                }, _EMP, _EMP, {
                    v: 0,
                    b: 71,
                    V: 24,
                    r: 0
                }, _MWTF, {
                    v: 85,
                    b: 71,
                    V: 28,
                    r: 3
                }, _TF, _TF, _MWTF, {
                    v: 0,
                    b: 71,
                    V: 24,
                    r: 0
                }, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 0
                }],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _MWTF, {
                    v: 85,
                    b: 71,
                    V: 21,
                    r: 3
                }, _TF, {
                    v: 85,
                    b: 71,
                    V: 18,
                    r: 3
                }, _MWTF],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _MWTF, _MWTF, _MWTF, _MWTF, _MWTF]
            ]
        };
        HOUSE[HOUSEID.__CITY0__] = {
            width: 0,
            height: 0,
            radiation: __RADIATION__,
            building: [
                [_EMP],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 111,
                    V: -1,
                    r: 3
                }, _EMP, _EMP, {
                    v: 0,
                    b: 111,
                    V: -1,
                    r: 3
                }, _EMP, {
                    v: 0,
                    b: 111,
                    V: -1,
                    r: 3
                }, _EMP, {
                    v: 0,
                    b: 111,
                    V: -1,
                    r: 3
                }, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 26,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 24,
                    r: 0
                }, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 71,
                    V: 24,
                    r: 0
                }],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _MWTF, _MWTF, _MWTF, _MWTF, _MWTF, _MWTF, _MWTF, _MWTF, _MWTF, _MWTF, _MWTF, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _MWLF, _MWLF, _MWLF, _MWLF, _MWLF, _MWLF, _MWLF, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 0
                }],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _MWTF, {
                    v: 85,
                    b: 71,
                    V: 37,
                    r: 1
                }, {
                    v: 85,
                    b: 71,
                    V: 28,
                    r: 0
                }, _TF, {
                    v: 85,
                    b: 71,
                    V: 31,
                    r: 1
                }, {
                    v: 85,
                    b: 71,
                    V: 32,
                    r: 1
                }, _MWTF, {
                    v: 85,
                    b: 71,
                    V: 37,
                    r: 1
                }, _TF, _TF, _MWTF, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _MWLF, _WF, {
                    v: 62,
                    b: 70,
                    V: -1,
                    r: 3
                }, _LF, _LF, {
                    v: 62,
                    b: 71,
                    V: 13,
                    r: 2
                }, _MWLF, _MWSF, _MWSF, _MWSF, _MWSF],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _MWTF, _TF, _TF, _TF, _TF, _TF, _MWTF, _TF, _TF, {
                    v: 85,
                    b: 71,
                    V: 36,
                    r: 1
                }, _MWTF, _EMP, {
                    v: 0,
                    b: 71,
                    V: 24,
                    r: 0
                }, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, {
                    v: 0,
                    b: 71,
                    V: 23,
                    r: 0
                }, _MWLF, _WF, {
                    v: 62,
                    b: 71,
                    V: 40,
                    r: 2
                }, _LF, _LF, {
                    v: 62,
                    b: 71,
                    V: 12,
                    r: 2
                }, _MWLF, {
                    v: 84,
                    b: 71,
                    V: 26,
                    r: 3
                }, {
                    v: 84,
                    b: 71,
                    V: 17,
                    r: 3
                }, _SF, _MWSF],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 0
                }, _MWSF, _MWSF, {
                    v: 84,
                    b: 52,
                    V: -1,
                    r: 0
                }, _MWSF, _MWSF, _MWTF, _MWTF, _MWSF, {
                    v: 85,
                    b: 71,
                    V: 41,
                    r: 0
                }, _MWSF, {
                    v: 85,
                    b: 71,
                    V: 41,
                    r: 0
                }, _MWTF, _MW, _MWTF, _MWTF, _MWTF, _MWTF, _MWTF, _MWTF, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, {
                    v: 0,
                    b: 151,
                    V: -1,
                    r: 1
                }, {
                    v: 67,
                    b: 150,
                    V: -1,
                    r: 1
                }, _LF, _LF, _LF, _LF, _WF, _MWLF, _SF, _SF, {
                    v: 84,
                    b: 71,
                    V: 18,
                    r: 2
                }, _MWSF],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _MWSF, _SF, _SF, _SF, _SF, {
                    v: 84,
                    b: 71,
                    V: 35,
                    r: 2
                }, {
                    v: 84,
                    b: 71,
                    V: 35,
                    r: 2
                }, _SF, _SF, _SF, _SF, {
                    v: 84,
                    b: 71,
                    V: 35,
                    r: 2
                }, {
                    v: 84,
                    b: 71,
                    V: 35,
                    r: 2
                }, _SF, _SF, _SF, _SF, {
                    v: 84,
                    b: 71,
                    V: 33,
                    r: 2
                }, _MWTF, {
                    v: 0,
                    b: 71,
                    V: 24,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, {
                    v: 0,
                    b: 151,
                    V: -1,
                    r: 1
                }, {
                    v: 67,
                    b: 150,
                    V: -1,
                    r: 1
                }, _LF, _LF, _LF, _LF, _WF, {
                    v: 67,
                    b: 71,
                    V: 41,
                    r: 1
                }, _SF, _SF, {
                    v: 84,
                    b: 71,
                    V: 18,
                    r: 2
                }, _MWSF],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _MWSF, {
                    v: 84,
                    b: 71,
                    V: 9,
                    r: 0
                }, _SF, _SF, _SF, _SF, _SF, {
                    v: 84,
                    b: 151,
                    V: -1,
                    r: 1
                }, _SF, _SF, {
                    v: 84,
                    b: 151,
                    V: -1,
                    r: 1
                }, _SF, _SF, _SF, _SF, _SF, _SF, {
                    v: 85,
                    b: 71,
                    V: 33,
                    r: 2
                }, _MWTF, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, {
                    v: 0,
                    b: 71,
                    V: 23,
                    r: 0
                }, _MWLF, {
                    v: 62,
                    b: 71,
                    V: 39,
                    r: 3
                }, {
                    v: 62,
                    b: 71,
                    V: 39,
                    r: 3
                }, {
                    v: 62,
                    b: 71,
                    V: 23,
                    r: 3
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 23,
                    r: 2
                }, _MWLF, {
                    v: 84,
                    b: 71,
                    V: 26,
                    r: 2
                }, _SF, {
                    v: 84,
                    b: 71,
                    V: 16,
                    r: 2
                }, _MWSF, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 1
                }],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _MWSF, {
                    v: 84,
                    b: 71,
                    V: 10,
                    r: 2
                }, _SF, _SF, _SF, _MWSF, _MWSF, {
                    v: 84,
                    b: 149,
                    V: -1,
                    r: 2
                }, {
                    v: 85,
                    b: 150,
                    V: -1,
                    r: 0
                }, {
                    v: 85,
                    b: 150,
                    V: -1,
                    r: 0
                }, {
                    v: 84,
                    b: 149,
                    V: -1,
                    r: 2
                }, _MWSF, _MWSF, _SF, _SF, _MWTF, _MWSF, _MWTF, _MWTF, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _MWLF, _MWLF, _MWLF, _MWLF, {
                    v: 0,
                    b: 52,
                    V: -1,
                    r: 0
                }, _MWLF, _MWLF, _MWSF, _MWSF, _MWSF, _MWSF],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _MWSF, _MWSF, _MWSF, {
                    v: 84,
                    b: 71,
                    V: 33,
                    r: 0
                }, _SF, _MWSF, {
                    v: 84,
                    b: 71,
                    V: 32,
                    r: 0
                }, {
                    v: 84,
                    b: 142,
                    V: -1,
                    r: 3
                }, {
                    v: 84,
                    b: 140,
                    V: -1,
                    r: 1
                }, {
                    v: 85,
                    b: 146,
                    V: -1,
                    r: 0
                }, {
                    v: 84,
                    b: 142,
                    V: -1,
                    r: 2
                }, {
                    v: 84,
                    b: 151,
                    V: -1,
                    r: 2
                }, {
                    v: 84,
                    b: 150,
                    V: -1,
                    r: 1
                }, _SF, {
                    v: 84,
                    b: 71,
                    V: 33,
                    r: 2
                }, _MWTF, {
                    v: 0,
                    b: 71,
                    V: 37,
                    r: 1
                }, {
                    v: 0,
                    b: 71,
                    V: 38,
                    r: 1
                }, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _EMP, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 0
                }, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 0
                }, _SF, _SF, {
                    v: 0,
                    b: 71,
                    V: 17,
                    r: 0
                }],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _MWSF, {
                    v: 84,
                    b: 71,
                    V: 22,
                    r: 0
                }, _SF, _MWSF, _SF, {
                    v: 84,
                    b: 71,
                    V: 34,
                    r: 3
                }, _TF, {
                    v: 85,
                    b: 140,
                    V: -1,
                    r: 2
                }, {
                    v: 84,
                    b: 71,
                    V: 34,
                    r: 3
                }, _SF, _MWSF, _SF, {
                    v: 84,
                    b: 71,
                    V: 38,
                    r: 0
                }, _MWTF, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 32,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 24,
                    r: 0
                }],
                [_EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 0
                }, {
                    v: 0,
                    b: 71,
                    V: 17,
                    r: 0
                }, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 26,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 24,
                    r: 0
                }, _EMP, _MWSF, _MW, {
                    v: 84,
                    b: 32,
                    V: -1,
                    r: 0
                }, _MWSF, {
                    v: 84,
                    b: 142,
                    V: -1,
                    r: 0
                }, {
                    v: 85,
                    b: 148,
                    V: -1,
                    r: 0
                }, {
                    v: 84,
                    b: 146,
                    V: -1,
                    r: 1
                }, {
                    v: 85,
                    b: 146,
                    V: -1,
                    r: 0
                }, {
                    v: 85,
                    b: 148,
                    V: -1,
                    r: 0
                }, {
                    v: 85,
                    b: 142,
                    V: -1,
                    r: 1
                }, _MWSF, {
                    v: 84,
                    b: 32,
                    V: -1,
                    r: 0
                }, _MW, _MWTF, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 35,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 31,
                    r: 0
                }],
                [_EMP, _EMP, _EMP, _MWTF, _MWTF, _MWTF, _MWTF, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, {
                    v: 0,
                    b: 70,
                    V: -1,
                    r: 3
                }, _TF, _TF, _MWSF, {
                    v: 84,
                    b: 140,
                    V: -1,
                    r: 0
                }, {
                    v: 84,
                    b: 71,
                    V: 34,
                    r: 1
                }, {
                    v: 85,
                    b: 140,
                    V: -1,
                    r: 2
                }, _TF, {
                    v: 84,
                    b: 71,
                    V: 34,
                    r: 1
                }, {
                    v: 84,
                    b: 140,
                    V: -1,
                    r: 2
                }, _MWSF, _TF, _TF, {
                    v: 0,
                    b: 70,
                    V: -1,
                    r: 1
                }, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _EMP, {
                    v: 0,
                    b: 71,
                    V: 23,
                    r: 0
                }, _EMP, _EMP, _EMP, _WF],
                [_EMP, _EMP, _EMP, _MWTF, {
                    v: 85,
                    b: 71,
                    V: 33,
                    r: 1
                }, {
                    v: 85,
                    b: 71,
                    V: 33,
                    r: 1
                }, _MWTF, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, {
                    v: 0,
                    b: 70,
                    V: -1,
                    r: 3
                }, {
                    v: 85,
                    b: 70,
                    V: -1,
                    r: 2
                }, _SF, {
                    v: 84,
                    b: 144,
                    V: -1,
                    r: 1
                }, {
                    v: 0,
                    b: 149,
                    V: -1,
                    r: 1
                }, {
                    v: 84,
                    b: 145,
                    V: -1,
                    r: 0
                }, {
                    v: 84,
                    b: 142,
                    V: -1,
                    r: 0
                }, {
                    v: 85,
                    b: 146,
                    V: -1,
                    r: 0
                }, {
                    v: 85,
                    b: 147,
                    V: -1,
                    r: 3
                }, {
                    v: 84,
                    b: 142,
                    V: -1,
                    r: 1
                }, {
                    v: 84,
                    b: 146,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 149,
                    V: -1,
                    r: 3
                }, {
                    v: 84,
                    b: 144,
                    V: -1,
                    r: 1
                }, _SF, {
                    v: 85,
                    b: 70,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 70,
                    V: -1,
                    r: 1
                }, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _WWLF, _WWLF, {
                    v: 67,
                    b: 30,
                    V: -1,
                    r: 2
                }, _WWLF, _WWLF, _WF, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, _EMP, _EMP, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }],
                [_EMP, _EMP, _EMP, _MWSF, _SF, _SF, _MWSF, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, {
                    v: 0,
                    b: 32,
                    V: -1,
                    r: 3
                }, _TF, _TF, _TF, _MWSF, {
                    v: 0,
                    b: 149,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 149,
                    V: -1,
                    r: 0
                }, {
                    v: 85,
                    b: 70,
                    V: -1,
                    r: 0
                }, {
                    v: 85,
                    b: 70,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 149,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 149,
                    V: -1,
                    r: 0
                }, _MWSF, _TF, _TF, _TF, {
                    v: 0,
                    b: 32,
                    V: -1,
                    r: 1
                }, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 0
                }, _WWLF, _LF, _LF, {
                    v: 67,
                    b: 71,
                    V: 6,
                    r: 1
                }, _WWLF, _WF, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 1
                }, _LF, _LF, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 3
                }],
                [_EMP, _EMP, _EMP, {
                    v: 84,
                    b: 71,
                    V: 41,
                    r: 1
                }, _SF, _SF, {
                    v: 84,
                    b: 71,
                    V: 41,
                    r: 3
                }, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, {
                    v: 0,
                    b: 70,
                    V: -1,
                    r: 3
                }, {
                    v: 85,
                    b: 70,
                    V: -1,
                    r: 0
                }, _SF, _SF, _SF, {
                    v: 84,
                    b: 144,
                    V: -1,
                    r: 1
                }, {
                    v: 84,
                    b: 144,
                    V: -1,
                    r: 1
                }, _SF, _SF, {
                    v: 84,
                    b: 144,
                    V: -1,
                    r: 1
                }, {
                    v: 84,
                    b: 144,
                    V: -1,
                    r: 1
                }, _SF, _SF, _SF, {
                    v: 85,
                    b: 70,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 70,
                    V: -1,
                    r: 1
                }, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, {
                    v: 67,
                    b: 30,
                    V: -1,
                    r: 1
                }, _LF, _LF, {
                    v: 67,
                    b: 71,
                    V: 19,
                    r: 2
                }, _WWWF, _WF, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 1
                }, _LF, _LF, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 3
                }],
                [_EMP, _EMP, _EMP, _MWTF, {
                    v: 85,
                    b: 71,
                    V: 36,
                    r: 2
                }, {
                    v: 85,
                    b: 71,
                    V: 37,
                    r: 3
                }, _MWTF, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, {
                    v: 0,
                    b: 70,
                    V: -1,
                    r: 3
                }, {
                    v: 85,
                    b: 71,
                    V: 39,
                    r: 0
                }, _TF, _TF, _TF, _TF, _TF, _TF, _TF, _TF, _TF, _TF, {
                    v: 85,
                    b: 71,
                    V: 35,
                    r: 1
                }, {
                    v: 0,
                    b: 70,
                    V: -1,
                    r: 1
                }, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _WWLF, {
                    v: 67,
                    b: 71,
                    V: 8,
                    r: 3
                }, _LF, {
                    v: 67,
                    b: 71,
                    V: 0,
                    r: 1
                }, _WWLF, _WF, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 1
                }, {
                    v: 67,
                    b: 71,
                    V: 23,
                    r: 1
                }, {
                    v: 67,
                    b: 71,
                    V: 23,
                    r: 1
                }, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 3
                }],
                [_EMP, _EMP, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 1
                }, _MWTF, _MWTF, _MWTF, _MWTF, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, {
                    v: 0,
                    b: 70,
                    V: -1,
                    r: 3
                }, {
                    v: 84,
                    b: 70,
                    V: -1,
                    r: 0
                }, {
                    v: 84,
                    b: 70,
                    V: -1,
                    r: 0
                }, {
                    v: 84,
                    b: 70,
                    V: -1,
                    r: 0
                }, {
                    v: 84,
                    b: 70,
                    V: -1,
                    r: 0
                }, {
                    v: 84,
                    b: 70,
                    V: -1,
                    r: 0
                }, {
                    v: 84,
                    b: 32,
                    V: -1,
                    r: 0
                }, {
                    v: 84,
                    b: 32,
                    V: -1,
                    r: 0
                }, {
                    v: 84,
                    b: 70,
                    V: -1,
                    r: 0
                }, {
                    v: 84,
                    b: 70,
                    V: -1,
                    r: 0
                }, {
                    v: 84,
                    b: 70,
                    V: -1,
                    r: 0
                }, {
                    v: 84,
                    b: 70,
                    V: -1,
                    r: 0
                }, {
                    v: 84,
                    b: 70,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 70,
                    V: -1,
                    r: 1
                }, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, {
                    v: 0,
                    b: 71,
                    V: 23,
                    r: 0
                }, _WWLF, _WWLF, _WWLF, _WWLF, _WWLF, _WF, _SWLF, _SWLF, _SWLF, _SWLF, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 3
                }],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _WF, _WF, _WF, _WF, _WF, _WF, _WF, _SWLF, _WF, {
                    v: 62,
                    b: 71,
                    V: 21,
                    r: 1
                }, _SWWF, _LF, _LF, _LF, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 3
                }],
                [{
                    v: 0,
                    b: 86,
                    V: 26,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 33,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 32,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 33,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 9,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 9,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 32,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 24,
                    r: 0
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 3
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 2
                }, _SWLF, _SWLF, _SWLF, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 0
                }, _SWWF, _SWWF, {
                    v: 67,
                    b: 51,
                    V: -1,
                    r: 2
                }, _SWLF, _SWLF, _SWLF, _SWLF],
                [{
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 28,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 9,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 9,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 9,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _EMP, {
                    v: 62,
                    b: 71,
                    V: 23,
                    r: 0
                }, _SWLF, {
                    v: 67,
                    b: 71,
                    V: 13,
                    r: 1
                }, _LF, _LF, {
                    v: 67,
                    b: 71,
                    V: 27,
                    r: 1
                }, _LF, _LF, _SWLF, {
                    v: 67,
                    b: 71,
                    V: 23,
                    r: 3
                }, _LF, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 3
                }],
                [{
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 27,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 9,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 9,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 9,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _EMP, _WF, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 1
                }, _LF, _LF, _LF, _LF, _LF, _LF, _SWLF, _LF, _LF, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 3
                }],
                [{
                    v: 0,
                    b: 86,
                    V: 30,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 42,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 9,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 43,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 34,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 9,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 9,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _EMP, {
                    v: 62,
                    b: 71,
                    V: 23,
                    r: 0
                }, _SWLF, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 0
                }, _LF, _LF, _SWLF, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 0
                }, _SWLF, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 1
                }],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 7,
                    r: 0
                }, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, {
                    v: 84,
                    b: 71,
                    V: 23,
                    r: 0
                }, {
                    v: 84,
                    b: 151,
                    V: -1,
                    r: 0
                }, {
                    v: 84,
                    b: 71,
                    V: 23,
                    r: 0
                }, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 3
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 0
                }, _SWLF, {
                    v: 67,
                    b: 71,
                    V: 15,
                    r: 0
                }, {
                    v: 67,
                    b: 71,
                    V: 4,
                    r: 0
                }, {
                    v: 67,
                    b: 71,
                    V: 3,
                    r: 0
                }, {
                    v: 67,
                    b: 71,
                    V: 14,
                    r: 0
                }, _LF, _LF, _LF, _LF, _LF, _SWLF, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 1
                }],
                [_EMP, _EMP, _WWWF, {
                    v: 62,
                    b: 71,
                    V: 26,
                    r: 1
                }, _WF, _WF, _WWWF, {
                    v: 62,
                    b: 71,
                    V: 16,
                    r: 2
                }, _WF, _WF, _WWWF, {
                    v: 0,
                    b: 31,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 31,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, _EMP, {
                    v: 0,
                    b: 86,
                    V: 15,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, _EMP, _EMP, _EMP, _EMP, _MWWF, _MWWF, _MWWF, {
                    v: 62,
                    b: 150,
                    V: -1,
                    r: 3
                }, _MWWF, _MWWF, _MWWF, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 0
                }, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _EMP, {
                    v: 0,
                    b: 71,
                    V: 23,
                    r: 0
                }, _SWLF, {
                    v: 67,
                    b: 71,
                    V: 4,
                    r: 3
                }, {
                    v: 67,
                    b: 71,
                    V: 7,
                    r: 3
                }, {
                    v: 67,
                    b: 71,
                    V: 7,
                    r: 3
                }, {
                    v: 67,
                    b: 71,
                    V: 3,
                    r: 1
                }, _LF, _WF, _WF, _WF, _LF, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 3
                }],
                [_EMP, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 0
                }, _WWWF, {
                    v: 62,
                    b: 71,
                    V: 17,
                    r: 1
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 22,
                    r: 1
                }, _WWWF, {
                    v: 62,
                    b: 71,
                    V: 17,
                    r: 2
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 15,
                    r: 1
                }, _WWWF, _EMP, _EMP, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 3
                }, _EMP, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, _EMP, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 0
                }, _EMP, {
                    v: 0,
                    b: 71,
                    V: 24,
                    r: 0
                }, _MWWF, {
                    v: 62,
                    b: 71,
                    V: 16,
                    r: 2
                }, {
                    v: 62,
                    b: 71,
                    V: 39,
                    r: 1
                }, _WF, _WF, _WF, _MWWF, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 0
                }, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _EMP, {
                    v: 0,
                    b: 148,
                    V: -1,
                    r: 3
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 3
                }, _LF, _LF, _LF, _LF, _LF, _WF, _WF, _WF, _LF, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 3
                }],
                [_EMP, _EMP, _WWWF, {
                    v: 62,
                    b: 71,
                    V: 10,
                    r: 0
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 0,
                    r: 1
                }, _WWWF, {
                    v: 62,
                    b: 71,
                    V: 1,
                    r: 3
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 8,
                    r: 1
                }, _WWWF, _EMP, _EMP, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 3
                }, _EMP, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, _EMP, _MW, _MWSF, _MWSF, _MWWF, _WF, _WF, _WF, _WF, {
                    v: 62,
                    b: 71,
                    V: 27,
                    r: 2
                }, _MWWF, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _EMP, {
                    v: 0,
                    b: 140,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 3
                }, {
                    v: 67,
                    b: 71,
                    V: 23,
                    r: 0
                }, {
                    v: 67,
                    b: 71,
                    V: 27,
                    r: 3
                }, {
                    v: 67,
                    b: 71,
                    V: 8,
                    r: 2
                }, {
                    v: 67,
                    b: 71,
                    V: 27,
                    r: 3
                }, _LF, _LF, _LF, _LF, {
                    v: 67,
                    b: 71,
                    V: 12,
                    r: 2
                }, _SWLF],
                [_EMP, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 0
                }, _WWWF, {
                    v: 62,
                    b: 71,
                    V: 9,
                    r: 2
                }, _WF, _WF, _WWWF, _WF, _WF, {
                    v: 62,
                    b: 71,
                    V: 12,
                    r: 2
                }, _WW, _EMP, _EMP, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 3
                }, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 2
                }, _MWSF, {
                    v: 84,
                    b: 71,
                    V: 16,
                    r: 1
                }, {
                    v: 84,
                    b: 71,
                    V: 19,
                    r: 1
                }, _MWSF, {
                    v: 62,
                    b: 32,
                    V: -1,
                    r: 0
                }, {
                    v: 62,
                    b: 70,
                    V: -1,
                    r: 0
                }, _WF, _WF, {
                    v: 62,
                    b: 71,
                    V: 39,
                    r: 2
                }, _MWWF, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _EMP, {
                    v: 0,
                    b: 148,
                    V: -1,
                    r: 0
                }, _SWLF, _SWLF, _SWLF, _SWLF, _SWLF, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 0
                }, _SWLF, _SWLF, _SWLF, _SWLF, {
                    v: 0,
                    b: 71,
                    V: 24,
                    r: 1
                }],
                [_EMP, {
                    v: 0,
                    b: 71,
                    V: 17,
                    r: 0
                }, _WW, _WWWF, _WWWF, _WWWF, _WWWF, _WWWF, _WWWF, _WW, _WW, _EMP, _EMP, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 3
                }, {
                    v: 0,
                    b: 71,
                    V: 24,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, {
                    v: 0,
                    b: 71,
                    V: 17,
                    r: 0
                }, _MWSF, _SF, _SF, _MWSF, _LF, {
                    v: 67,
                    b: 70,
                    V: -1,
                    r: 3
                }, _WF, _WF, _WF, _MWWF, {
                    v: 84,
                    b: 71,
                    V: 23,
                    r: 0
                }, _SF, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _EMP, {
                    v: 0,
                    b: 140,
                    V: -1,
                    r: 0
                }, _SWLF, {
                    v: 62,
                    b: 71,
                    V: 20,
                    r: 1
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 28,
                    r: 0
                }, _SWWF, _WF, _WF, _WF, {
                    v: 62,
                    b: 71,
                    V: 20,
                    r: 1
                }, {
                    v: 62,
                    b: 71,
                    V: 13,
                    r: 1
                }, _SWWF],
                [_EMP, _EMP, _EMP, _SWWF, _SWWF, _SWWF, _SWWF, _SWWF, _SWWF, _WF, _WF, _WF, _WF, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 3
                }, _EMP, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, _EMP, _MWSF, _SF, _SF, _MWLF, _LF, {
                    v: 67,
                    b: 70,
                    V: -1,
                    r: 3
                }, _WF, _WF, _WF, {
                    v: 62,
                    b: 150,
                    V: -1,
                    r: 3
                }, {
                    v: 84,
                    b: 151,
                    V: -1,
                    r: 0
                }, _SF, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _EMP, {
                    v: 0,
                    b: 140,
                    V: -1,
                    r: 0
                }, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 1
                }, _WF, _WF, _WF, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 3
                }, _WF, _WF, _WF, _WF, _WF, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 1
                }],
                [_EMP, _EMP, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 0
                }, _SWWF, {
                    v: 62,
                    b: 71,
                    V: 6,
                    r: 0
                }, {
                    v: 62,
                    b: 71,
                    V: 14,
                    r: 0
                }, {
                    v: 62,
                    b: 71,
                    V: 15,
                    r: 0
                }, {
                    v: 62,
                    b: 71,
                    V: 5,
                    r: 0
                }, _SWWF, {
                    v: 62,
                    b: 71,
                    V: 23,
                    r: 2
                }, _WF, _WF, _WF, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 3
                }, _EMP, {
                    v: 0,
                    b: 86,
                    V: 16,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, _EMP, _MWSF, {
                    v: 84,
                    b: 71,
                    V: 18,
                    r: 3
                }, _SF, {
                    v: 67,
                    b: 150,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 142,
                    V: -1,
                    r: 1
                }, {
                    v: 67,
                    b: 71,
                    V: 40,
                    r: 2
                }, _WF, _WF, _WF, {
                    v: 62,
                    b: 150,
                    V: -1,
                    r: 3
                }, {
                    v: 84,
                    b: 151,
                    V: -1,
                    r: 3
                }, _SF, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _EMP, {
                    v: 0,
                    b: 143,
                    V: -1,
                    r: 3
                }, {
                    v: 0,
                    b: 149,
                    V: -1,
                    r: 3
                }, {
                    v: 62,
                    b: 144,
                    V: -1,
                    r: 3
                }, _WF, _WF, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 3
                }, _WF, _WF, _WF, {
                    v: 62,
                    b: 71,
                    V: 12,
                    r: 3
                }, {
                    v: 62,
                    b: 71,
                    V: 12,
                    r: 3
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 1
                }],
                [_EMP, _EMP, _EMP, _SWWF, _WF, _WF, _WF, _WF, _SWWF, _SWLF, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 2
                }, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 2
                }, _SWLF, _SWLF, _EMP, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 13,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, _EMP, _MWSF, _MWSF, _MWSF, _MWLF, {
                    v: 67,
                    b: 144,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 70,
                    V: -1,
                    r: 3
                }, _WF, _WF, {
                    v: 62,
                    b: 71,
                    V: 39,
                    r: 2
                }, _MWWF, {
                    v: 84,
                    b: 71,
                    V: 23,
                    r: 0
                }, _SF, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _EMP, {
                    v: 0,
                    b: 140,
                    V: -1,
                    r: 0
                }, _SWWF, _SWWF, _SWWF, _SWWF, _SWWF, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 2
                }, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 2
                }, _SWLF, _SWLF, _SWLF, _SWLF, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 1
                }],
                [_EMP, _EMP, _EMP, _SWWF, {
                    v: 62,
                    b: 71,
                    V: 0,
                    r: 0
                }, {
                    v: 62,
                    b: 71,
                    V: 2,
                    r: 0
                }, _WF, _WF, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 1
                }, _LF, _LF, _LF, {
                    v: 67,
                    b: 71,
                    V: 23,
                    r: 0
                }, _SWLF, _EMP, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 71,
                    V: 24,
                    r: 0
                }, _MWLF, {
                    v: 67,
                    b: 148,
                    V: -1,
                    r: 1
                }, {
                    v: 67,
                    b: 70,
                    V: -1,
                    r: 3
                }, {
                    v: 62,
                    b: 151,
                    V: -1,
                    r: 0
                }, {
                    v: 62,
                    b: 151,
                    V: -1,
                    r: 0
                }, {
                    v: 62,
                    b: 71,
                    V: 27,
                    r: 2
                }, _MWWF, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 0
                }, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _EMP, {
                    v: 0,
                    b: 142,
                    V: -1,
                    r: 3
                }, {
                    v: 0,
                    b: 148,
                    V: -1,
                    r: 0
                }, {
                    v: 62,
                    b: 140,
                    V: -1,
                    r: 1
                }, {
                    v: 0,
                    b: 148,
                    V: -1,
                    r: 0
                }, _SWLF, {
                    v: 67,
                    b: 71,
                    V: 16,
                    r: 1
                }, _LF, _LF, {
                    v: 67,
                    b: 71,
                    V: 26,
                    r: 1
                }, {
                    v: 67,
                    b: 71,
                    V: 23,
                    r: 2
                }, {
                    v: 67,
                    b: 71,
                    V: 17,
                    r: 1
                }, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 3
                }],
                [_EMP, _EMP, _EMP, _SWWF, _WF, _WF, _WF, _WF, _SWWF, {
                    v: 67,
                    b: 71,
                    V: 12,
                    r: 0
                }, _LF, _LF, {
                    v: 67,
                    b: 71,
                    V: 12,
                    r: 2
                }, _SWLF, _EMP, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, _EMP, _EMP, _EMP, _EMP, _MWLF, _MWLF, _MWLF, {
                    v: 62,
                    b: 150,
                    V: -1,
                    r: 3
                }, {
                    v: 62,
                    b: 150,
                    V: -1,
                    r: 3
                }, _MWWF, _MWWF, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _EMP, _EMP, _EMP, _WF, _WF, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 1
                }, _LF, _LF, _LF, _LF, _LF, _LF, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 3
                }],
                [_EMP, _EMP, {
                    v: 0,
                    b: 71,
                    V: 24,
                    r: 0
                }, _SWWF, {
                    v: 62,
                    b: 71,
                    V: 1,
                    r: 2
                }, {
                    v: 62,
                    b: 71,
                    V: 8,
                    r: 2
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 23,
                    r: 2
                }, _SWWF, {
                    v: 67,
                    b: 71,
                    V: 23,
                    r: 2
                }, _LF, _LF, {
                    v: 67,
                    b: 71,
                    V: 20,
                    r: 2
                }, _SWLF, _EMP, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, {
                    v: 84,
                    b: 71,
                    V: 23,
                    r: 0
                }, _SF, _SF, {
                    v: 84,
                    b: 71,
                    V: 23,
                    r: 0
                }, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _EMP, _EMP, _EMP, _WF, _WF, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 1
                }, _LF, _LF, _LF, _LF, _LF, _LF, {
                    v: 67,
                    b: 31,
                    V: -1,
                    r: 3
                }],
                [_EMP, _EMP, _EMP, _SWWF, _SWWF, _SWWF, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 0
                }, _SWWF, _SWWF, _SWLF, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 0
                }, _SWLF, _SWLF, _EMP, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _SF, _SF, _SF, _SF, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 21,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 20,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 15,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 36,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 4,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 45,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 9,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 9,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 32,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 25,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 24,
                    r: 0
                }],
                [{
                    v: 0,
                    b: 86,
                    V: 17,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 4,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 5,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 3,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 37,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 9,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 9,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 9,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 35,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 29,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 31,
                    r: 0
                }],
                [{
                    v: 0,
                    b: 86,
                    V: 16,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 11,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 10,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 9,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 9,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 38,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 1,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 34,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _LF, _LF, _LF, {
                    v: 67,
                    b: 151,
                    V: -1,
                    r: 1
                }, _LF, _LF, _LF],
                [{
                    v: 0,
                    b: 86,
                    V: 40,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 0,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 39,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, _EMP, _EMP, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, _SWWF, _SWWF, _SW, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 2
                }, _SWWF, _SWWF, _SWWF, {
                    v: 0,
                    b: 71,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 3
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 140,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 1
                }],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 1
                }, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 1
                }, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 1
                }, _LF, _LF, _LF, _SWWF, {
                    v: 62,
                    b: 71,
                    V: 27,
                    r: 1
                }, {
                    v: 62,
                    b: 71,
                    V: 27,
                    r: 1
                }, _WF, _WF, _WF, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 3
                }, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 3
                }, _EMP, {
                    v: 0,
                    b: 111,
                    V: -1,
                    r: 1
                }, {
                    v: 0,
                    b: 140,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 111,
                    V: -1,
                    r: 1
                }, _EMP, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 1
                }],
                [_EMP, _MWLF, _MWLF, _MWLF, _MWLF, _MWLF, _MWLF, _MWLF, _MWLF, _MWWF, _MWWF, _MWWF, _MWWF, _MWWF, _MWWF, _EMP, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 1
                }, _LF, _LF, _LF, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 1
                }, _WF, _WF, _WF, _WF, _WF, {
                    v: 62,
                    b: 69,
                    V: -1,
                    r: 3
                }, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, {
                    v: 67,
                    b: 151,
                    V: -1,
                    r: 1
                }, {
                    v: 0,
                    b: 140,
                    V: -1,
                    r: 3
                }, {
                    v: 0,
                    b: 140,
                    V: -1,
                    r: 3
                }, {
                    v: 0,
                    b: 148,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 140,
                    V: -1,
                    r: 3
                }, {
                    v: 0,
                    b: 140,
                    V: -1,
                    r: 3
                }, {
                    v: 67,
                    b: 151,
                    V: -1,
                    r: 1
                }],
                [_EMP, _MWLF, {
                    v: 67,
                    b: 71,
                    V: 35,
                    r: 2
                }, _LF, {
                    v: 67,
                    b: 142,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 146,
                    V: -1,
                    r: 1
                }, {
                    v: 67,
                    b: 146,
                    V: -1,
                    r: 1
                }, {
                    v: 67,
                    b: 140,
                    V: -1,
                    r: 1
                }, {
                    v: 67,
                    b: 140,
                    V: -1,
                    r: 1
                }, {
                    v: 62,
                    b: 150,
                    V: -1,
                    r: 1
                }, _WF, _WF, {
                    v: 62,
                    b: 71,
                    V: 17,
                    r: 3
                }, {
                    v: 62,
                    b: 71,
                    V: 16,
                    r: 1
                }, _MWWF, _EMP, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 1
                }, _LF, _LF, {
                    v: 67,
                    b: 71,
                    V: 3,
                    r: 1
                }, _SWWF, {
                    v: 62,
                    b: 71,
                    V: 22,
                    r: 2
                }, {
                    v: 62,
                    b: 71,
                    V: 20,
                    r: 3
                }, {
                    v: 62,
                    b: 71,
                    V: 11,
                    r: 2
                }, _WF, _SWWF, _SWWF, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 3
                }, _EMP, {
                    v: 0,
                    b: 111,
                    V: -1,
                    r: 1
                }, {
                    v: 0,
                    b: 140,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 111,
                    V: -1,
                    r: 1
                }, _EMP, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 1
                }],
                [_EMP, _MWLF, _LF, {
                    v: 67,
                    b: 70,
                    V: -1,
                    r: 3
                }, {
                    v: 0,
                    b: 149,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 149,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 149,
                    V: -1,
                    r: 2
                }, _MW, _MW, _MWWF, _WF, _WF, _WF, _WF, _MWWF, _EMP, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 1
                }, {
                    v: 67,
                    b: 71,
                    V: 23,
                    r: 3
                }, _SWLF, _SWLF, _SWWF, _SWWF, _SWWF, _SWWF, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 2
                }, _SWWF, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 3
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 140,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 69,
                    V: -1,
                    r: 1
                }],
                [{
                    v: 0,
                    b: 71,
                    V: 24,
                    r: 1
                }, _MWLF, _LF, {
                    v: 67,
                    b: 70,
                    V: -1,
                    r: 3
                }, {
                    v: 67,
                    b: 151,
                    V: -1,
                    r: 3
                }, {
                    v: 67,
                    b: 151,
                    V: -1,
                    r: 3
                }, {
                    v: 67,
                    b: 151,
                    V: -1,
                    r: 3
                }, {
                    v: 67,
                    b: 142,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 146,
                    V: -1,
                    r: 1
                }, {
                    v: 62,
                    b: 150,
                    V: -1,
                    r: 1
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 10,
                    r: 3
                }, {
                    v: 62,
                    b: 71,
                    V: 7,
                    r: 3
                }, _WF, {
                    v: 62,
                    b: 32,
                    V: -1,
                    r: 3
                }, _EMP, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, {
                    v: 0,
                    b: 69,
                    V: -1,
                    r: 2
                }, _SW, {
                    v: 62,
                    b: 71,
                    V: 14,
                    r: 0
                }, {
                    v: 62,
                    b: 71,
                    V: 5,
                    r: 0
                }, _WF, _WF, _WF, _WF, _SWWF, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 3
                }, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }, _EMP, _LF, {
                    v: 67,
                    b: 71,
                    V: 45,
                    r: 0
                }, {
                    v: 67,
                    b: 71,
                    V: 45,
                    r: 0
                }, {
                    v: 67,
                    b: 151,
                    V: -1,
                    r: 1
                }, _LF, _LF, {
                    v: 67,
                    b: 71,
                    V: 24,
                    r: 1
                }],
                [_EMP, _MWLF, _LF, {
                    v: 67,
                    b: 70,
                    V: -1,
                    r: 3
                }, {
                    v: 67,
                    b: 70,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 70,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 70,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 140,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 142,
                    V: -1,
                    r: 3
                }, {
                    v: 62,
                    b: 149,
                    V: -1,
                    r: 1
                }, {
                    v: 62,
                    b: 144,
                    V: -1,
                    r: 0
                }, _WF, {
                    v: 62,
                    b: 71,
                    V: 7,
                    r: 3
                }, _WF, {
                    v: 62,
                    b: 32,
                    V: -1,
                    r: 3
                }, _EMP, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, _EMP, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 0
                }, _SWWF, _WF, _WF, _WF, _WF, _WF, {
                    v: 62,
                    b: 71,
                    V: 13,
                    r: 2
                }, _SWWF, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }],
                [{
                    v: 0,
                    b: 71,
                    V: 17,
                    r: 1
                }, _MWLF, _LF, _LF, {
                    v: 67,
                    b: 71,
                    V: 3,
                    r: 0
                }, {
                    v: 67,
                    b: 148,
                    V: -1,
                    r: 3
                }, _MWLF, {
                    v: 67,
                    b: 146,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 147,
                    V: -1,
                    r: 3
                }, {
                    v: 62,
                    b: 149,
                    V: -1,
                    r: 1
                }, {
                    v: 62,
                    b: 144,
                    V: -1,
                    r: 0
                }, _WF, _WF, _WF, _MWWF, _EMP, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, _EMP, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 0
                }, _SWWF, {
                    v: 62,
                    b: 71,
                    V: 12,
                    r: 3
                }, {
                    v: 62,
                    b: 71,
                    V: 23,
                    r: 3
                }, _WF, _WF, {
                    v: 62,
                    b: 71,
                    V: 10,
                    r: 3
                }, {
                    v: 62,
                    b: 71,
                    V: 9,
                    r: 1
                }, _SWWF, {
                    v: 0,
                    b: 71,
                    V: 17,
                    r: 3
                }, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }],
                [{
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 1
                }, _MWLF, _LF, _WF, _WF, {
                    v: 67,
                    b: 146,
                    V: -1,
                    r: 0
                }, _MWLF, {
                    v: 67,
                    b: 142,
                    V: -1,
                    r: 3
                }, {
                    v: 67,
                    b: 142,
                    V: -1,
                    r: 1
                }, _MW, {
                    v: 62,
                    b: 144,
                    V: -1,
                    r: 0
                }, _WF, {
                    v: 62,
                    b: 144,
                    V: -1,
                    r: 0
                }, {
                    v: 62,
                    b: 144,
                    V: -1,
                    r: 0
                }, _MWWF, _EMP, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, _EMP, _EMP, _SWWF, _SWWF, _SWWF, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 0
                }, {
                    v: 62,
                    b: 31,
                    V: -1,
                    r: 0
                }, _SWWF, _SWWF, _SWWF, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 23,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 22,
                    r: 0
                }],
                [_EMP, _MWLF, _LF, _WF, _WF, {
                    v: 67,
                    b: 71,
                    V: 10,
                    r: 0
                }, _MWLF, {
                    v: 67,
                    b: 71,
                    V: 14,
                    r: 3
                }, {
                    v: 67,
                    b: 140,
                    V: -1,
                    r: 0
                }, _MWWF, {
                    v: 62,
                    b: 149,
                    V: -1,
                    r: 0
                }, _MWWF, {
                    v: 62,
                    b: 149,
                    V: -1,
                    r: 0
                }, {
                    v: 62,
                    b: 149,
                    V: -1,
                    r: 0
                }, _MWWF, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 1
                }, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 71,
                    V: 24,
                    r: 1
                }, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 30,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 31,
                    r: 0
                }],
                [_EMP, _MWLF, {
                    v: 67,
                    b: 71,
                    V: 36,
                    r: 2
                }, {
                    v: 67,
                    b: 151,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 71,
                    V: 12,
                    r: 3
                }, {
                    v: 67,
                    b: 71,
                    V: 9,
                    r: 2
                }, _MWLF, {
                    v: 67,
                    b: 71,
                    V: 16,
                    r: 2
                }, {
                    v: 67,
                    b: 140,
                    V: -1,
                    r: 2
                }, {
                    v: 67,
                    b: 71,
                    V: 17,
                    r: 3
                }, {
                    v: 67,
                    b: 147,
                    V: -1,
                    r: 2
                }, {
                    v: 67,
                    b: 142,
                    V: -1,
                    r: 0
                }, {
                    v: 67,
                    b: 146,
                    V: -1,
                    r: 3
                }, {
                    v: 67,
                    b: 142,
                    V: -1,
                    r: 2
                }, _MW, _EMP, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }],
                [_EMP, _MWLF, _MWLF, {
                    v: 67,
                    b: 150,
                    V: -1,
                    r: 2
                }, _MWLF, _MWLF, _MWLF, {
                    v: 67,
                    b: 71,
                    V: 23,
                    r: 2
                }, {
                    v: 67,
                    b: 142,
                    V: -1,
                    r: 3
                }, {
                    v: 67,
                    b: 140,
                    V: -1,
                    r: 3
                }, {
                    v: 67,
                    b: 146,
                    V: -1,
                    r: 3
                }, {
                    v: 67,
                    b: 142,
                    V: -1,
                    r: 2
                }, _LF, {
                    v: 67,
                    b: 71,
                    V: 23,
                    r: 2
                }, _MW, {
                    v: 0,
                    b: 71,
                    V: 24,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }],
                [_EMP, _EMP, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 2
                }, {
                    v: 0,
                    b: 71,
                    V: 16,
                    r: 1
                }, {
                    v: 0,
                    b: 71,
                    V: 17,
                    r: 1
                }, {
                    v: 0,
                    b: 71,
                    V: 26,
                    r: 1
                }, _MW, _MW, _MW, _MW, _MW, _MW, _MW, _MW, _MW, _EMP, {
                    v: 0,
                    b: 86,
                    V: 14,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 12,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 6,
                    r: 0
                }],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, {
                    v: 0,
                    b: 86,
                    V: 40,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 1,
                    r: 0
                }, {
                    v: 0,
                    b: 86,
                    V: 41,
                    r: 0
                }]
            ]
        };
        HOUSE[HOUSEID.__BUNKER0__] = {
            width: 0,
            height: 0,
            radiation: 0,
            building: [
                [_EMP],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _SC, _SC, _SC, _EMP, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC],
                [_EMP, _EMP, _EMP, _EMP, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC],
                [_EMP, _EMP, _EMP, _EMP, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC],
                [_EMP, _EMP, _EMP, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC],
                [_EMP, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC],
                [_EMP, _SC, _SC, _SC, _SC, _SC, _SC, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _EMP, _SC, _SC, _SC, _SC, _SC, _SC, _SC],
                [_EMP, _SC, _SC, _SC, _EMP, _EMP, _EMP, _EMP, _SC, _BWTF, _BWTF, {
                    v: 85,
                    b: 52,
                    V: -1,
                    r: 2
                }, _BWTF, _BWTF, _EMP, _EMP, _SC, _SC, _SC, _SC, _SC, _SC, _SC],
                [_EMP, _EMP, _EMP, _EMP, _EMP, _SC, _SC, _SC, _SC, _BWTF, _TF, _TF, _TF, _BWTF, _SC, _EMP, _EMP, _SC, _SC, _SC, _SC, _SC, _SC],
                [_EMP, _EMP, _SC, _SC, _SC, _SC, _BWTF, _BWTF, _BWTF, _BWTF, _TF, _TF, _TF, _BWTF, _SC, _SC, _EMP, _SC, _SC, _SC, _SC, _SC],
                [_EMP, _SC, _SC, _SC, _SC, _SC, _BWTF, {
                    v: 85,
                    b: 71,
                    V: 9,
                    r: 0
                }, {
                    v: 85,
                    b: 71,
                    V: 58,
                    r: 0
                }, _BWTF, {
                    v: 85,
                    b: 71,
                    V: 33,
                    r: 3
                }, _TF, {
                    v: 85,
                    b: 71,
                    V: 33,
                    r: 3
                }, _BWTF, _SC, _SC, _EMP, _SC, _SC, _SC, _SC, _SC, _SC],
                [_EMP, _SC, _SC, _SC, _SC, _SC, _BWTF, {
                    v: 85,
                    b: 71,
                    V: 10,
                    r: 2
                }, _TF, _BWTF, _BWTF, _SF, _BWSF, _BWSF, _BW, _SC, _EMP, _EMP, _SC, _SC, _SC, _SC, _SC, _SC],
                [_EMP, _SC, _SC, _SC, _SC, _SC, _BWTF, _TF, _TF, _SF, _SF, _SF, _SF, {
                    v: 84,
                    b: 71,
                    V: 51,
                    r: 1
                }, _BWSF, _SC, _SC, _EMP, _EMP, _SC, _SC, _SC, _SC, _SC],
                [_EMP, _SC, _SC, _SC, _SC, _BWTF, _BWTF, _BWTF, _BWTF, _BWTF, _SF, _SF, _SF, _SF, _BWSF, _BW, _SC, _SC, _EMP, _SC, _SC, _SC, _SC, _SC],
                [_EMP, _SC, _SC, _SC, _SC, _BWTF, _SF, _SF, _SF, _BWTF, _BWTF, _SF, _SF, _SF, _BWSF, _BWTF, _BWTF, _SC, _EMP, _SC, _SC, _SC, _SC],
                [_EMP, _SC, _SC, _SC, _SC, _BWTF, _SF, _BWTF, _SF, _SF, _SF, _SF, _BWTF, _TF, _TF, {
                    v: 85,
                    b: 71,
                    V: 55,
                    r: 2
                }, _BWTF, _SC, _EMP, _SC, _SC, _SC, _SC],
                [_EMP, _SC, _SC, _SC, _SC, _BWTF, _SF, _BWTF, _BWTF, _BWTF, _BWTF, _SF, _BWTF, {
                    v: 85,
                    b: 71,
                    V: 28,
                    r: 3
                }, _TF, {
                    v: 85,
                    b: 71,
                    V: 21,
                    r: 1
                }, _BWTF, _SC, _EMP, _EMP, _SC, _SC],
                [_EMP, _SC, _SC, _SC, _SC, _BWTF, _TF, {
                    v: 85,
                    b: 71,
                    V: 23,
                    r: 1
                }, {
                    v: 85,
                    b: 71,
                    V: 53,
                    r: 3
                }, {
                    v: 85,
                    b: 71,
                    V: 56,
                    r: 2
                }, _BWTF, _SF, _BWTF, _BWTF, _BWTF, _BWTF, _BWTF, _SC, _EMP, _EMP, _SC, _SC, _SC],
                [_EMP, _EMP, _EMP, _SC, _SC, _BWTF, _TF, _TF, _TF, {
                    v: 85,
                    b: 71,
                    V: 53,
                    r: 2
                }, _BWTF, _SF, _SF, _TF, {
                    v: 85,
                    b: 71,
                    V: 51,
                    r: 0
                }, {
                    v: 85,
                    b: 71,
                    V: 48,
                    r: 0
                }, _BWTF, _SC, _SC],
                [_EMP, _SC, _SC, _SC, _SC, _BWTF, _TF, _TF, _TF, _TF, _BWTF, _BWTF, _BWTF, _TF, _TF, _TF, _BWTF, _SC, _SC, _SC],
                [_EMP, _SC, _SC, _SC, _SC, _BWTF, {
                    v: 85,
                    b: 71,
                    V: 20,
                    r: 3
                }, {
                    v: 85,
                    b: 71,
                    V: 11,
                    r: 2
                }, {
                    v: 85,
                    b: 71,
                    V: 49,
                    r: 3
                }, _TF, {
                    v: 85,
                    b: 71,
                    V: 54,
                    r: 2
                }, _BWTF, _BWTF, {
                    v: 85,
                    b: 71,
                    V: 48,
                    r: 2
                }, {
                    v: 85,
                    b: 71,
                    V: 50,
                    r: 2
                }, {
                    v: 85,
                    b: 71,
                    V: 49,
                    r: 3
                }, _BWTF, _SC, _SC, _SC, _SC, _SC, _SC],
                [_EMP, _EMP, _SC, _SC, _SC, _BWTF, _BWTF, _BWTF, _BWTF, _BWTF, _BWTF, _BWTF, _BWTF, _BWTF, _BWTF, _BWTF, _BWTF, _SC, _SC, _SC, _SC, _SC, _SC],
                [_EMP, _EMP, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC],
                [_EMP, _EMP, _EMP, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC],
                [_EMP, _EMP, _EMP, _EMP, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC],
                [_EMP, _EMP, _EMP, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC],
                [_EMP, _EMP, _EMP, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC, _SC],
                [_EMP, _EMP, _EMP, _EMP, _SC, _SC, _SC, _EMP, _EMP, _EMP, _EMP, _SC, _SC, _SC, _SC, _SC]
            ]
        };
    }
} catch (error) {};
for (var i = 0; i < HOUSE.length; i++) {
    var house = HOUSE[i];
    var housePlan = HOUSE[i].building;
    house.height = housePlan.length;
    for (var j = 0; j < housePlan.length; j++)
        house.width = window.Math.max(housePlan[j].length, house.width);
}
var AREASTOITEM = [];
AREASTOITEM[AREAS.firepart] = IID.campfire;
AREASTOITEM[AREAS.bbq] = IID.campfirebbq;
AREASTOITEM[AREAS.workbench] = IID.workbench;
AREASTOITEM[AREAS.researchbench] = IID.researchbench;
AREASTOITEM[AREAS.teslabench] = IID.teslabench;
AREASTOITEM[AREAS.smelter] = IID.smelter;
AREASTOITEM[AREAS.weavingmachine] = IID.weavingmachine;
AREASTOITEM[AREAS.composter] = IID.composter;
AREASTOITEM[AREAS.agitator] = IID.agitator;
AREASTOITEM[AREAS.extractor] = IID.extractor;

var INVENTORY2  = null;
var ENTITIES2   = null;
var PARTICLES2  = null;
var LOOT2       = null;
var RESOURCES2  = null;
var LIGHTFIRE2  = null;
var AI2         = null;
var GROUND      = "#\x33\x38\x35\x31\x33\x44";
var GROUND2     = "#\x30\x42\x31\x44\x32\x33";

var BRKIT = [{
    id: IID.stone,
    amount: 50,
    life: 255
}, {
    id: IID.wood,
    amount: 100,
    life: 255
}, {
    id: IID.workbench,
    amount: 1,
    life: 255
}];
var KIT = [];
COUNTER = 0;
KIT[COUNTER++] = [{
    id: IID.hachet,
    amount: 1,
    life: 255
}, {
    id: IID.stone,
    amount: 20,
    life: 255
}, {
    id: IID.wood,
    amount: 40,
    life: 255
}, {
    id: IID.orange,
    amount: 1,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.hachet,
    amount: 1,
    life: 255
}, {
    id: IID.stone,
    amount: 20,
    life: 255
}, {
    id: IID.wood,
    amount: 40,
    life: 255
}, {
    id: IID.orange,
    amount: 3,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.hachet,
    amount: 1,
    life: 255
}, {
    id: IID.stone,
    amount: 30,
    life: 255
}, {
    id: IID.wood,
    amount: 50,
    life: 255
}, {
    id: IID.campfire,
    amount: 1,
    life: 255
}, {
    id: IID.orange,
    amount: 4,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.hachet,
    amount: 1,
    life: 255
}, {
    id: IID.stone,
    amount: 30,
    life: 255
}, {
    id: IID.wood,
    amount: 60,
    life: 255
}, {
    id: IID.campfire,
    amount: 1,
    life: 255
}, {
    id: IID.workbench,
    amount: 1,
    life: 255
}, {
    id: IID.orange,
    amount: 5,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.hachet,
    amount: 1,
    life: 255
}, {
    id: IID.stone,
    amount: 40,
    life: 255
}, {
    id: IID.wood,
    amount: 90,
    life: 255
}, {
    id: IID.campfire,
    amount: 1,
    life: 255
}, {
    id: IID.workbench,
    amount: 1,
    life: 255
}, {
    id: IID.rawsteak,
    amount: 1,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.hachet,
    amount: 1,
    life: 255
}, {
    id: IID.stone,
    amount: 40,
    life: 255
}, {
    id: IID.wood,
    amount: 150,
    life: 255
}, {
    id: IID.campfire,
    amount: 1,
    life: 255
}, {
    id: IID.workbench,
    amount: 1,
    life: 255
}, {
    id: IID.rawsteak,
    amount: 1,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.hachet,
    amount: 1,
    life: 255
}, {
    id: IID.stonepickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.campfire,
    amount: 1,
    life: 255
}, {
    id: IID.workbench,
    amount: 1,
    life: 255
}, {
    id: IID.rawsteak,
    amount: 2,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.hachet,
    amount: 1,
    life: 255
}, {
    id: IID.stonepickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.campfire,
    amount: 1,
    life: 255
}, {
    id: IID.steel,
    amount: 6,
    life: 255
}, {
    id: IID.workbench,
    amount: 1,
    life: 255
}, {
    id: IID.rawsteak,
    amount: 2,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.hachet,
    amount: 1,
    life: 255
}, {
    id: IID.stonepickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.campfirebbq,
    amount: 1,
    life: 255
}, {
    id: IID.spear,
    amount: 1,
    life: 255
}, {
    id: IID.workbench,
    amount: 1,
    life: 255
}, {
    id: IID.rawsteak,
    amount: 3,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.hachet,
    amount: 1,
    life: 255
}, {
    id: IID.stonepickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.campfirebbq,
    amount: 1,
    life: 255
}, {
    id: IID.bow,
    amount: 1,
    life: 255
}, {
    id: IID.woodarrow,
    amount: 20,
    life: 255
}, {
    id: IID.workbench,
    amount: 1,
    life: 255
}, {
    id: IID.rawsteak,
    amount: 4,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.hachet,
    amount: 1,
    life: 255
}, {
    id: IID.stonepickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.campfirebbq,
    amount: 1,
    life: 255
}, {
    id: IID.woodenwall,
    amount: 10,
    life: 255
}, {
    id: IID.wooddoor,
    amount: 2,
    life: 255
}, {
    id: IID.workbench,
    amount: 1,
    life: 255
}, {
    id: IID.rawsteak,
    amount: 4,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.hachet,
    amount: 1,
    life: 255
}, {
    id: IID.stonepickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.campfirebbq,
    amount: 1,
    life: 255
}, {
    id: IID.woodenwall,
    amount: 16,
    life: 255
}, {
    id: IID.stonedoor,
    amount: 2,
    life: 255
}, {
    id: IID.workbench,
    amount: 2,
    life: 255
}, {
    id: IID.rawsteak,
    amount: 4,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.hachet,
    amount: 1,
    life: 255
}, {
    id: IID.stonepickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.campfirebbq,
    amount: 1,
    life: 255
}, {
    id: IID.stonewall,
    amount: 14,
    life: 255
}, {
    id: IID.stonedoor,
    amount: 2,
    life: 255
}, {
    id: IID.workbench,
    amount: 2,
    life: 255
}, {
    id: IID.rawsteak,
    amount: 4,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.hachet,
    amount: 1,
    life: 255
}, {
    id: IID.stonepickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.campfirebbq,
    amount: 1,
    life: 255
}, {
    id: IID.landmine,
    amount: 1,
    life: 255
}, {
    id: IID.stonewall,
    amount: 14,
    life: 255
}, {
    id: IID.stonedoor,
    amount: 2,
    life: 255
}, {
    id: IID.workbench,
    amount: 2,
    life: 255
}, {
    id: IID.rawsteak,
    amount: 4,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.hachet,
    amount: 1,
    life: 255
}, {
    id: IID.stonepickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.campfirebbq,
    amount: 1,
    life: 255
}, {
    id: IID.metalhelmet,
    amount: 1,
    life: 255
}, {
    id: IID.stonewall,
    amount: 14,
    life: 255
}, {
    id: IID.stonedoor,
    amount: 2,
    life: 255
}, {
    id: IID.workbench,
    amount: 2,
    life: 255
}, {
    id: IID.rawsteak,
    amount: 4,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.hachet,
    amount: 1,
    life: 255
}, {
    id: IID.stonepickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.campfirebbq,
    amount: 1,
    life: 255
}, {
    id: IID.stonewall,
    amount: 16,
    life: 255
}, {
    id: IID.stonedoor,
    amount: 2,
    life: 255
}, {
    id: IID.chest,
    amount: 1,
    life: 255
}, {
    id: IID.workbench,
    amount: 2,
    life: 255
}, {
    id: IID.rawsteak,
    amount: 4,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.hachet,
    amount: 1,
    life: 255
}, {
    id: IID.steelpickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.campfirebbq,
    amount: 1,
    life: 255
}, {
    id: IID.stonewall,
    amount: 16,
    life: 255
}, {
    id: IID.stonedoor,
    amount: 2,
    life: 255
}, {
    id: IID.chest,
    amount: 1,
    life: 255
}, {
    id: IID.workbench,
    amount: 2,
    life: 255
}, {
    id: IID.rawsteak,
    amount: 4,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.hachet,
    amount: 1,
    life: 255
}, {
    id: IID.steelpickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.campfirebbq,
    amount: 1,
    life: 255
}, {
    id: IID.stonewall,
    amount: 16,
    life: 255
}, {
    id: IID.stonedoor,
    amount: 2,
    life: 255
}, {
    id: IID.chest,
    amount: 1,
    life: 255
}, {
    id: IID.researchbench,
    amount: 1,
    life: 255
}, {
    id: IID.rawsteak,
    amount: 4,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.stoneaxe,
    amount: 1,
    life: 255
}, {
    id: IID.steelpickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.campfirebbq,
    amount: 1,
    life: 255
}, {
    id: IID.stonewall,
    amount: 16,
    life: 255
}, {
    id: IID.stonedoor,
    amount: 2,
    life: 255
}, {
    id: IID.chest,
    amount: 1,
    life: 255
}, {
    id: IID.researchbench,
    amount: 1,
    life: 255
}, {
    id: IID.rawsteak,
    amount: 4,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.stoneaxe,
    amount: 1,
    life: 255
}, {
    id: IID.steelpickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.campfirebbq,
    amount: 2,
    life: 255
}, {
    id: IID.stonewall,
    amount: 20,
    life: 255
}, {
    id: IID.stonedoor,
    amount: 4,
    life: 255
}, {
    id: IID.chest,
    amount: 2,
    life: 255
}, {
    id: IID.researchbench,
    amount: 1,
    life: 255
}, {
    id: IID.rawsteak,
    amount: 4,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.stoneaxe,
    amount: 1,
    life: 255
}, {
    id: IID.steelpickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.campfirebbq,
    amount: 2,
    life: 255
}, {
    id: IID.stonewall,
    amount: 26,
    life: 255
}, {
    id: IID.stonedoor,
    amount: 6,
    life: 255
}, {
    id: IID.chest,
    amount: 3,
    life: 255
}, {
    id: IID.researchbench,
    amount: 1,
    life: 255
}, {
    id: IID.seedorange,
    amount: 8,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.stoneaxe,
    amount: 1,
    life: 255
}, {
    id: IID.steelpickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.headscarf,
    amount: 1,
    life: 255
}, {
    id: IID.stonewall,
    amount: 26,
    life: 255
}, {
    id: IID.stonedoor,
    amount: 6,
    life: 255
}, {
    id: IID.chest,
    amount: 3,
    life: 255
}, {
    id: IID.researchbench,
    amount: 1,
    life: 255
}, {
    id: IID.seedorange,
    amount: 8,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.stoneaxe,
    amount: 1,
    life: 255
}, {
    id: IID.steelpickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.headscarf,
    amount: 1,
    life: 255
}, {
    id: IID.stonewall,
    amount: 26,
    life: 255
}, {
    id: IID.stonedoor,
    amount: 6,
    life: 255
}, {
    id: IID.chest,
    amount: 3,
    life: 255
}, {
    id: IID.pistol,
    amount: 1,
    life: 20
}, {
    id: IID.researchbench,
    amount: 1,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.sulfurpickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.stoneaxe,
    amount: 1,
    life: 255
}, {
    id: IID.headscarf,
    amount: 1,
    life: 255
}, {
    id: IID.stonewall,
    amount: 26,
    life: 255
}, {
    id: IID.stonedoor,
    amount: 6,
    life: 255
}, {
    id: IID.chest,
    amount: 3,
    life: 255
}, {
    id: IID.pistol,
    amount: 1,
    life: 20
}, {
    id: IID.researchbench,
    amount: 1,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.sulfurpickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.stoneaxe,
    amount: 1,
    life: 255
}, {
    id: IID.headscarf,
    amount: 1,
    life: 255
}, {
    id: IID.stonewall,
    amount: 26,
    life: 255
}, {
    id: IID.smelter,
    amount: 1,
    life: 255
}, {
    id: IID.chest,
    amount: 3,
    life: 255
}, {
    id: IID.pistol,
    amount: 1,
    life: 20
}, {
    id: IID.researchbench,
    amount: 1,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.sulfurpickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.sulfuraxe,
    amount: 1,
    life: 255
}, {
    id: IID.headscarf,
    amount: 1,
    life: 255
}, {
    id: IID.stonewall,
    amount: 26,
    life: 255
}, {
    id: IID.smelter,
    amount: 1,
    life: 255
}, {
    id: IID.chest,
    amount: 3,
    life: 255
}, {
    id: IID.pistol,
    amount: 1,
    life: 20
}, {
    id: IID.researchbench,
    amount: 1,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.sulfurpickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.sulfuraxe,
    amount: 1,
    life: 255
}, {
    id: IID.chapka,
    amount: 1,
    life: 255
}, {
    id: IID.stonewall,
    amount: 26,
    life: 255
}, {
    id: IID.smelter,
    amount: 1,
    life: 255
}, {
    id: IID.chest,
    amount: 3,
    life: 255
}, {
    id: IID.pistol,
    amount: 1,
    life: 20
}, {
    id: IID.researchbench,
    amount: 1,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.sulfurpickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.sulfuraxe,
    amount: 1,
    life: 255
}, {
    id: IID.chapka,
    amount: 1,
    life: 255
}, {
    id: IID.steelwall,
    amount: 14,
    life: 255
}, {
    id: IID.smelter,
    amount: 1,
    life: 255
}, {
    id: IID.chest,
    amount: 3,
    life: 255
}, {
    id: IID.pistol,
    amount: 1,
    life: 20
}, {
    id: IID.researchbench,
    amount: 1,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.sulfurpickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.sulfuraxe,
    amount: 1,
    life: 255
}, {
    id: IID.chapka,
    amount: 1,
    life: 255
}, {
    id: IID.steelwall,
    amount: 14,
    life: 255
}, {
    id: IID.smelter,
    amount: 1,
    life: 255
}, {
    id: IID.chest,
    amount: 3,
    life: 255
}, {
    id: IID.deserteagle,
    amount: 1,
    life: 7
}, {
    id: IID.researchbench,
    amount: 1,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.sulfurpickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.sulfuraxe,
    amount: 1,
    life: 255
}, {
    id: IID.chapka,
    amount: 1,
    life: 255
}, {
    id: IID.steelwall,
    amount: 14,
    life: 255
}, {
    id: IID.smelter,
    amount: 1,
    life: 255
}, {
    id: IID.dynamite,
    amount: 6,
    life: 255
}, {
    id: IID.deserteagle,
    amount: 1,
    life: 7
}, {
    id: IID.researchbench,
    amount: 1,
    life: 255
}];
KIT[COUNTER++] = [{
    id: IID.sulfurpickaxe,
    amount: 1,
    life: 255
}, {
    id: IID.sulfuraxe,
    amount: 1,
    life: 255
}, {
    id: IID.chapka,
    amount: 1,
    life: 255
}, {
    id: IID.steelwall,
    amount: 20,
    life: 255
}, {
    id: IID.smelter,
    amount: 1,
    life: 255
}, {
    id: IID.landmine,
    amount: 6,
    life: 255
}, {
    id: IID.deserteagle,
    amount: 1,
    life: 7
}, {
    id: IID.researchbench,
    amount: 1,
    life: 255
}];

COUNTER = 0;
var MODE_AI = {
    __AGGRESSIVE__: COUNTER++,
    __REPAIR__:     COUNTER++
};

var AI = [];
AI[AIID.__NORMAL_GHOUL__] = {
    actionDelay: 700,
    actionImpactClient: 550,
    baseSpeed: 0.5,
    aggressive: 1,
    mode: MODE_AI.__AGGRESSIVE__,
    timeTrigger: ((2 * 8) * 60) * 1000,
    draw: Render.ghoul,
    breath: 0.05,
    armMove: 6,
    leftArm: {
        angle: 0,
        x: 28,
        y: -50,
        src: "img/day-ghoul-left-arm.png",
        W: {
            isLoaded: 0
        }
    },
    rightArm: {
        angle: 0,
        x: 28,
        y: 50,
        src: "img/day-ghoul-right-arm.png",
        W: {
            isLoaded: 0
        }
    },
    head: {
        src: "img/day-ghoul.png",
        W: {
            isLoaded: 0
        }
    },
    hurt: {
        src: "img/ghoul-hurt.png",
        W: {
            isLoaded: 0
        }
    },
    death: {
        src: "img/day-ghoul-death.png",
        W: {
            isLoaded: 0
        }
    },
    units: 0,
    unitsMax: 30,
    areaEffect: 0,
    radius: 38,
    life: 160,
    speed: [0.12, 0.22],
    speedRun: [0.14, 0.25],
    loot: [
        [IID.animalfat, 4, LOOTID.animalfat]
    ],
    light: 1,
    areaEffect: 0,
    explosion: 0,
    damageExplosion: 0,
    damageBuilding: 0,
    radiusDamage: 40,
    distDamage: 50,
    damage: [8, 20],
    knockback: 20,
    timelife: ((2 * 8) * 60) * 1000,
    score: 1200
};
AI[AIID.__FAST_GHOUL__] = {
    actionDelay: 300,
    actionImpactClient: 150,
    baseSpeed: 0.5,
    aggressive: 2,
    mode: MODE_AI.__AGGRESSIVE__,
    timeTrigger: (((2 * 2) * 8) * 60) * 1000,
    draw: Render.ghoul,
    breath: 0.05,
    armMove: 6,
    leftArm: {
        angle: 0,
        x: 28,
        y: -40,
        src: "img/day-ghoul3-left-arm.png",
        W: {
            isLoaded: 0
        }
    },
    rightArm: {
        angle: 0,
        x: 28,
        y: 40,
        src: "img/day-ghoul3-right-arm.png",
        W: {
            isLoaded: 0
        }
    },
    head: {
        src: "img/day-ghoul3.png",
        W: {
            isLoaded: 0
        }
    },
    hurt: {
        src: "img/ghoul3-hurt.png",
        W: {
            isLoaded: 0
        }
    },
    death: {
        src: "img/day-ghoul3-death.png",
        W: {
            isLoaded: 0
        }
    },
    units: 0,
    unitsMax: 18,
    areaEffect: 0,
    radius: 38,
    life: 100,
    speed: [0.18, 0.28],
    speedRun: [0.22, 0.38],
    loot: [
        [IID.ghoulblood, 4, LOOTID.ghoulblood]
    ],
    light: 1,
    areaEffect: 0,
    explosion: 0,
    damageExplosion: 0,
    damageBuilding: 0,
    radiusDamage: 40,
    distDamage: 50,
    damage: [7, 14],
    knockback: 20,
    timelife: ((2 * 8) * 60) * 1000,
    score: 1000
};
AI[AIID.__EXPLOSIVE_GHOUL__] = {
    actionDelay: 500,
    actionImpactClient: 350,
    baseSpeed: 0.5,
    aggressive: 4,
    mode: MODE_AI.__AGGRESSIVE__,
    timeTrigger: (((3 * 2) * 8) * 60) * 1000,
    draw: Render.ghoul,
    breath: 0.05,
    armMove: 6,
    leftArm: {
        angle: 0,
        x: 28,
        y: -48,
        src: "img/day-ghoul4-left-arm.png",
        W: {
            isLoaded: 0
        }
    },
    rightArm: {
        angle: 0,
        x: 28,
        y: 48,
        src: "img/day-ghoul4-right-arm.png",
        W: {
            isLoaded: 0
        }
    },
    head: {
        src: "img/day-ghoul4.png",
        W: {
            isLoaded: 0
        }
    },
    hurt: {
        src: "img/ghoul4-hurt.png",
        W: {
            isLoaded: 0
        }
    },
    death: {
        src: "img/day-ghoul4-death.png",
        W: {
            isLoaded: 0
        }
    },
    units: 0,
    unitsMax: 14,
    areaEffect: 0,
    radius: 38,
    life: 100,
    speed: [0.12, 0.23],
    speedRun: [0.14, 0.26],
    loot: [
        [IID.sulfur, 4, LOOTID.sulfur],
        [IID.animalfat, 4, LOOTID.animalfat],
        [IID.junk, 4, LOOTID.junk]
    ],
    light: 1,
    areaEffect: 0,
    explosion: 1,
    damageExplosion: 120,
    damageBuilding: 500,
    radiusDamage: 40,
    distDamage: 50,
    damage: [6, 20],
    knockback: 20,
    timelife: ((2 * 8) * 60) * 1000,
    score: 500
};
AI[AIID.__RADIOACTIVE_GHOUL__] = {
    actionDelay: 500,
    actionImpactClient: 350,
    baseSpeed: 0.5,
    aggressive: 8,
    mode: MODE_AI.__AGGRESSIVE__,
    timeTrigger: (((4 * 2) * 8) * 60) * 1000,
    draw: Render.ghoul,
    breath: 0.05,
    armMove: 6,
    leftArm: {
        angle: 0,
        x: 28,
        y: -40,
        src: "img/day-ghoul2-left-arm.png",
        W: {
            isLoaded: 0
        }
    },
    rightArm: {
        angle: 0,
        x: 28,
        y: 40,
        src: "img/day-ghoul2-right-arm.png",
        W: {
            isLoaded: 0
        }
    },
    head: {
        src: "img/day-ghoul2.png",
        W: {
            isLoaded: 0
        }
    },
    hurt: {
        src: "img/ghoul2-hurt.png",
        W: {
            isLoaded: 0
        }
    },
    death: {
        src: "img/day-ghoul2-death.png",
        W: {
            isLoaded: 0
        }
    },
    units: 0,
    unitsMax: 10,
    areaEffect: 0,
    radius: 38,
    life: 160,
    speed: [0.12, 0.23],
    speedRun: [0.14, 0.26],
    loot: [
        [IID.uranium, 4, LOOTID.uranium]
    ],
    light: 1,
    areaEffect: __RADIATION__,
    explosion: 0,
    damageExplosion: 0,
    damageBuilding: 0,
    radiusDamage: 40,
    distDamage: 50,
    damage: [5, 15],
    knockback: 20,
    timelife: ((2 * 8) * 60) * 1000,
    score: 1500
};
AI[AIID.__ARMORED_GHOUL__] = {
    actionDelay: 700,
    actionImpactClient: 550,
    baseSpeed: 0.5,
    aggressive: 16,
    mode: MODE_AI.__AGGRESSIVE__,
    timeTrigger: (((5 * 2) * 8) * 60) * 1000,
    draw: Render.ghoul,
    breath: 0.05,
    armMove: 6,
    leftArm: {
        angle: 0,
        x: 28,
        y: -50,
        src: "img/day-ghoul1-left-arm.png",
        W: {
            isLoaded: 0
        }
    },
    rightArm: {
        angle: 0,
        x: 28,
        y: 50,
        src: "img/day-ghoul1-right-arm.png",
        W: {
            isLoaded: 0
        }
    },
    head: {
        src: "img/day-ghoul1.png",
        W: {
            isLoaded: 0
        }
    },
    hurt: {
        src: "img/ghoul1-hurt.png",
        W: {
            isLoaded: 0
        }
    },
    death: {
        src: "img/day-ghoul1-death.png",
        W: {
            isLoaded: 0
        }
    },
    units: 0,
    unitsMax: 14,
    areaEffect: 0,
    radius: 38,
    life: 800,
    speed: [0.11, 0.21],
    speedRun: [0.14, 0.24],
    loot: [
        [IID.alloys, 4, LOOTID.alloys],
        [IID.shapedmetal, 12, LOOTID.shapedmetal]
    ],
    light: 1,
    areaEffect: 0,
    explosion: 0,
    damageExplosion: 0,
    damageBuilding: 0,
    radiusDamage: 40,
    distDamage: 50,
    damage: [20, 50],
    knockback: 20,
    timelife: ((4 * 8) * 60) * 1000,
    score: 5000
};
AI[AIID.__PUMPKIN_GHOUL__] = {
    actionDelay: 700,
    actionImpactClient: 550,
    baseSpeed: 0.5,
    aggressive: 32,
    mode: MODE_AI.__AGGRESSIVE__,
    timeTrigger: ((2 * 8) * 60) * 1000,
    draw: Render.ghoul,
    breath: 0.05,
    armMove: 6,
    leftArm: {
        angle: 0,
        x: 28,
        y: -50,
        src: "img/day-ghoul5-left-arm.png",
        W: {
            isLoaded: 0
        }
    },
    rightArm: {
        angle: 0,
        x: 28,
        y: 50,
        src: "img/day-ghoul5-right-arm.png",
        W: {
            isLoaded: 0
        }
    },
    head: {
        src: "img/day-ghoul5.png",
        W: {
            isLoaded: 0
        }
    },
    hurt: {
        src: "img/ghoul5-hurt.png",
        W: {
            isLoaded: 0
        }
    },
    death: {
        src: "img/day-ghoul5-death.png",
        W: {
            isLoaded: 0
        }
    },
    units: 0,
    unitsMax: 0,
    areaEffect: 0,
    radius: 38,
    life: 160,
    speed: [0.04, 0.04],
    loot: [
        [IID.pumpkin, 4, LOOTID.pumpkin]
    ],
    light: 0,
    areaEffect: 0,
    explosion: 0,
    damageExplosion: 0,
    damageBuilding: 0,
    radiusDamage: 40,
    distDamage: 50,
    damage: [20, 30],
    knockback: 20,
    timelife: ((2 * 8) * 60) * 1000,
    score: 100
};
AI[AIID.__LAPABOT_REPAIR__] = {
    actionDelay: 700,
    actionImpactClient: 550,
    baseSpeed: 0.5,
    aggressive: 0,
    mode: MODE_AI.__REPAIR__,
    timeTrigger: 0,
    draw: Render.ghoul,
    breath: 0.05,
    armMove: 6,
    leftArm: {
        angle: 0,
        x: 28,
        y: -50,
        src: "img/day-lapabot-left-arm.png",
        W: {
            isLoaded: 0
        }
    },
    rightArm: {
        angle: 0,
        x: 28,
        y: 50,
        src: "img/day-lapabot-right-arm.png",
        W: {
            isLoaded: 0
        }
    },
    head: {
        src: "img/day-lapabot.png",
        W: {
            isLoaded: 0
        }
    },
    hurt: {
        src: "img/lapabot-hurt.png",
        W: {
            isLoaded: 0
        }
    },
    death: {
        src: "img/day-lapabot-death.png",
        W: {
            isLoaded: 0
        }
    },
    units: 0,
    unitsMax: 0,
    areaEffect: 0,
    radius: 38,
    life: 600,
    speed: [0.08, 0.08],
    loot: [
        [IID.shapedmetal, 4, LOOTID.shapedmetal]
    ],
    light: 0,
    areaEffect: 0,
    explosion: 0,
    damageExplosion: 0,
    damageBuilding: 0,
    radiusDamage: 40,
    distDamage: 50,
    damage: [30, 30],
    knockback: 20,
    timelife: ((2 * 8) * 60) * 1000,
    score: 100
};
AI[AIID.__HAL_BOT__] = {
    actionDelay: 550,
    actionImpactClient: 400,
    baseSpeed: 0.5,
    aggressive: 0,
    mode: MODE_AI.__AGGRESSIVE__,
    timeTrigger: 0,
    draw: Render.ghoul,
    breath: 0.05,
    armMove: 6,
    leftArm: {
        angle: 0,
        x: 8,
        y: -45,
        src: "img/day-hal-bot-left-arm.png",
        W: {
            isLoaded: 0
        }
    },
    rightArm: {
        angle: 0,
        x: 8,
        y: 45,
        src: "img/day-hal-bot-right-arm.png",
        W: {
            isLoaded: 0
        }
    },
    head: {
        src: "img/day-hal-bot.png",
        W: {
            isLoaded: 0
        }
    },
    hurt: {
        src: "img/hal-bot-hurt.png",
        W: {
            isLoaded: 0
        }
    },
    death: {
        src: "img/day-hal-bot-death.png",
        W: {
            isLoaded: 0
        }
    },
    units: 0,
    unitsMax: 0,
    areaEffect: 0,
    radius: 38,
    life: 800,
    speed: [0.12, 0.12],
    loot: [
        [IID.shapedmetal, 4, LOOTID.shapedmetal]
    ],
    light: 0,
    areaEffect: 0,
    explosion: 0,
    damageExplosion: 0,
    damageBuilding: 0,
    radiusDamage: 40,
    distDamage: 50,
    damage: [30, 30],
    knockback: 20,
    timelife: ((2 * 8) * 60) * 1000,
    score: 500
};
AI[AIID.__TESLA_BOT__] = {
    actionDelay: 700,
    actionImpactClient: 550,
    baseSpeed: 0.5,
    aggressive: 0,
    mode: MODE_AI.__AGGRESSIVE__,
    timeTrigger: 0,
    draw: Render.ghoul,
    breath: 0.05,
    armMove: 6,
    leftArm: {
        angle: 0,
        x: 18,
        y: -60,
        src: "img/day-tesla-bot-left-arm.png",
        W: {
            isLoaded: 0
        }
    },
    rightArm: {
        angle: 0,
        x: 18,
        y: 60,
        src: "img/day-tesla-bot-right-arm.png",
        W: {
            isLoaded: 0
        }
    },
    head: {
        src: "img/day-tesla-bot.png",
        W: {
            isLoaded: 0
        }
    },
    hurt: {
        src: "img/tesla-bot-hurt.png",
        W: {
            isLoaded: 0
        }
    },
    death: {
        src: "img/day-tesla-bot-death.png",
        W: {
            isLoaded: 0
        }
    },
    units: 0,
    unitsMax: 0,
    areaEffect: 0,
    radius: 38,
    life: 3000,
    speed: [0.1, 0.1],
    loot: [
        [IID.shapeduranium, 4, LOOTID.shapeduranium],
        [IID.alloys, 4, LOOTID.alloys]
    ],
    light: 0,
    areaEffect: 0,
    explosion: 1,
    damageExplosion: 100,
    damageBuilding: 100,
    radiusDamage: 40,
    distDamage: 50,
    damage: [80, 80],
    knockback: 40,
    timelife: ((2 * 8) * 60) * 1000,
    score: 3000
};
try {
    if (exports !== window.undefined) {
        exports.IID = IID;
        exports.FURNITUREID = FURNITUREID;
        exports.HOUSE = HOUSE;
        exports.HOUSEID = HOUSEID;
        exports.items = items;
        exports.LOOT = LOOT;
        exports.LOOTID = LOOTID;
        exports.object = object;
        exports.RESOURCES = RESOURCES;
        exports.AREAS = AREAS;
        exports.SKILLS = SKILLS;
        exports.KIT = KIT;
        exports.BRKIT = BRKIT;
        exports.AI = AI;
        exports.AIID = AIID;
        exports.BEHAVIOR = BEHAVIOR;
        for (var nMm = 0; nMm < 3; nMm++) {
            for (var i = 1; i < items.length; i++) {
                var IID = items[i];
                var recipe = IID.detail.recipe;
                if (recipe === window.undefined) continue;
                for (var j = 0; j < recipe.length; j++) {
                    var wwM = items[recipe[j][0]];
                    if (j === 0) IID.score = 0;
                    IID.score += wwM.score * recipe[j][1];
                    recipe[j][2] = wwM.loot;
                }
                IID.score = window.Math.floor(IID.score / 4);
            }
        }
        for (var i = 0; i < VV.length; i++) {
            var IID = VV[i];
            var recipe = IID.detail.recipe;
            if (recipe === window.undefined) continue;
            for (var j = 0; j < recipe.length; j++) {
                var wwM = items[recipe[j][0]];
                if (j === 0) IID.score = 0;
                IID.score += wwM.score * recipe[j][1];
                recipe[j][2] = wwM.loot;
            }
            IID.score = window.Math.floor(IID.score / 4);
        }
    }
} catch (error) {
    for (var i = 0; i < KARMA.length; i++) KARMA[i].W = CanvasUtils.loadImage(KARMA[i].src, KARMA[i].W);
    INVENTORY2 = window.JSON.parse(window.JSON.stringify(items));
    PARTICLES2 = window.JSON.parse(window.JSON.stringify(PARTICLES));
    LOOT2 = window.JSON.parse(window.JSON.stringify(LOOT));
    ENTITIES2 = window.JSON.parse(window.JSON.stringify(ENTITIES));
    RESOURCES2 = window.JSON.parse(window.JSON.stringify(RESOURCES));
    LIGHTFIRE2 = window.JSON.parse(window.JSON.stringify(LIGHTFIRE));
    AI2 = window.JSON.parse(window.JSON.stringify(AI));

    function replaceStringInObject(vNWwm, wnvNw, NvV, nWnNV) {
        for (var WmVNW in wnvNw) {
            var MmmVN = wnvNw[WmVNW];
            var nVW = vNWwm[WmVNW];
            if (nVW === window.undefined) {
                vNWwm[WmVNW] = MmmVN;
                continue;
            }
            if (typeof nVW === "object") replaceStringInObject(nVW, MmmVN, NvV, nWnNV);
            else if (typeof nVW === "string") vNWwm[WmVNW] = nVW.replace(NvV, nWnNV);
        }
    };
    replaceStringInObject(RESOURCES2, RESOURCES, "day", "night");
    replaceStringInObject(INVENTORY2, items, "day", "night");
    replaceStringInObject(PARTICLES2, PARTICLES, "day", "night");
    replaceStringInObject(LOOT2, LOOT, "day", "night");
    replaceStringInObject(ENTITIES2, ENTITIES, "day", "night");
    replaceStringInObject(LIGHTFIRE2, LIGHTFIRE, "day", "night");
    replaceStringInObject(AI2, AI, "day", "night");

    function updateClotheInfo(vNWwm) {
        for (var WmVNW in vNWwm) {
            var nVW = vNWwm[WmVNW];
            if ((typeof nVW === "object") && (nVW !== null)) {
                if (nVW.rad !== window.undefined) {
                    var wVn = ENTITIES[__ENTITIE_PLAYER__].clothes[nVW.idClothe];
                    wVn.rad = nVW.rad;
                    wVn.warm = nVW.warm;
                    wVn.def = nVW.def;
                    wVn = ENTITIES2[__ENTITIE_PLAYER__].clothes[nVW.idClothe];
                    wVn.rad = nVW.rad;
                    wVn.warm = nVW.warm;
                    wVn.def = nVW.def;
                } else updateClotheInfo(nVW);
            }
        }
    };
    updateClotheInfo(items);
}


var AudioManager = (function() {
    var wwwvv = [237225, 303931, 166687, 229213, 217292, 205860, 182041, 273065];
    var wMw = [];
    var WvwmM = window.Math.floor(window.Math.random() * wwwvv.length);
    var mvnmN = 0;
    var mWWVV = 0;
    var vmwnm = 0;
    var musicVolume = 0.45;
    var VNWVM = 0;
    var NNwwM = 0;
    AudioUtils.audio.end = new AudioUtils.Sound("audio/end.mp3", 0, true);
    AudioUtils.audio.title = new AudioUtils.Sound("audio/title.mp3", 0, true);
    AudioUtils.audio.geiger = new AudioUtils.Sound("audio/geiger.mp3", 0, true);
    AudioUtils.audio.NvWWW = new AudioUtils.Sound("audio/ambient1.mp3", 0, true);
    AudioUtils.audio.mWNVV = new AudioUtils.Sound("audio/ambient2.mp3", 0, true);
    AudioUtils.audio.MWvmM = new AudioUtils.Sound("audio/ambient3.mp3", 0, true);
    AudioUtils.audio.VWmmW = new AudioUtils.Sound("audio/ambient4.mp3", 0, true);
    AudioUtils.audio.wNWMw = new AudioUtils.Sound("audio/ambient5.mp3", 0, true);
    AudioUtils.audio.Nmwnw = new AudioUtils.Sound("audio/ambient6.mp3", 0, true);
    AudioUtils.audio.wnMvV = new AudioUtils.Sound("audio/ambient7.mp3", 0, true);
    AudioUtils.audio.MmmnV = new AudioUtils.Sound("audio/ambient8.mp3", 0, true);
    wMw.push(AudioUtils.audio.NvWWW);
    wMw.push(AudioUtils.audio.mWNVV);
    wMw.push(AudioUtils.audio.MWvmM);
    wMw.push(AudioUtils.audio.VWmmW);
    wMw.push(AudioUtils.audio.wNWMw);
    wMw.push(AudioUtils.audio.Nmwnw);
    wMw.push(AudioUtils.audio.wnMvV);
    wMw.push(AudioUtils.audio.MmmnV);
    AudioUtils._fx.open = new AudioUtils.Sound("audio/open.mp3", 1, false, 1);
    AudioUtils._fx.drag = new AudioUtils.Sound("audio/drag.mp3", 1, false, 1);
    AudioUtils._fx.play = new AudioUtils.Sound("audio/play.mp3", 1, false, 1);
    AudioUtils._fx.nwVvN = new AudioUtils.Sound("audio/skill.mp3", 1, false, 1);
    AudioUtils._fx.craft = new AudioUtils.Sound("audio/craft.mp3", 1, false, 1);
    AudioUtils._fx.button = new AudioUtils.Sound("audio/button.mp3", 1, false, 1);
    AudioUtils._fx.wWwnM = new AudioUtils.Sound("audio/throwLoot.mp3", 1, false, 1);
    AudioUtils._fx.nNwmw = new AudioUtils.Sound("audio/levelup.mp3", 1, false, 1);
    AudioUtils._fx.explosion = new AudioUtils.Sound("audio/explosion.mp3", 1, false, 1);
    AudioUtils._fx.NwMWW = new AudioUtils.Sound("audio/zipper-on.mp3", 0.7, false, 1);
    AudioUtils._fx.NwmVN = new AudioUtils.Sound("audio/zipper-off.mp3", 0.7, false, 1);
    AudioUtils._fx.WmnwN = [new AudioUtils.Sound("audio/eat-1s-0.mp3", 1, false, 1), new AudioUtils.Sound("audio/eat-1s-1.mp3", 1, false, 1), new AudioUtils.Sound("audio/eat-1s-2.mp3", 1, false, 1)];
    AudioUtils._fx.damage = [];
    for (var i = 1; i < SOUND.length; i++) AudioUtils._fx.damage[i] = new AudioUtils.Sound(SOUND[i], 1, false, 1);
    AudioUtils._fx.shot = [];
    var weapons = ENTITIES[__ENTITIE_PLAYER__].weapons;
    for (var i = 0; i < weapons.length; i++) {
        var weapon = weapons[i];
        if (weapon.sound === window.undefined) AudioUtils._fx.shot[i] = 0;
        else if (typeof weapon.sound === "number") AudioUtils._fx.shot[i] = weapon.sound;
        else {
            AudioUtils._fx.shot[i] = [];
            for (var j = 0; j < weapon.sound.length; j++) AudioUtils._fx.shot[i][j] = new AudioUtils.Sound(weapon.sound[j], 1, false, 1);
        }
    }
    if (AudioUtils.options.nNmMV === 1) {
        AudioUtils.loadSound(wMw[WvwmM]);
        AudioUtils.loadSound(AudioUtils.audio.title);
    }
    for (var i = 0; i < AudioUtils._fx.shot.length; i++) {
        var sound = AudioUtils._fx.shot[i];
        if (sound === 1) AudioUtils._fx.shot[i] = AudioUtils._fx.WmnwN;
    }
    if (AudioUtils.options.VWVWW === 1) {
        AudioUtils.loadSound(AudioUtils._fx.open);
        AudioUtils.loadSound(AudioUtils._fx.play);
        AudioUtils.loadSound(AudioUtils._fx.drag);
        AudioUtils.loadSound(AudioUtils._fx.nwVvN);
        AudioUtils.loadSound(AudioUtils._fx.craft);
        AudioUtils.loadSound(AudioUtils._fx.button);
        AudioUtils.loadSound(AudioUtils._fx.nNwmw);
        AudioUtils.loadSound(AudioUtils._fx.explosion);
        for (var i = 0; i < AudioUtils._fx.WmnwN.length; i++) AudioUtils.loadSound(AudioUtils._fx.WmnwN[i]);
        for (var i = 1; i < AudioUtils._fx.damage.length; i++) AudioUtils.loadSound(AudioUtils._fx.damage[i]);
        for (var i = 0; i < AudioUtils._fx.shot.length; i++) {
            var sound = AudioUtils._fx.shot[i];
            if (sound !== 0) {
                for (var j = 0; j < sound.length; j++) AudioUtils.loadSound(sound[j]);
            }
        }
    }

    function scheduler() {
        AudioUtils.playSound(AudioUtils.audio.title);
        AudioUtils.playSound(AudioUtils.audio.end);
        for (var i = 0; i < wMw.length; i++) AudioUtils.playSound(wMw[i]);
        if (AudioUtils.options.VWVWW === 1) {
            var wmNWn = AudioUtils.options.nNmMV;
            AudioUtils.options.nNmMV = 1;
            AudioUtils.playSound(AudioUtils.audio.geiger);
            AudioUtils.options.nNmMV = wmNWn;
        }
        if ((NNwwM !== AudioManager.geiger) && (mWWVV === 1)) {
            if (VNWVM === 0) {
                VNWVM = 1000;
                var dist = AudioManager.geiger - NNwwM;
                AudioUtils.fadeSound(AudioUtils.audio.geiger, 250, dist);
                NNwwM = AudioManager.geiger;
            }
            VNWVM = window.Math.max(0, VNWVM - delta);
        }
        if ((mvnmN === 0) && (mWWVV === 1)) {
            AudioUtils.fadeSound(wMw[WvwmM], 5000, -musicVolume);
            WvwmM = (WvwmM + 1) % wMw.length;
            mvnmN = wwwvv[WvwmM] - 5000;
            AudioUtils.fadeSound(wMw[WvwmM], 5000, musicVolume);
        }
        mvnmN = window.Math.max(0, mvnmN - delta);
    };

    function quitGame() {
        mWWVV = 0;
        vmwnm = 1;
        AudioUtils.fadeSound(AudioUtils.audio.geiger, 250, -NNwwM);
        NNwwM = 0;
        AudioManager.geiger = 0;
        AudioUtils.fadeSound(wMw[WvwmM], 500, -musicVolume);
        AudioUtils.fadeSound(AudioUtils.audio.end, 1000, AudioManager.musicVolume);
    };

    function cutTitleMusic() {
        if (vmwnm === 0) AudioUtils.fadeSound(AudioUtils.audio.title, 500, -musicVolume);
        else AudioUtils.fadeSound(AudioUtils.audio.end, 500, -musicVolume);
    };

    function startGame() {
        mWWVV = 1;
        cutTitleMusic();
        if (mvnmN === 0) WvwmM = (WvwmM + 1) % wMw.length;
        mvnmN = wwwvv[WvwmM] - 5000;
        AudioUtils.fadeSound(wMw[WvwmM], 5000, musicVolume);
    };
    return {
        startGame:      startGame,
        quitGame:       quitGame,
        scheduler:      scheduler,
        cutTitleMusic:  cutTitleMusic,
        musicVolume:    musicVolume,
        geiger:         0
    };
})();
try {
    debugMode;
} catch (error) {
    debugMode = window.undefined;
}
if (debugMode === window.undefined) {
    window.aiptag = window.aiptag || ({});
    window.aiptag["consented"] = true;
    window.aiptag["cmd"] = window.aiptag["cmd"] || ([]);
    window.aiptag["cmd"]["display"] = window.aiptag["cmd"]["display"] || ([]);
    window.aiptag["cmd"]["player"] = window.aiptag["cmd"]["player"] || ([]);
    /* var fun = function() {        
        adplayer = new aipPlayer({
            AD_WIDTH: 960,
            AD_HEIGHT: 540,
            AD_FULLSCREEN: true,
            AD_CENTERPLAYER: true,
            LOADING_TEXT: 'loading advertisement',
            PREROLL_ELEM: function() {
                return window.document.getElementById('preroll');
            },
            AIP_COMPLETE: function(nMWWmvw) {
                Home.waitAds = 0;
                Home.ads = -1;
                Home.joinServer();
            },
            AIP_REMOVE: function() {}
        });
    };
    window.aiptag["cmd"]["player"].push(fun); */
}

function reloadIframe() {
    try {
        if (window.self !== window.top) {
            loaded = localStorage2.getItem("inIframe");
            if (loaded === "1") localStorage2.setItem("inIframe", "0");
            else {
                localStorage2.setItem("inIframe", "1");
                window.location.href = window.location.href + "";
            }
        }
    } catch (error) {}
};
reloadIframe();
var versionInf = [30, 1758];
try {
    debugMode;
} catch (error) {
    debugMode = window.undefined;
}
Entitie.init(600, 30000, 5000);
Client.init(30, 15000, 2000, 3, 60000, 10000, onMessageRaw, onMessageJSON, onFirstMessage);

function waitHTMLAndRun() {
    htmlLoaded = ((((((((true && (window.document.getElementById("nickname") !== null)) && (window.document.getElementById("terms") !== null)) && (window.document.getElementById("serverList") !== null)) && (window.document.getElementById("changelog") !== null)) && (window.document.getElementById("howtoplay") !== null)) && (window.document.getElementById("featuredVideo") !== null)) && (window.document.getElementById("trevda") !== null)) && (window.document.getElementById("preroll") !== null)) && (window.document.getElementById("chat") !== null);
    if (htmlLoaded === true) {
        Loader.init();
        Home.init();
        Game.init();
        Score.init();
        Rank.init();
        Editor.init();
        CanvasUtils.initAnimatedCanvas(Loader, __RESIZE_METHOD_SCALE__, "can", "bod", 1280, window.undefined, true);
        Loader.run();
    } else window.setTimeout(waitHTMLAndRun, 100);
};

window.onbeforeunload = function() {
    if (Client.state & Client.State.__CONNECTED__) return "Are you sure you want quit?";
};
waitHTMLAndRun();

